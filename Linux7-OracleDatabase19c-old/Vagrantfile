# -*- mode: ruby -*-
# vi: set ft=ruby :

# Require YAML module
require 'yaml'

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

#-----------------------------------------
# Variables
#-----------------------------------------
params = YAML.load_file './config/variable.yaml'

# Shared
var_box_image         = params['shared']['box']
var_box_url           = params['shared']['url']

# Environment
var_name              = params['env']['name']
var_host_name         = params['env']['hostname']
var_db_shiphome       = params['env']['db_shiphome']
var_ora_inventory     = params['env']['ora_inventory']
var_oracle_base       = params['env']['oracle_base']
var_oracle_home       = params['env']['oracle_home']
var_oracle_sid        = params['env']['oracle_sid']
var_pdb_name          = params['env']['pdb_name']
var_oracle_char       = params['env']['oracle_characterset']
var_oracle_edition    = params['env']['oracle_edition']
var_oracle_password   = params['env']['oracle_pwd']
var_db_version        = params['env']['db_version']
var_pdb_number        = params['env']['pdb_number']
var_grid_home         = params['env']['grid_home']
var_grid_shiphome     = params['env']['grid_shiphome']

#-------------------------------------------
# Check Variables
#-------------------------------------------

#-------------------------------------------
# set virtual machine specific items
#-------------------------------------------

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  config.vm.network "private_network", type: "dhcp"

  config.vm.define "db" do |db|
      db.vm.box = var_box_image
      db.vm.box_url = var_box_url
      db.vm.hostname = var_name

      db.vm.provider "virtualbox" do |v|
        #drives = [3,4,5,6]
        #drives.each do |hd|
        #  v.customize ['createhd', '--filename', "./asmdisks/asm-disk00#{hd}.vmdk", '--format', "VMDK", '--variant', 'Standard', '--size', 5 * 1025]
        #  v.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', hd, '--device', 0, '--type', 'hdd', '--medium', "./asmdisks/asm-disk00#{hd}.vmdk"]
        #end

        v.customize [ "modifyvm", :id, "--memory", 4096 ]
        v.customize [ "modifyvm", :id, "--cpus", 2 ]
        v.customize [ "modifyvm", :id, "--paravirtprovider", "kvm" ]
        v.customize [ "modifyvm", :id, "--name", var_name ]
    
      db.vm.hostname = var_host_name
      db.vm.network "forwarded_port", guest: 1539, host: 15399
      db.vm.network "forwarded_port", guest: 5500, host: 55009
      db.vm.network "forwarded_port", guest: 5901, host: 59019

      db.vm.synced_folder "/Users/bocurtis/Build_Software/zip_files", "/Test_Software"

      # Enable ssh password authentication
      db.vm.provision "shell", inline: <<-SHELL
          sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config    
          /bin/systemctl restart sshd
        SHELL

      db.vm.provision "provision_db", type: "shell", path: "scripts/install.sh", env:
      {
          "DB_SHIPHOME"           => var_db_shiphome,
          "ORA_INVENTORY"		      => var_ora_inventory,
          "ORACLE_BASE" 		      => var_oracle_base,
          "ORACLE_HOME" 		      => var_oracle_home,
          "ORACLE_SID"  		      => var_oracle_sid,
          "PDB_NAME"              => var_pdb_name,
          "ORACLE_CHARACTERSET"  	=> var_oracle_char,
          "ORACLE_EDITION" 	      => var_oracle_edition,
          "ORACLE_PWD"            => var_oracle_password,
          "DB_VERSION"            => var_db_version,
          "PDBNUMBER"             => var_pdb_number
      }

      db.vm.provision "set_passwd", type: "shell", path: "scripts/set_passwd.sh"

    end
  end
end
