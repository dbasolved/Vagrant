/* Copyright (c) 2017, 2020, Oracle and/or its affiliates. 
All rights reserved.*/

drop table gghc_flags_tab;
create table gghc_flags_tab (
 l1_name varchar2(128),
 l2_name varchar2(128),
 l3_name varchar2(128),
 flag varchar2(10), 
 reason varchar2(4000),
 stat_info varchar2(100) -- info specific to the record for using in javascript
);

drop table gghc_summary_tab;
create table gghc_summary_tab(
 id number,
 text varchar2(500),
 val varchar2(500),
 type varchar2(10),
 comments varchar2(500)
);

drop sequence gghc_summary_id;
create sequence gghc_summary_id;

drop table gghc_snapshot_tab;
create table gghc_snapshot_tab (
level0 varchar2(300),
level1 varchar2(300),
level2 varchar2(300),
name varchar2(200),
type# varchar2(4),
tstamp1 timestamp,
value1  varchar2(4000),
tstamp2 timestamp,
value2 varchar2(4000)
);

drop table gghc_params_tab;
create table  gghc_params_tab (
 name varchar2(128),
 value varchar2(128),
 description varchar2(200)
);


drop table gghc_stats_tab;
create table gghc_stats_tab
(
  -- Name of the statistic 
  stat_name varchar2(128) not null,
  -- specify a procedure to be executed before executing the query
  prequery_action clob, 
  -- specify a procedure to be executed after executing the query
  postquery_action clob,
  sql_txt clob,   -- the query to be executed.
  -- tags can be assigned for classification of this query
  -- e.g apply, capture, apply_reader etc.
  tags varchar2(500), 
  comments varchar2(500), -- describe the purpose of the query
  sql_tags varchar2(500), -- not used.
  enabled varchar2(10), -- whether this stat is enabled 
  category  varchar2(128),
  -- detailed description that should accompany the query result. This
  -- will be shown to the end user
  detailed_desc varchar2(1000),
  -- hints about the results of the query. This will he shown to the
  -- end user.
  hints varchar2(1000),
  min_db_version varchar2(20),
  max_db_version varchar2(20),
  sys_only number,
  db_tables varchar2(2000), -- comma separated list of tables referrenced in 
                            -- this stat
  repeat  number,           -- number of times this stat should be executed
  repeat_interval number    -- interval in secs between each execution. 
                            -- Defaults to 10 (secs)
);

drop table gghc_files;
create table gghc_files (
 id varchar2(200),
 file_content clob
);


drop type GGHC_JSONObj force;
/* 
 * GGHC_JSONObj - This is a type that helps in building json records
 */

create or replace type GGHC_JSONObj as object (
  m_begin varchar2(2),
  m_str clob,
  m_type number,
  m_comma varchar2(2),
  m_end varchar2(2),
  m_nl varchar2(2),

/* Constructor without any args */
constructor function GGHC_JSONObj(typ number) return self as result,
member procedure JSONAdd(name varchar2, value varchar2),
member procedure JSONAdd(name varchar2, value number),
member procedure JSONAdd(name varchar2, value GGHC_JSONObj),
member procedure JSONAdd(value GGHC_JSONObj),
member procedure JSONAddRaw(value GGHC_JSONObj),
member procedure JSONAdd(value number),
member procedure JSONAdd(value clob),
member function toString return clob,
member function rawString return clob,
member function sanitize(val varchar2) return varchar2,
member function sanitize(val number) return varchar2,
member procedure reset ,
member procedure JSONAssign(name varchar2, value clob) ,
member procedure JSONAssign(value clob) ,
member procedure JSONAppend(value GGHC_JSONObj) ,
member procedure dump 

);
/

show errors;

create or replace type body GGHC_JSONObj as 
/* Constructor without any args */
constructor function GGHC_JSONObj(typ number) return self as result is
begin
   m_nl := chr(10);
   m_comma := '';
   dbms_lob.createtemporary(m_str, TRUE);
   m_type := typ;

   if (typ = 1) then  -- hash json
     m_begin := '{'||m_nl;
     m_end := '}'||m_nl;
   elsif typ = 2 then -- array json
     m_begin := '['||m_nl;
     m_end := ']'||m_nl;
   end if;
   return;
end;

member procedure JSONAdd(name varchar2, value varchar2) is
  s_val clob;
  l_ele clob;
begin 
   if m_type != 1 then
     Raise_Application_Error (-20001, 'JSONAdd:Invalid type '||m_type);
   end if;

   if (name is null or value is null) then 
     return ;
   end if;
   -- escape special chars
   s_val := sanitize(value);

   -- construct the element to be added
   l_ele := '"' || name || '":'||'"'||s_val||'"'||m_nl; 

   dbms_lob.append(m_str, m_comma||l_ele);

   -- initialize the m_comma after the first add.
   -- it is redundant for any subsequent add
   m_comma := ',';

end;

member procedure JSONAdd(name varchar2, value number) is
  s_val clob;
  l_ele clob;
begin 
   if m_type != 1 then
     Raise_Application_Error (-20001, 'JSONAdd:Invalid type '||m_type);
   end if;

   if (name is null or value is null) then 
     return;
   end if;

   -- escape special chars
   s_val := sanitize(value);

   -- construct the element to be added
   l_ele := '"' || name || '":'||s_val||m_nl; 

   --m_str := m_str||m_comma||l_ele;
   dbms_lob.append(m_str, m_comma||l_ele);

   -- initialize the m_comma after the first add.
   -- it is redundant for any subsequent add
   m_comma := ',';

end;
member procedure JSONAdd(name varchar2, value GGHC_JSONObj) is 
   s_val clob;
   l_ele clob;
begin 
   if m_type != 1 then
     Raise_Application_Error (-20001, 'JSONAdd:Invalid type '||m_type);
   end if;

   if (name is null or value is null) then 
     return;
   end if;
   
   l_ele := '"' || name || '":' || value.toString;
 
   --m_str := m_str || m_comma || l_ele;
   dbms_lob.append(m_str, m_comma||l_ele);
   m_comma := ',';
   
end;
member procedure JSONAdd(value GGHC_JSONObj) is
begin 
   if m_type != 2 then
     Raise_Application_Error (-20001, 'JSONAdd:Invalid type '||m_type);
   end if;

   if (value is null) then 
     return ;
   end if;

   --m_str := m_str||m_comma||value.toString;
   dbms_lob.append(m_str, m_comma||value.toString);

   -- initialize the m_comma after the first add.
   -- it is redundant for any subsequent add
   m_comma := ',';
end;

member procedure JSONAddRaw(value GGHC_JSONObj) is
begin 
   if (value is null or value.rawString is null) then 
     return ;
   end if;

   if (m_str is not null) then
     --m_str := m_str ||m_comma||value.rawString;
     dbms_lob.append(m_str, m_comma||value.rawString);
   else
     m_str := value.rawString;
   end if;

   -- initialize the m_comma after the first add.
   -- it is redundant for any subsequent add
   m_comma := ',';
end;
member procedure JSONAdd(value number) is
   s_val clob;
   l_ele clob;
begin 
   if m_type != 2 then
     Raise_Application_Error (-20001, 'JSONAdd:Invalid type '||m_type);
   end if;

   if (value is null) then 
     return ;
   end if;
   s_val := sanitize(value);

   l_ele := s_val||m_nl;
 
   --m_str := m_str || m_comma || l_ele;
   dbms_lob.append(m_str, m_comma||l_ele);

   m_comma := ',';
end;
member procedure JSONAdd(value clob) is
   s_val clob;
   l_ele varchar2(4000);
begin 
   if m_type != 2 then
     Raise_Application_Error (-20001, 'JSONAdd:Invalid type '||m_type);
   end if;

   if (value is null) then 
     return ;
   end if;

   s_val := sanitize(value);

   l_ele := '"'||s_val||'"'||m_nl;
 
   --m_str := m_str || m_comma || l_ele;
   dbms_lob.append(m_str, m_comma||l_ele);
   m_comma := ',';
end;
member function toString return clob is
begin 
   return m_begin||m_str||m_end;
end;

member function rawString return clob is
begin 
   return m_str;
end;

member function sanitize(val varchar2) return varchar2 is
  l_val clob;
begin 
   l_val := val;
   l_val := replace(l_val,'\','\\');
   l_val := replace(l_val,'/','\/');
   l_val := replace(l_val,chr(9),'\t');
   l_val := replace(l_val,chr(10),'\n');
   l_val := replace(l_val,'"','\"');
   return l_val;
end;

member function sanitize(val number) return varchar2 is
  l_val varchar2(100);
begin 

   if (val > -1 and val < 1) then 
     l_val := to_char(val,'0D99');
   elsif (instr(val,'.') > 1) then 
     l_val := to_char(val,'99999999999999999999D99');
   else
     l_val := val;
   end if;

   -- ltrim it to remove leading spaces that could be added
   -- due to the long number format
   return ltrim(l_val);
end;

member procedure reset is
begin
  --m_str := '';
  dbms_lob.freetemporary(m_str);
  dbms_lob.createtemporary(m_str, TRUE);
  m_comma := '';
end;

member procedure JSONAssign(name varchar2, value clob) is
  l_ele clob;
begin
   if m_type != 1 then
     Raise_Application_Error (-20001, 'JSONAdd:Invalid type '||m_type);
   end if;
   
   l_ele := '"' || name || '":' || value||m_nl;
 
   --m_str := m_str || m_comma || l_ele;
   dbms_lob.append(m_str, m_comma||l_ele);
   m_comma := ',';
end;

member procedure JSONAssign(value clob) is
  l_ele clob;
begin
   if m_type != 2 then
     Raise_Application_Error (-20001, 'JSONAdd:Invalid type '||m_type);
   end if;
   
   l_ele := value||m_nl;
 
   --m_str := m_str || m_comma || l_ele;
   dbms_lob.append(m_str, m_comma||l_ele);
   m_comma := ',';
end;

member procedure JSONAppend(value GGHC_JSONObj) is
  l_ele clob;
begin
   if m_type != 2 then
     Raise_Application_Error (-20001, 'JSONAdd:Invalid type '||m_type);
   end if;
   
   l_ele := value.m_str||m_nl;
 
   --m_str := m_str || m_comma || l_ele;
   dbms_lob.append(m_str, m_comma||l_ele);
   m_comma := ',';
end;

member procedure dump is
begin
  dbms_output.put_line('m_begin:'||m_begin);
  dbms_output.put_line('m_str:'||m_str);
  dbms_output.put_line('m_end:'||m_end);
end;

end;
/

show errors

create or replace function gghc_delta_time (ts_i IN timestamp, ts_f IN timestamp) 
    RETURN NUMBER IS
BEGIN

   if (ts_i = ts_f ) then
     return 0.001; -- dont return zero but return a small fraction of a sec.
   end if;

  return extract(day from (ts_f-ts_i))*24*60*60
               +extract(hour   from (ts_f-ts_i))*60*60
               +extract(minute from (ts_f-ts_i))*60
               +extract(second from (ts_f-ts_i))
			         ;
END;
/

show errors

drop type GGHC_StatsFmtCtx force;

/* GGHC_StatsFmtCtx is the base class for all the format classes. We need
 * to implement the methodsof this class in its sub classes so that
 * the output is in the desired format
 */
create or replace type GGHC_StatsFmtCtx as object (
  NL varchar2(2),
  m_format_id  number ,
  m_col_defs clob,
  m_row_rec clob ,
  m_col_rec clob ,
  m_all_rows clob ,
  m_all_stats clob,
  m_version varchar2(10),
  m_tags clob,
  m_internal number,
  m_tables varchar2(2000),

  m_sample_interval number,
  m_minutes_to_analyze number,
  m_advisor_run_count number,
  m_advisor_interval number,
  m_max_column_length number,
  m_col_truncated number,
  -- stat specific members
  m_stat_name varchar2(500),
  m_stat_enabled varchar2(20),
  m_stat_begin_time timestamp,
  m_stat_end_time timestamp,
  m_stat_order number, -- the order of execution
  m_error number, -- error during execution of the stat
  m_stat_repeat number,
  m_stat_repeat_interval number,
  -- run specific values
  m_run_row_count number,
  m_run_actual_rows number,
  m_run_begin_time timestamp,
  m_run_end_time timestamp,

  -- global members
  mg_report_begin_time timestamp,
  mg_report_end_time timestamp,
  mg_global_name varchar2(4000),
  mg_rac         varchar2(10),
  mg_cdb         varchar2(10),
  mg_instance_name varchar2(128),
  mg_host_name varchar2(64),
  m_content      varchar2(100), -- interpretted by individual fmt drivers

/* Constructor without any args */
constructor function GGHC_StatsFmtCtx return self as result,

/* Invoked if fetching rows for a  m_stat_name returns an error */
member procedure getError(flag in varchar2, reason in varchar2),

/* Set the repeat count and repeat_interval for a stat.
 * This must be called before beginStat procedure
 */
member procedure setRepeat(cnt in number, interval in number),

/* Invoked before fetching rows for a given stat */
member procedure beginStat(stat_ord in number, name_in in varchar2),
/* Invoked after fetching rows for a given stat */
member procedure endStat(name_in in varchar2),

/* Invoked at the begining of a run. In case of repeat, multiple runs
 * will happen of the same stat
 */
member procedure beginRun,

/* Invoked at the end of a run. */
member procedure endRun,

/* Invoked before providing the coldefs of each column in the stat */
member procedure beginColDefs,
/* Invoked with coldef of each column in the stat */
member procedure addColDef(col_num number, col_name in varchar2, col_type in number),
/* Invoked after providing the coldefs of each column in the stat */
member procedure endColDefs,
/* Invoked before a row containing data is fetched for the stat */
member procedure beginRow,
/* Invoked for adding a column value in a given row for the stat */
member procedure addCol(col_name IN varchar2, col_type IN number, col_val IN OUT clob),
/* Invoked after a row containing data is fetched for the stat */
member procedure endRow,
/* Invoked after all the rows are fetched and any final formatting of the 
 * output is required.
 */ 
member procedure computeResult ,
/* invoked to get the final result after all the rows for all the stats 
 * are fetched 
 */
member function getResult return clob,
/* used to record and pass on the info that the stat could be disabled
 * but still we want to stop before execution so that the other metadata
 * about the stat is sent in the output
 */
member procedure setStatEnabled(enabled varchar2),
member procedure setInternal ,
member function isStatEnabled return boolean
) not final;
/

show errors

create or replace type body GGHC_StatsFmtCtx as 

constructor function GGHC_StatsFmtCtx return self as result is
begin
    m_stat_name := '';
    m_run_row_count := 0;
    m_row_rec := '';
    m_col_rec := '';
    m_all_rows := '';
    m_all_stats := '';
    m_col_defs := '';
 return;
end;

/* Invoked if fetching rows for a  stat_name returns an error */
member procedure getError(flag in varchar2, reason in varchar2) is
begin
  m_error := 1;
end;

member procedure setRepeat(cnt in number, interval in number) is
begin
   m_stat_repeat := cnt;
   m_stat_repeat_interval := interval;
end;

member procedure beginRun is
begin
    m_run_row_count  := 0;
    m_run_actual_rows := 0;
    m_run_begin_time := systimestamp;
    m_col_truncated := 0;
end;

member procedure endRun is
begin
    m_run_end_time := systimestamp;
end;

/* Invoked before fetching rows for a given stat */
member procedure beginStat(stat_ord in number, name_in in varchar2) is
begin 
    m_internal := 0;
    m_error := 0;
    m_row_rec := '';
    m_col_rec := '';
    m_col_defs := '';
    m_all_rows := '';

    m_stat_name := name_in;
    m_stat_order := stat_ord;
    m_stat_begin_time := systimestamp;
end;

/* Invoked after fetching rows for a given stat */
member procedure endStat(name_in in varchar2) is
begin
  m_stat_end_time := systimestamp;
end;

/* Invoked before providing the coldefs of each column in the stat */
member procedure beginColDefs is
begin
  null;
end;

/* Invoked with coldef of each column in the stat */
member procedure addColDef(col_num number, col_name in varchar2, col_type in number) is
begin
  null;
end;

/* Invoked after providing the coldefs of each column in the stat */
member procedure endColDefs is
begin
  null;
end;

/* Invoked before a row containing data is fetched for the stat */
member procedure beginRow is
begin
  null;
end;

/* Invoked for adding a column value in a given row for the stat */
member procedure addCol(col_name IN varchar2, col_type IN number, col_val IN OUT clob) is
  val_length number;
  l_max_column_length number := m_max_column_length;

begin
   if col_val is not null then 
     -- TODO:Add other'number' data types 
     if col_type != 2 then
       -- into multiple lines. 
       -- TODO: split large columns to multiple columns with each column 
       -- having size less than the threshold instead of truncating the value.
       val_length := dbms_lob.getlength(col_val);
       if (l_max_column_length <> 0 and val_length > l_max_column_length) then
          col_val := '[TRUNCATED LENGTH ('||
                        l_max_column_length ||
                       ')-ACTUAL LENGTH('||val_length||'):' || 
                       substr(col_val, 1,l_max_column_length);
          m_col_truncated := m_col_truncated+1;
       end if;
     end if;
   end if;
end;

/* Invoked after a row containing data is fetched for the stat */
member procedure endRow is
begin
  null;
end;

/* Invoked after all the rows are fetched and any final formatting of the 
 * output is required.
 */ 
member procedure computeResult is
begin
  null;
end;

/* invoked to get the final result after all the rows for all the stats 
 * are fetched 
 */
member function getResult return clob is
begin
  return m_all_stats;
end;

/* used to record and pass on the info that the stat could be disabled
 * but still we want to stop before execution so that the other metadata
 * about the stat is sent in the output
 */
member procedure setStatEnabled(enabled varchar2) is
begin
  m_stat_enabled := enabled;
end;

/* used to record that we are executing a sys_only query
 */
member procedure setInternal is
begin
  m_internal := 1;
end;

member function isStatEnabled return boolean is
begin
  return m_stat_enabled = 'YES';
end;

end;
/

show errors

drop type GGHC_HTMLFmtCtx force;

create or replace type GGHC_HTMLFmtCtx under GGHC_StatsFmtCtx 
(
computed number,
href clob,
stat_count number,
constructor function GGHC_HTMLFmtCtx(fmt_id in number) return self as result,
overriding member procedure getError( flag in varchar2, reason in varchar2),
overriding member procedure beginStat(stat_ord in number,name_in in varchar2),
overriding member procedure endStat(name_in in varchar2),
overriding member procedure beginColDefs,
overriding member procedure addColDef(col_num number, 
                            col_name in varchar2, col_type in number),
overriding member procedure endColDefs,
overriding member procedure beginRow,
overriding member procedure addCol(col_name IN varchar2, col_type IN number, col_val IN OUT clob),
overriding member procedure endRow,
overriding member procedure computeResult 
   
);
/

show errors


create or replace type body GGHC_HTMLFmtCtx as 
 
constructor function GGHC_HTMLFmtCtx(fmt_id in number) return self as result IS
BEGIN
    NL := chr(10);
    m_stat_name := '';
    m_run_row_count := 0;
    m_format_id := fmt_id;
    m_row_rec := '';
    m_col_rec := '';
    m_all_rows := '';
    m_all_stats := ' ';
    href := '';
    computed := 0;
    stat_count := 0;
    RETURN;
END;

overriding member procedure getError( flag in varchar2, reason in varchar2) is
  l_error varchar2(100) := 'ERROR';
  l_reason varchar2(200) := reason;
  l_flag varchar2(100) := flag;
begin
  beginRow();
   addCol('STATUS_KEY',1,l_error);
   addCol('HC_FLAG',1,l_flag);
   l_reason := m_stat_name||'-'||reason;
   addCol('HC_FLAG_REASON',1,l_reason);
  endRow();
end;

overriding member procedure beginStat(stat_ord in number,name_in in varchar2) is
begin
    (self as GGHC_StatsFmtCtx).beginStat(stat_ord,name_in);
end;

overriding member procedure endStat(name_in in varchar2) is
  row_count_str varchar2(10);
begin
    row_count_str := m_run_row_count||'';
    if href is null then
      href := '<a name=''Top''></a>';
      href := href || HTF.TABLEOPEN('BORDER=1', 'CENTER', NULL, NULL,
                        'CELLPADDING=0 width=''90%''') || NL;
      href := href || HTF.TABLEROWOPEN || CHR(10);

    end if;

    if (mod(stat_count,10) = 0) then
       href := href || HTF.TABLEROWCLOSE || NL;
       href := href || HTF.TABLEROWOPEN || NL;
    end if;
    stat_count := stat_count + 1;

    href := href || HTF.TABLEDATA('<a href=''#'||name_in||'''>'||
                                     name_in||'</a>',
                                     'CENTER') || NL;
    href := href || HTF.TABLEDATA(row_count_str||'',
                                     'CENTER') || NL;
  

    m_all_rows := m_all_rows || HTF.TABLECLOSE || NL;
    m_all_stats := m_all_stats || '<br><a name=''' || name_in||'''>'||
                 '<b>'||name_in||'</b></a><br>'|| m_all_rows||
                  '<br><a href=''#Top''> Top </a></br>';
    m_all_rows := '';
end;

overriding member procedure beginColDefs is
begin
  /* Coldefs would be used as header of the table */
  m_row_rec := HTF.TABLEOPEN('BORDER=1','CENTER',NULL,NULL,
                      'CELLPADDING=0 width=''90%''')||NL;
  /* Begin the row of the table */
  m_row_rec := m_row_rec || HTF.TABLEROWOPEN || NL;
  m_col_rec := '';
end;

overriding member procedure addColDef(col_num number,
                            col_name in varchar2, col_type in number) is
begin
  m_col_rec := m_col_rec || HTF.TABLEHEADER(col_name, 'CENTER') || NL;
end;

overriding member procedure endColDefs is
begin
 m_row_rec := m_row_rec || m_col_rec || HTF.TABLEROWCLOSE || NL;
 m_all_rows := m_all_rows || m_row_rec || NL;
 m_row_rec := '';
end;

overriding member procedure beginRow is
begin
  m_row_rec := HTF.TABLEROWOPEN || NL; 
  m_col_rec := '';
end;

overriding member procedure addCol(col_name IN varchar2, col_type IN number, 
                                   col_val IN OUT clob) is
begin
   m_col_rec := m_col_rec || HTF.TABLEDATA(nvl(col_val,'NULL'),'CENTER')||NL;
end;

overriding member procedure endRow is
begin
  m_row_rec := m_row_rec || m_col_rec || HTF.TABLEROWCLOSE || NL;
  m_all_rows := m_all_rows || m_row_rec || NL;  
  m_run_row_count := m_run_row_count + 1;
  m_col_rec := '';
  m_row_rec := '';
end;

overriding member procedure computeResult is
begin
  if computed is null or computed = 0 then
    href := href || HTF.TABLEROWCLOSE ||'<br />'||CHR(10);
    href := href || HTF.TABLECLOSE;
    m_all_stats := '<html><body>'||NL||href || m_all_stats||NL||
                   '</body></html>';
    computed := 1;
  end if;
end;


end;
/

show errors


drop type GGHC_JSONFmtCtx;

create or replace type GGHC_JSONFmtCtx under GGHC_StatsFmtCtx 
(
mj_row_rec GGHC_JSONObj ,
mj_runs    GGHC_JSONObj,
mj_all_rows GGHC_JSONObj,
mj_all_stats GGHC_JSONObj,
mj_col_defs GGHC_JSONObj,
constructor function GGHC_JSONFmtCtx(fmt_id in number) return self as result,
overriding member procedure getError( flag in varchar2, reason in varchar2),
overriding member procedure beginStat(stat_ord in number,name_in in varchar2),
overriding member procedure endStat(name_in in varchar2),
overriding member procedure beginRun,
overriding member procedure endRun,
overriding member procedure beginColDefs,
overriding member procedure addColDef(col_num number,
                            col_name in varchar2, col_type in number),
overriding member procedure endColDefs,
overriding member procedure beginRow,
overriding member procedure addCol(col_name IN varchar2, col_type IN number, col_val IN OUT clob),
overriding member procedure endRow,
overriding member procedure computeResult 
)not final;
/

show errors

create or replace type body GGHC_JSONFmtCtx as 
 
constructor function GGHC_JSONFmtCtx(fmt_id in number) return self as result IS
BEGIN
    NL := chr(10);
    mj_row_rec := GGHC_JSONObj(2) ;
    mj_all_rows := GGHC_JSONObj(2);
    mj_runs     := GGHC_JSONObj(2);
    mj_all_stats := GGHC_JSONObj(1);
    mj_col_defs := GGHC_JSONObj(1);
    m_format_id := fmt_id;
    m_col_truncated := 0;
    RETURN;
END;

overriding member procedure getError( flag in varchar2, reason in varchar2) is
  db_uname varchar2(100);
  error varchar2(10) := 'ERROR';
  l_flag varchar2(200) := flag;
  l_reason varchar2(200) := reason;
begin

  (self as GGHC_StatsFmtCtx).getError(flag,l_reason);


  beginColDefs();
   addColDef(0,'STATUS_KEY',1);
   addColDef(1,'HC_FLAG',1);
   addColDef(2,'HC_FLAG_REASON',1);
  endColDefs();
  beginRow();
   addCol('STATUS_KEY',1,error);
   addCol('HC_FLAG',1,l_flag);
   -- remove newline as it would cause problem in json string
   l_reason := m_stat_name||'-'||replace(reason,chr(10),'');
   addCol('HC_FLAG_REASON',1,l_reason);
  endRow();

end;

overriding member procedure beginStat(stat_ord in number,name_in in varchar2) is
begin
    (self as GGHC_StatsFmtCtx).beginStat(stat_ord,name_in);
    mj_row_rec.reset;
    mj_col_defs.reset;
    mj_all_rows.reset;
    mj_runs.reset;
end;

overriding member procedure endStat(name_in in varchar2) is
  row_count_str varchar2(10);
  l_stat_name varchar2(128);
  l_ddesc clob;
  l_sdesc clob;
  l_hints clob;
  l_category varchar2(128);
  comma varchar2(2) := ',';
  lj_stat GGHC_JSONObj := GGHC_JSONObj(1);
  l_duration number;
begin
   (self as GGHC_StatsFmtCtx).endStat(name_in);

   row_count_str := m_run_row_count||'';

   l_duration := gghc_delta_time(m_stat_begin_time, m_stat_end_time)*1000;

   select stat_name,
          comments, detailed_desc, hints, category
    into l_stat_name, l_sdesc, l_ddesc, l_hints, l_category
   from gghc_stats_tab where stat_name = name_in;
  

    lj_stat.JSONAdd('NAME',m_stat_name);
    lj_stat.JSONAdd( 'SDESC',l_sdesc);
    lj_stat.JSONAdd( 'DDESC',l_ddesc);
    lj_stat.JSONAdd( 'HINTS',l_hints);
    lj_stat.JSONAdd( 'BEGIN_TIME',
                   TO_CHAR(m_stat_begin_time, 'DD-MON-YYYY HH24:MI:SS'));
    lj_stat.JSONAdd( 'END_TIME',
                   TO_CHAR(m_stat_end_time, 'DD-MON-YYYY HH24:MI:SS'));
    lj_stat.JSONAdd( 'DURATION',l_duration||'');
    lj_stat.JSONAdd( 'ORDER',m_stat_order);
    lj_stat.JSONAdd( 'CATEGORY',l_category);
    lj_stat.JSONAdd( 'COLS',mj_col_defs);
    lj_stat.JSONAdd( 'ENABLED',m_stat_enabled);
    lj_stat.JSONAdd( 'INTERNAL',m_internal);
    lj_stat.JSONAdd( 'TABLES',m_tables);
    if (m_error = 1) then 
      lj_stat.JSONAdd( 'ERROR',m_error||'');
    end if;
    lj_stat.JSONAdd( 'RUNS',mj_runs);
    
    mj_all_stats.JSONAdd(m_stat_name, lj_stat);
end;

overriding member procedure beginColDefs is
begin
  mj_col_defs.reset;
end;

overriding member procedure addColDef(col_num number,
                            col_name in varchar2, col_type in number) is
  comma varchar2(2) := ',';
  l_col_num number;
  lj_def GGHC_JSONObj := GGHC_JSONObj(1);
begin
   l_col_num := col_num;

   lj_def.JSONAdd('TYPE',col_type||'');
   lj_def.JSONAdd('COL_NUM',l_col_num);

   mj_col_defs.JSONAdd(col_name,lj_def);
end;

overriding member procedure endColDefs is
begin
 null;
end;

overriding member procedure beginRow is
begin
  mj_row_rec.reset ;
end;

overriding member procedure addCol(col_name IN varchar2, col_type IN number, 
                                   col_val IN OUT clob) is
  val_quote varchar2(2) := '"';
  comma varchar2(2) := ',';
  val_length number;
  num number;
begin
   mj_row_rec.JSONAdd(nvl(col_val,'NULL'));
   
end;

overriding member procedure endRow is
  comma varchar2(2) := ',';
begin
  mj_all_rows.JSONAdd(mj_row_rec);
  m_run_row_count := m_run_row_count + 1;
  mj_row_rec.reset;
end;

overriding member procedure beginRun is
begin
   (self as GGHC_StatsFmtCtx).beginRun();
   mj_all_rows.reset;
end;

overriding member procedure endRun is
  lj_run GGHC_JSONObj := GGHC_JSONObj(1);
begin
    lj_run.JSONAdd( 'NROWS',m_run_row_count);
    -- atleast one column value was truncated because it was greater 
    -- than the threshold
    if (m_col_truncated > 0) then
      lj_run.JSONAdd( 'COLUMN_TRUNCATED',m_col_truncated);
    end if;
    if (m_run_actual_rows > 0) then
      lj_run.JSONAdd( 'ACTUAL_NROWS',m_run_actual_rows);
    end if;
    lj_run.JSONAdd( 'ROWS',mj_all_rows);

    mj_runs.JSONAdd(lj_run);
end;

overriding member procedure computeResult is
  html_file clob;
  css1_file clob;
  css2_file clob;
  css3_file clob;
  js_file clob;
  metadata clob;
  conf_file clob;
  l_duration number;
  lj_stats GGHC_JSONObj := GGHC_JSONObj(1);
  lj_params GGHC_JSONObj := GGHC_JSONObj(1);
  lj_info GGHC_JSONObj := GGHC_JSONObj(1);
begin

 select file_content into metadata from gghc_files where id = 'hc_meta.json';

 l_duration := gghc_delta_time(mg_report_begin_time, mg_report_end_time)*1000;

  -- these could very well be written as numbers. But we will
  -- write it as string just to avoid any invalid json creation
  -- if there was a number formatting that was not handled properly
  lj_params.JSONAdd('SAMPLE_INTERVAL',m_sample_interval||'');
  lj_params.JSONAdd('ADVISOR_INTERVAL',m_advisor_interval||'');
  lj_params.JSONAdd('ADVISOR_RUN_COUNT',m_advisor_run_count||'');
  lj_params.JSONAdd('MINUTES_TO_ANALYZE',m_minutes_to_analyze||'');
  lj_params.JSONAdd('TAG',nvl(m_tags,'NULL')||'');
  
  -- generic info 
  lj_info.JSONAdd('VERSION',m_version);
  lj_info.JSONAdd('GLOBAL_NAME',mg_global_name);
  lj_info.JSONAdd('INSTANCE_NAME',mg_instance_name);
  lj_info.JSONAdd('HOST_NAME',mg_host_name);
  lj_info.JSONAdd('PARAMS',lj_params);
  lj_info.JSONAdd('BEGIN_REPORT_TIME',
                      TO_CHAR(mg_report_begin_time, 'DD-MON-YYYY HH24:MI:SS'));
  lj_info.JSONAdd('END_REPORT_TIME',
                      TO_CHAR(mg_report_end_time, 'DD-MON-YYYY HH24:MI:SS'));
  lj_info.JSONAdd('DURATION',l_duration||'');
  lj_info.JSONAdd('CURRENT_USER',user);
  lj_info.JSONAdd('CDB',mg_cdb);
  lj_info.JSONAdd('RAC',mg_rac);


  -- Top level jsons are categorized to
  -- INFO
  -- METADATA
  -- STATS .
  -- Each key inside STATS represent each stat data
  if (m_content = 'STATS') then
    lj_stats := mj_all_stats;
  else
    lj_stats.JSONAdd('INFO',lj_info);
    lj_stats.JSONAssign('METADATA',metadata);
    lj_stats.JSONAdd('STATS',mj_all_stats);
  end if;

  m_all_stats := lj_stats.toString; 
 
end;

end;
/

show errors

drop type GGHC_JSON2FmtCtx;

create or replace type GGHC_JSON2FmtCtx under GGHC_StatsFmtCtx 
(
mj_row_rec GGHC_JSONObj ,
mj_runs    GGHC_JSONObj,
mj_all_rows GGHC_JSONObj,
mj_all_stats GGHC_JSONObj,
mj_col_defs GGHC_JSONObj,
constructor function GGHC_JSON2FmtCtx(fmt_id in number) return self as result,
overriding member procedure getError( flag in varchar2, reason in varchar2),
overriding member procedure beginStat(stat_ord in number,name_in in varchar2),
overriding member procedure endStat(name_in in varchar2),
overriding member procedure beginRun,
overriding member procedure endRun,
overriding member procedure beginColDefs,
overriding member procedure addColDef(col_num number,
                            col_name in varchar2, col_type in number),
overriding member procedure endColDefs,
overriding member procedure beginRow,
overriding member procedure addCol(col_name IN varchar2, col_type IN number, col_val IN OUT clob),
overriding member procedure endRow,
overriding member procedure computeResult 
)not final;
/

show errors

create or replace type body GGHC_JSON2FmtCtx as 
 
constructor function GGHC_JSON2FmtCtx(fmt_id in number) return self as result IS
BEGIN
    NL := chr(10);
    mj_row_rec := GGHC_JSONObj(1) ;
    mj_all_rows := GGHC_JSONObj(2);
    mj_runs     := GGHC_JSONObj(2);
    mj_all_stats := GGHC_JSONObj(1);
    mj_col_defs := GGHC_JSONObj(1);
    m_format_id := fmt_id;
    m_col_truncated := 0;
    RETURN;
END;

overriding member procedure getError( flag in varchar2, reason in varchar2) is
  db_uname varchar2(100);
  error varchar2(10) := 'ERROR';
  l_flag varchar2(200) := flag;
  l_reason varchar2(200) := reason;
begin

  (self as GGHC_StatsFmtCtx).getError(flag,l_reason);


  beginColDefs();
   addColDef(0,'STATUS_KEY',1);
   addColDef(1,'HC_FLAG',1);
   addColDef(2,'HC_FLAG_REASON',1);
  endColDefs();
  beginRow();
   addCol('STATUS_KEY',1,error);
   addCol('HC_FLAG',1,l_flag);
   -- remove newline as it would cause problem in json string
   l_reason := m_stat_name||'-'||replace(reason,chr(10),'');
   addCol('HC_FLAG_REASON',1,l_reason);
  endRow();

end;

overriding member procedure beginStat(stat_ord in number,name_in in varchar2) is
begin
    (self as GGHC_StatsFmtCtx).beginStat(stat_ord,name_in);
    mj_row_rec.reset;
    mj_col_defs.reset;
    mj_all_rows.reset;
    mj_runs.reset;
end;

overriding member procedure endStat(name_in in varchar2) is
  row_count_str varchar2(10);
  l_stat_name varchar2(128);
  l_ddesc clob;
  l_sdesc clob;
  l_hints clob;
  l_category varchar2(128);
  comma varchar2(2) := ',';
  lj_stat GGHC_JSONObj := GGHC_JSONObj(1);
  l_duration number;
begin
   (self as GGHC_StatsFmtCtx).endStat(name_in);

   row_count_str := m_run_row_count||'';

   l_duration := gghc_delta_time(m_stat_begin_time, m_stat_end_time)*1000;

   select stat_name,
          comments, detailed_desc, hints, category
    into l_stat_name, l_sdesc, l_ddesc, l_hints, l_category
   from gghc_stats_tab where stat_name = name_in;
  

    lj_stat.JSONAdd('NAME',m_stat_name);
    --lj_stat.JSONAdd( 'SDESC',l_sdesc);
    --lj_stat.JSONAdd( 'DDESC',l_ddesc);
    --lj_stat.JSONAdd( 'HINTS',l_hints);
    --lj_stat.JSONAdd( 'BEGIN_TIME',
    --               TO_CHAR(m_stat_begin_time, 'DD-MON-YYYY HH24:MI:SS'));
    --lj_stat.JSONAdd( 'END_TIME',
    --               TO_CHAR(m_stat_end_time, 'DD-MON-YYYY HH24:MI:SS'));
    --lj_stat.JSONAdd( 'DURATION',l_duration||'');
    --lj_stat.JSONAdd( 'ORDER',m_stat_order);
    --lj_stat.JSONAdd( 'CATEGORY',l_category);
    --lj_stat.JSONAdd( 'COLS',mj_col_defs);
    --lj_stat.JSONAdd( 'ENABLED',m_stat_enabled);
    --lj_stat.JSONAdd( 'INTERNAL',m_internal);
    --lj_stat.JSONAdd( 'TABLES',m_tables);
    if (m_error = 1) then 
      lj_stat.JSONAdd( 'ERROR',m_error||'');
    end if;
    --lj_stat.JSONAdd( 'RUNS',mj_runs);
    if (m_stat_enabled = 'YES' ) then
      lj_stat.JSONAddRaw(mj_runs);
    end if;
    
    mj_all_stats.JSONAdd(m_stat_name, lj_stat);
end;

overriding member procedure beginColDefs is
begin
  mj_col_defs.reset;
end;

overriding member procedure addColDef(col_num number,
                            col_name in varchar2, col_type in number) is
  comma varchar2(2) := ',';
  l_col_num number;
  lj_def GGHC_JSONObj := GGHC_JSONObj(1);
begin
   l_col_num := col_num;

   lj_def.JSONAdd('TYPE',col_type||'');
   lj_def.JSONAdd('COL_NUM',l_col_num);

   mj_col_defs.JSONAdd(col_name,lj_def);
end;

overriding member procedure endColDefs is
begin
 null;
end;

overriding member procedure beginRow is
begin
  mj_row_rec.reset ;
end;

overriding member procedure addCol(col_name IN varchar2, col_type IN number, 
                                   col_val IN OUT clob) is
  val_quote varchar2(2) := '"';
  comma varchar2(2) := ',';
  val_length number;
  num number;
begin
   mj_row_rec.JSONAdd(col_name, nvl(col_val,'NULL'));
   
end;

overriding member procedure endRow is
  comma varchar2(2) := ',';
begin
  mj_all_rows.JSONAdd(mj_row_rec);
  m_run_row_count := m_run_row_count + 1;
  mj_row_rec.reset;
end;

overriding member procedure beginRun is
begin
   (self as GGHC_StatsFmtCtx).beginRun();
   m_run_row_count := 0;
   mj_all_rows.reset;
end;

overriding member procedure endRun is
  lj_run GGHC_JSONObj := GGHC_JSONObj(1);
begin
    lj_run.JSONAdd( 'NROWS',m_run_row_count);
    -- atleast one column value was truncated because it was greater 
    -- than the threshold
    if (m_col_truncated > 0) then
      lj_run.JSONAdd( 'COLUMN_TRUNCATED',m_col_truncated);
    end if;
    if (m_run_actual_rows > 0) then
      lj_run.JSONAdd( 'ACTUAL_NROWS',m_run_actual_rows);
    end if;
    lj_run.JSONAdd( 'ROWS',mj_all_rows);

    mj_runs := lj_run;
    --mj_runs.JSONAdd(lj_run);
end;

overriding member procedure computeResult is
  html_file clob;
  css1_file clob;
  css2_file clob;
  css3_file clob;
  js_file clob;
  metadata clob;
  conf_file clob;
  l_duration number;
  lj_stats GGHC_JSONObj := GGHC_JSONObj(1);
  lj_params GGHC_JSONObj := GGHC_JSONObj(1);
  lj_info GGHC_JSONObj := GGHC_JSONObj(1);
begin

 select file_content into metadata from gghc_files where id = 'hc_meta.json';

 l_duration := gghc_delta_time(mg_report_begin_time, mg_report_end_time)*1000;

  -- these could very well be written as numbers. But we will
  -- write it as string just to avoid any invalid json creation
  -- if there was a number formatting that was not handled properly
  lj_params.JSONAdd('SAMPLE_INTERVAL',m_sample_interval||'');
  lj_params.JSONAdd('ADVISOR_INTERVAL',m_advisor_interval||'');
  lj_params.JSONAdd('ADVISOR_RUN_COUNT',m_advisor_run_count||'');
  lj_params.JSONAdd('MINUTES_TO_ANALYZE',m_minutes_to_analyze||'');
  lj_params.JSONAdd('TAG',nvl(m_tags,'NULL')||'');
  
  -- generic info 
  lj_info.JSONAdd('VERSION',m_version);
  lj_info.JSONAdd('GLOBAL_NAME',mg_global_name);
  lj_info.JSONAdd('INSTANCE_NAME',mg_instance_name);
  lj_info.JSONAdd('HOST_NAME',mg_host_name);
  lj_info.JSONAdd('PARAMS',lj_params);
  lj_info.JSONAdd('BEGIN_REPORT_TIME',
                      TO_CHAR(mg_report_begin_time, 'DD-MON-YYYY HH24:MI:SS'));
  lj_info.JSONAdd('END_REPORT_TIME',
                      TO_CHAR(mg_report_end_time, 'DD-MON-YYYY HH24:MI:SS'));
  lj_info.JSONAdd('DURATION',l_duration||'');
  lj_info.JSONAdd('CURRENT_USER',user);
  lj_info.JSONAdd('CDB',mg_cdb);
  lj_info.JSONAdd('RAC',mg_rac);


  -- Top level jsons are categorized to
  -- INFO
  -- METADATA
  -- STATS .
  -- Each key inside STATS represent each stat data
  if (m_content = 'STATS') then
    lj_stats := mj_all_stats;
  else
    lj_stats.JSONAdd('INFO',lj_info);
    lj_stats.JSONAssign('METADATA',metadata);
    lj_stats.JSONAdd('STATS',mj_all_stats);
  end if;

  m_all_stats := lj_stats.toString; 
 
end;

end;
/

show errors

drop type GGHC_HCJSONFmtCtx force;
 
create or replace type GGHC_HCJSONFmtCtx under GGHC_StatsFmtCtx 
(
mj_row_rec GGHC_JSONObj ,
mj_all_rows GGHC_JSONObj,
mj_all_stats GGHC_JSONObj,
mj_col_defs GGHC_JSONObj,
constructor function GGHC_HCJSONFmtCtx(fmt_id in number) return self as result,
overriding member procedure getError( flag in varchar2, reason in varchar2),
overriding member procedure beginStat(stat_ord in number,name_in in varchar2),
overriding member procedure endStat(name_in in varchar2),
overriding member procedure beginColDefs,
overriding member procedure addColDef(col_num number,
                            col_name in varchar2, col_type in number),
overriding member procedure endColDefs,
overriding member procedure beginRow,
overriding member procedure addCol(col_name IN varchar2, col_type IN number, col_val IN OUT clob),
overriding member procedure endRow,
overriding member procedure computeResult 
)not final;
/

show errors
create or replace type body GGHC_HCJSONFmtCtx as 
 
constructor function GGHC_HCJSONFmtCtx(fmt_id in number) return self as result IS
BEGIN
    NL := chr(10);
    mj_row_rec := GGHC_JSONObj(2) ;
    mj_all_rows := GGHC_JSONObj(2);
    mj_all_stats := GGHC_JSONObj(1);
    mj_col_defs := GGHC_JSONObj(1);
    m_format_id := fmt_id;
    RETURN;
END;

overriding member procedure getError( flag in varchar2, reason in varchar2) is
  db_uname varchar2(100);
  l_error varchar2(100) := 'ERROR';
  l_reason varchar2(200) := reason;
  l_flag varchar2(100) := flag;
begin

  (self as GGHC_StatsFmtCtx).getError(flag,reason);


  beginColDefs();
   addColDef(0,'STATUS_KEY',1);
   addColDef(1,'HC_FLAG',1);
   addColDef(2,'HC_FLAG_REASON',1);
  endColDefs();
  beginRow();
   addCol('STATUS_KEY',1,l_error);
   addCol('HC_FLAG',1,l_flag);
   -- remove newline as it would cause problem in json string
   l_reason := m_stat_name||'-'||replace(reason,chr(10),'');
   addCol('HC_FLAG_REASON',1,l_reason);
  endRow();

end;

overriding member procedure beginStat(stat_ord in number,name_in in varchar2) is
begin
    (self as GGHC_StatsFmtCtx).beginStat(stat_ord,name_in);
    mj_row_rec.reset;
    mj_col_defs.reset;
    mj_all_rows.reset;

end;

overriding member procedure endStat(name_in in varchar2) is
  row_count_str varchar2(10);
  l_stat_name varchar2(128);
  l_ddesc clob;
  l_sdesc clob;
  l_hints clob;
  l_category varchar2(128);
  comma varchar2(2) := ',';
  lj_stat GGHC_JSONObj := GGHC_JSONObj(1);
  l_duration number;
begin
   (self as GGHC_StatsFmtCtx).endStat(name_in);

   row_count_str := m_run_row_count||'';

   l_duration := gghc_delta_time(m_stat_begin_time, m_stat_end_time)*1000;

   select stat_name,
          comments, detailed_desc, hints, category
    into l_stat_name, l_sdesc, l_ddesc, l_hints, l_category
   from gghc_stats_tab where stat_name = name_in;
  

    lj_stat.JSONAdd('NAME',m_stat_name);
    lj_stat.JSONAdd( 'SDESC',l_sdesc);
    lj_stat.JSONAdd( 'DDESC',l_ddesc);
    lj_stat.JSONAdd( 'HINTS',l_hints);
    lj_stat.JSONAdd( 'BEGIN_TIME',
                   TO_CHAR(m_stat_begin_time, 'DD-MON-YYYY HH24:MI:SS'));
    lj_stat.JSONAdd( 'END_TIME',
                   TO_CHAR(m_stat_end_time, 'DD-MON-YYYY HH24:MI:SS'));
    lj_stat.JSONAdd( 'DURATION',l_duration||'');
    lj_stat.JSONAdd( 'ORDER',m_stat_order);
    lj_stat.JSONAdd( 'CATEGORY',l_category);
    lj_stat.JSONAdd( 'COLS',mj_col_defs);
    lj_stat.JSONAdd( 'ENABLED',m_stat_enabled);
    lj_stat.JSONAdd( 'INTERNAL',m_internal);
    lj_stat.JSONAdd( 'TABLES',m_tables);
    lj_stat.JSONAdd( 'NROWS',m_run_row_count);
    if (m_error = 1) then 
      lj_stat.JSONAdd( 'ERROR',m_error||'');
    end if;
    -- atleast one column value was truncated because it was greater 
    -- than the threshold
    if (m_col_truncated > 0) then
      lj_stat.JSONAdd( 'COLUMN_TRUNCATED',m_col_truncated);
    end if;
    if (m_run_actual_rows > 0) then
      lj_stat.JSONAdd( 'ACTUAL_NROWS',m_run_actual_rows);
    end if;
    lj_stat.JSONAdd( 'ROWS',mj_all_rows);
    
    mj_all_stats.JSONAdd(m_stat_name, lj_stat);
    m_all_stats := m_all_stats || 
                   'JSON_BEGIN' || NL || 
                     mj_all_stats.toString ||
                   'JSON_END' || NL  ;
    mj_all_stats.reset;
end;

overriding member procedure beginColDefs is
begin
  mj_col_defs.reset;
end;

overriding member procedure addColDef(col_num number,
                            col_name in varchar2, col_type in number) is
  comma varchar2(2) := ',';
  l_col_num number;
  lj_def GGHC_JSONObj := GGHC_JSONObj(1);
begin
   l_col_num := col_num;

   lj_def.JSONAdd('TYPE',col_type||'');
   lj_def.JSONAdd('COL_NUM',l_col_num);

   mj_col_defs.JSONAdd(col_name,lj_def);
end;

overriding member procedure endColDefs is
begin
 null;
end;

overriding member procedure beginRow is
begin
  mj_row_rec.reset ;
end;

overriding member procedure addCol(col_name IN varchar2, col_type IN number, 
                                   col_val IN OUT clob) is
  val_quote varchar2(2) := '"';
  comma varchar2(2) := ',';
  val_length number;
  num number;
  l_max_column_length number := m_max_column_length;
begin

  (self as GGHC_StatsFmtCtx).addCol(col_name,col_type,col_val);

   mj_row_rec.JSONAdd(nvl(col_val,'NULL'));
   
end;

overriding member procedure endRow is
  comma varchar2(2) := ',';
begin
  mj_all_rows.JSONAdd(mj_row_rec);
  m_run_row_count := m_run_row_count + 1;
  mj_row_rec.reset;
end;

overriding member procedure computeResult is
  html_file clob;
  css1_file clob;
  css2_file clob;
  css3_file clob;
  js_file clob;
  metadata clob;
  doc_links clob;
  conf_file clob;
  l_duration number;
  lj_global GGHC_JSONObj := GGHC_JSONObj(1);
  lj_params GGHC_JSONObj := GGHC_JSONObj(1);
  lj_meta GGHC_JSONObj := GGHC_JSONObj(1);
  lj_doc_links GGHC_JSONObj := GGHC_JSONObj(1);
  lj_info GGHC_JSONObj := GGHC_JSONObj(1);
begin

 select file_content into metadata from gghc_files where id = 'hc_meta.json';
 select file_content into doc_links from gghc_files where id = 'doc_links.json';

 l_duration := gghc_delta_time(mg_report_begin_time, mg_report_end_time)*1000;

  -- these could very well be written as numbers. But we will
  -- write it as string just to avoid any invalid json creation
  -- if there was a number formatting that was not handled properly
  -- make all the parameters json 
  lj_params.JSONAdd('SAMPLE_INTERVAL',m_sample_interval||'');
  lj_params.JSONAdd('ADVISOR_INTERVAL',m_advisor_interval||'');
  lj_params.JSONAdd('ADVISOR_RUN_COUNT',m_advisor_run_count||'');
  lj_params.JSONAdd('MINUTES_TO_ANALYZE',m_minutes_to_analyze||'');
  lj_params.JSONAdd('TAG',nvl(m_tags,'NULL')||'');
  

  -- generic info 
  lj_info.JSONAdd('VERSION',m_version);
  lj_info.JSONAdd('GLOBAL_NAME',mg_global_name);
  lj_info.JSONAdd('INSTANCE_NAME',mg_instance_name);
  lj_info.JSONAdd('HOST_NAME',mg_host_name);
  lj_info.JSONAdd('PARAMS',lj_params);
  lj_info.JSONAdd('BEGIN_REPORT_TIME',
                      TO_CHAR(mg_report_begin_time, 'DD-MON-YYYY HH24:MI:SS'));
  lj_info.JSONAdd('END_REPORT_TIME',
                      TO_CHAR(mg_report_end_time, 'DD-MON-YYYY HH24:MI:SS'));
  lj_info.JSONAdd('DURATION',l_duration||'');
  lj_info.JSONAdd('CURRENT_USER',user);


  -- Top level jsons are categorized to
  -- INFO
  -- METADATA
  -- STATS (can be many).
  -- A json key that is not 'INFO' or 'METADATA' at top level is
  -- treated as a STATS json, implicitly.
  lj_global.JSONAdd('INFO',lj_info);

  lj_meta.JSONAssign('METADATA',metadata);
  lj_doc_links.JSONAssign('DOC_LINKS',doc_links);

  m_all_stats := 'JSON_BEGIN' ||NL ||
                   lj_global.toString ||NL||
                 'JSON_END' ||NL||
                 'JSON_BEGIN'||NL||
                   lj_meta.toString||NL||
                 'JSON_END'||NL||
                 'JSON_BEGIN'||NL||
                   lj_doc_links.toString||NL||
                 'JSON_END'||NL||
                 m_all_stats;
  
end;

end;
/

show errors

drop type GGHC_JSFmtCtx force;
/* Format class for giving the output in JSON format for HC. 
 * The output of
 * each stat is pure json of the following format
{
"VERSION":1  -- JSON version
,"GLOBAL_NAME":"DBS1.REGRESS.RDBMS.DEV.US.ORACLE.COM"
,"INSTANCE_NAME":"sql"
,"BEGIN_REPORT_TIME":"17-OCT-2016 01:46:21"
,"END_REPORT_TIME":"17-OCT-2016 01:46:25"
,"DURATION":4661.036  -- time taken to run the report in ms
,"STATS":{
    "002":{
       "NAME":"002"
      ,"SDESC":"Database Instance and Version"
      ,"DDESC":"- Information about the current Database Instance"
      ,"HINTS":"- The Report is generated from this Database Instance"
      ,"BEGIN_TIME":"17-OCT-2016 01:46:21"
      ,"END_TIME":"17-OCT-2016 01:46:21"
      ,"DURATION":13.817
      ,"ORDER":1
      ,"CATEGORY":"NONE"
      ,"COLS":{
            "DBID":{ "TYPE":"2","COL_NUM":0}
            ,"NAME":{ "TYPE":"1","COL_NUM":1}
            ,"PLATFORM_NAME":{ "TYPE":"1","COL_NUM":2}
            ,"MIN_REQUIRED_CAPTURE_CHANGE#":{ "TYPE":"2","COL_NUM":10}}

      ,"LEVEL":1
      ,"TYPE":"NONE"
      ,"NROWS":1
      ,"ROWS":[
                [ 1929763865 ,"SQL" ,"Linux x86 64-bit" ,"NULL" ]
              ]
    }
  }
}
*/

create or replace type GGHC_JSFmtCtx under GGHC_HCJSONFmtCtx 
(
constructor function GGHC_JSFmtCtx(fmt_id in number) return self as result,
overriding member procedure computeResult 
);
/

show errors

create or replace type body GGHC_JSFmtCtx as 
 
constructor function GGHC_JSFmtCtx(fmt_id in number) return self as result IS
BEGIN
    NL := chr(10); -- new line
    mj_row_rec := GGHC_JSONObj(2) ;
    mj_all_rows := GGHC_JSONObj(2);
    mj_all_stats := GGHC_JSONObj(1);
    mj_col_defs := GGHC_JSONObj(1);
    m_stat_name := '';
    m_run_row_count := 0;
    m_format_id := fmt_id;
    m_row_rec := '';
    m_col_rec := '';
    m_all_rows := '';
    m_all_stats := '';
    m_col_defs := '';
    m_col_truncated := 0;
    RETURN;
END;

overriding member procedure computeResult is
  html_file clob;
  css1_file clob;
  css2_file clob;
  css3_file clob;
  js_file clob;
  conf_file clob;
  l_duration number;
begin

 (self as GGHC_HCJSONFmtCtx).computeResult;

 begin
 select file_content into html_file from gghc_files where id = 'hc_body.html';
 exception when no_data_found then
  null;
 end ;
 begin
 select file_content into css1_file from gghc_files where id = 'hc.css';
 exception when no_data_found then
   null;
 end;
 begin
 select file_content into js_file from gghc_files where id = 'hc.js';
 exception when no_data_found then
   null;
 end;
 begin
 select file_content into conf_file from gghc_files where id = 'hc_conf.json';
 exception when no_data_found then
   null;
 end;

 -- embed the content into appropriate html tags
 css1_file := '<style>'|| NL || css1_file || NL ||'</style>'||NL;
 css2_file := '<style>'|| NL || css2_file || NL ||'</style>'||NL;
 css3_file := '<style>'|| NL || css3_file || NL ||'</style>'||NL;
 js_file := '<script type="text/javascript">'|| NL || js_file || NL ||
           '</script>'|| NL;
 m_all_stats := '<script type="application/json" id="HC_JSON">'|| NL ||
             m_all_stats|| NL ||'</script>'|| NL;
 conf_file := '<script type="application/json" id="HC_CONFIG">'||NL||
             conf_file||NL||'</script>'||NL;

 html_file := '<html>' || NL || 
              ' <head> <meta charset="utf-8"/>'|| NL||
              m_all_stats || NL ||
              css1_file || NL ||
              css2_file || NL ||
              css3_file || NL ||
              js_file || NL ||
              conf_file || NL ||
              ' </head>'|| NL||
              html_file || NL ||
              '</html>'||NL;

 m_all_stats := html_file;
 
end;

end;
/

show errors




create or replace package dbms_goldengate_hcadm_int as



empno number;


sample_interval number := 10;
advisor_run_count number := 1;
advisor_interval number := 1;
	minutes_to_analyze number := 30;
schema_classic varchar2(200) := null;
tags varchar2(500) := null;
exclude_tags varchar2(500) := null;
max_column_length number := 600;

max_rows number := 5000;

NL CONSTANT VARCHAR2(2) := chr(10);
JSON_OUT CONSTANT boolean := true;
HTML_OUT CONSTANT boolean := false;

HTML_FMT CONSTANT number := 2;
JS_FMT CONSTANT number := 3;
JSON_FMT CONSTANT number := 4;
HCJSON_FMT CONSTANT number := 5;
JSON2_FMT CONSTANT number := 6;

HCJSON_VERSION CONSTANT varchar2(10) := '5.06';

FUNCTION display_date(p_value IN VARCHAR2) RETURN VARCHAR2;
FUNCTION display_bytes(p_bytes IN VARCHAR2) RETURN VARCHAR2 ;
FUNCTION display_number(p_value IN VARCHAR2, p_precision NUMBER DEFAULT 2) 
          RETURN VARCHAR2 ;
function get_format_context(format in number) return GGHC_StatsFmtCtx ;
  
function  get_current(name_in varchar2) return varchar2;
procedure exec_query(sql_txt clob, fmtObj IN OUT GGHC_StatsFmtCtx) ;

procedure getStatRows(fmtObj IN OUT  GGHC_StatsFmtCtx) ;


procedure load_params;
function get_parameter(name_in varchar2) return varchar2 ;
function has_tags(req_tags varchar2, stat_tags varchar2) return number ;

procedure check_param(name_in varchar2) ;
function getOneStat(stat_ord in number, name_in varchar2,
                    format IN number default JSON_FMT,
                    disabled number default 1,
                    content varchar2 default 'ALL') return clob ;

procedure getError(fmtObj IN OUT GGHC_StatsFmtCtx, flag in varchar2, 
                   reason in varchar2) ;

procedure debug(msg varchar2) ;

function getAllStats(format IN number,
                     tags in varchar2 default null, 
                     exclude_tags in varchar2 default null,
                     stats_list in varchar2 default null,
                     content varchar2 default null) return clob;
function check_stats(name_in in varchar2) return clob ;


function getDBVersion return varchar2;

function select_version(version varchar2,
                        min_version varchar2, 
                        max_version varchar2) return varchar2;

procedure check_install ;

end dbms_goldengate_hcadm_int;
/

show errors

create or replace package body dbms_goldengate_hcadm_int as

  FUNCTION display_date(p_value IN VARCHAR2) RETURN VARCHAR2 AS
    v_num number;
    v_txt varchar2(30) :='';
  BEGIN
    v_num := to_number(p_value);
    IF (v_num >= 86400) THEN
      v_txt := trunc(v_num/86400)||'d ';
      v_num := mod(v_num,86400);
    END IF; 
    IF (v_num >= 3600) THEN
      v_txt := v_txt||trunc(v_num/3600)||'h ';
      v_num := mod(v_num,3600);
    END IF;    
    IF (v_num >= 60) THEN
      v_txt := v_txt||trunc(v_num/60)||'m ';
      v_num := mod(v_num,60);              
    END IF; 
    IF (v_num > 0) THEN
      v_txt := v_txt||round(v_num,2)||'s ';
    END IF;
    IF (v_num = 0 and v_txt is null) THEN
      v_txt := v_txt||'0s ';
    END IF;
    return v_txt;   
    EXCEPTION
      WHEN OTHERS THEN
      return to_char(p_value);
  END;
 
  FUNCTION display_number(p_value IN VARCHAR2, p_precision NUMBER DEFAULT 2) RETURN VARCHAR2 AS
  BEGIN
    return TO_CHAR(ROUND(TO_NUMBER(p_value),p_precision));
  EXCEPTION
    WHEN OTHERS THEN  
    RETURN p_value;
  END;
	
 FUNCTION display_bytes(p_bytes IN VARCHAR2) RETURN VARCHAR2 AS
  BEGIN
   IF (p_bytes) >= 1125899906842624 THEN
    return TO_CHAR(LPAD(display_number(p_bytes/(1125899906842624)),6,' ') ||' PBytes');
   ELSIF (p_bytes) >= 1099511627776 THEN
      return TO_CHAR(LPAD(display_number(p_bytes/(1099511627776)),6,' ') ||' TBytes');
   ELSIF (p_bytes >= 1073741824) THEN 
     return TO_CHAR(LPAD(display_number(p_bytes/1073741824),6,' ') ||' GBytes');
   ELSIF (p_bytes >= 1048576) THEN 
      return TO_CHAR(LPAD(display_number(p_bytes/(1048576)),6,' ') ||' MBytes');    
   ELSIF (p_bytes >= 1024) THEN 
      return TO_CHAR(LPAD(display_number(p_bytes/(1024)),6,' ') ||' kBytes');
   ELSE
     return TO_CHAR(LPAD(p_bytes,6,' ')||'  Bytes');
   END IF;
  EXCEPTION
    WHEN OTHERS THEN
    RETURN TO_CHAR(p_bytes);
  END;
 

function get_parameter(name_in varchar2) return varchar2 is
   val varchar2(200) := '';
begin
   dbms_goldengate_hcadm_int.check_param(name_in);
   begin
      select value into val from gghc_params_tab where name = name_in;
   exception when no_data_found then
      -- when no data found just return empty val;
      null;
   end;
   return val;
end;

procedure debug(msg varchar2) is
begin
  null;
end;

function getOneStat(stat_ord in number, name_in varchar2,
                    format IN number,
                    disabled number ,
                    content varchar2) return clob is
  fmtObj GGHC_StatsFmtCtx;
  result clob;
begin
  fmtObj := get_format_context(format);
  if (disabled = 1) then
    fmtObj.setStatEnabled('NO');
  end if;
  fmtObj.setRepeat(1, 0);
  fmtObj.m_content := content;
  fmtObj.beginStat(stat_ord, name_in); 
    getStatRows(fmtObj);
  fmtObj.endStat(name_in); 
  fmtObj.computeResult();
  result := fmtObj.getResult();

  return result;
end;

procedure load_params is
begin
  dbms_goldengate_hcadm_int.sample_interval   := nvl(get_parameter('sample_interval'),10);
  dbms_goldengate_hcadm_int.advisor_run_count := nvl(get_parameter('advisor_run_count'),1);
  dbms_goldengate_hcadm_int.advisor_interval  := nvl(get_parameter('advisor_interval'),1);
  dbms_goldengate_hcadm_int.minutes_to_analyze:= nvl(get_parameter('minutes_to_analyze'),30); 
  dbms_goldengate_hcadm_int.schema_classic:= nvl(get_parameter('schema_classic'),user); 
  dbms_goldengate_hcadm_int.max_column_length:= nvl(get_parameter('max_column_length'),600); 
  dbms_goldengate_hcadm_int.max_rows:= nvl(get_parameter('max_rows'),5000); 
end;

/* has_tags: Finds if any of the requested tags are tagged to the stat
 *   req_tags IN comma separated tags requested.
 *   stat_tags IN comma separated tags applied to stat
 * Returns: true if any of the following cases
              * stat_tags is null.
              * req_tags = 'all' (special tag to include everything)
              * tag in req_tags is present in stat_tags
            false otherwise. 
 * Note: Tags are case insensitive. All tags will be converted to upper case
 *       before comparison
 */
 function has_tags(req_tags varchar2, stat_tags varchar2) return number is
  find_tag varchar2(100) := '';
  l_stat_tags varchar2(1000);
  l_req_tags varchar2(1000);
  pos1 number := 1;
  pos2 number := 1;
  tag_pod number;
  is_multiple_stat_tags boolean := false;
  is_multiple_req_tags boolean := false;
begin
  -- if no tags are assigned to the stat then it is selected
  if stat_tags is null then
    return 1;
  end if;
  
   -- when no tags are requested then dont select anything
  if req_tags is null then
    return 0;
  end if;

  -- upper case the tags
  l_stat_tags := upper(stat_tags);
  l_req_tags := upper(req_tags);

  -- special tag 'ALL' to include all
  if l_req_tags = 'ALL' then
    return 1;
  end if;

  debug('1:'||l_stat_tags||':'||l_req_tags);

  -- check if stat_tags has multiple tags
  if instr(l_stat_tags,',',1) > 0 then
    is_multiple_stat_tags := true;
    debug('2:multiple_stat');
  end if;

  -- check if req_tags has multiple tags
  if instr(l_req_tags,',',1) > 0 then
    is_multiple_req_tags := true;
    debug('2:multiple_req');
  end if;

  -- simple case. If neither has multiple tags then compare each other
  if (not is_multiple_stat_tags and not is_multiple_req_tags) then
     if (l_stat_tags = l_req_tags) then
       return 1;
     else 
       return 0;
     end if;
  end if;

  -- in the case of multiple tags loop through each tag in req_tags and
  -- compare with stat_tags
  loop 
    pos2 := instr(req_tags,',',pos1,1);
    debug('3:pos2='||pos2||':pos1='||pos1);
    -- if at end of req_tags then extract the last part after the ','
    if (pos2 = 0) then
      find_tag := substr(l_req_tags,pos1,length(l_req_tags)-pos1+1);
    else
      -- else extract the part between previous ',' and current ','
      find_tag := substr(l_req_tags,pos1,pos2-pos1 );
    end if; 
  
    debug('4:find_tag='||find_tag);
    -- if not multiple stat tags then compare the extracted tag
    -- against stat_tag
    if not is_multiple_stat_tags  then
       if l_stat_tags = find_tag then
         return 1;
       end if;
    else     
       -- else check if the find_tag is at the beginning , middle or at the
       -- end of the stat_tags
       if regexp_instr(l_stat_tags,'^'||find_tag||',',1) > 0 or
          regexp_instr(l_stat_tags,','||find_tag||',',1) > 0 or
          regexp_instr(l_stat_tags,','||find_tag||'$',1) > 0 then
         return 1;
       end if;
    end if;
    -- exit if we are at the end of the req_tags
    if pos2 = 0 then
      exit;
    else
      -- else search for the next tag in req_tags
      pos1 := pos2+1;
    end if;
    
  end loop;
  -- if we reached here then we didnt find any tag match 
  return 0;
end;

procedure check_param(name_in varchar2)  is
  lc varchar2(128) := lower(name_in);
begin
  if lc != 'sample_interval' and
     lc != 'advisor_interval' and
     lc != 'advisor_run_count' and
     lc != 'minutes_to_analyze' and
     lc != 'schema_classic'  and
     lc != 'max_column_length' and
     lc != 'empno' and
     lc != 'max_rows' 
  then
     raise_application_error(-20001,'unknown parameter '||name_in,true);
  end if;
end;


function getAllStats(format IN number, 
                     tags in varchar2 ,
                     exclude_tags in varchar2,
                     stats_list in varchar2,
                     content in varchar2)
   return clob is
  result clob;
  -- any changes to this query should also be done to stats_count
  -- below. stats_count is to know the number of rows that stats would
  -- return
  cursor stats(l_tags varchar2,l_exclude_tags varchar2, l_stats_list varchar2) is 
          select stat_name ,enabled ,db_tables, sys_only,repeat,repeat_interval
          from gghc_stats_tab where
                  (tags is null or (has_tags(l_exclude_tags,tags) <> 1 and 
                                    has_tags(l_tags, tags) = 1)) and
                  (l_stats_list is null or has_tags(l_stats_list,stat_name) = 1)
          order by stat_name ;

  cursor stats_count(l_tags varchar2, l_exclude_tags varchar2, l_stats_list varchar2) is 
          select count(*) cnt from gghc_stats_tab where
                  (tags is null or (has_tags(l_exclude_tags,tags) <> 1 and 
                                    has_tags(l_tags, tags) = 1))  and
                  (l_stats_list is null or has_tags(l_stats_list,stat_name) = 1)
          order by stat_name ;

  fmtObj GGHC_StatsFmtCtx;
  ord number := 1;
  total_count number := 0;
  has_priv number := 0;
  l_action varchar2(500);
begin

   --TODO: 'select any dict' privilege needed only for hc
   -- revisit to make it robust. Now HC tags like CAPTURE and APPLY need
   -- to be amended to have the prefix 'HC'
   if user != 'SYS' and instr(tags,'HC') = 1 then
     select count(*) into has_priv from user_sys_privs where username = user and
                                 privilege = 'SELECT ANY DICTIONARY';
     if has_priv = 0 then
        raise_application_error(-20012,user||' '|| 'does not have ''SELECT ANY DICTIONARY'' privilege',true);
     end if;     
   end if;

   execute immediate 
      'alter session set nls_date_format=''YYYY/MM/DD HH24:MI:SS''';

  -- load default values or what ever is set
  dbms_goldengate_hcadm_int.load_params;

  if tags is not null then
   dbms_goldengate_hcadm_int.tags  := tags;
  end if;

  if exclude_tags is not null then
   dbms_goldengate_hcadm_int.exclude_tags  := exclude_tags;
  end if;


  fmtObj := get_format_context(format);
  fmtObj.m_tags := tags;
  fmtObj.m_tables := tags;
  fmtObj.m_max_column_length := max_column_length;
  fmtObj.m_content := content;

  select global_name, 
         sys_context('USERENV','INSTANCE_NAME'),
         sys_context('USERENV','HOST') into
         fmtObj.mg_global_name, 
         fmtObj.mg_instance_name,
         fmtObj.mg_host_name
  from global_name;

  -- read info about cdb

  -- read info about rac

  for recs in stats_count(tags,exclude_tags, stats_list) loop
    --dbms_output.put_line('cnt:'||recs.cnt);
    total_count := recs.cnt;
  end loop;

  fmtObj.mg_report_begin_time := systimestamp;

  -- for monitoring the progress of the hc report from
  -- another session.
  DBMS_APPLICATION_INFO.SET_MODULE ('GGSTAT_'||tags||'_'||
                                    sys_context('USERENV','SID'),null); 

  for recs in stats(tags,exclude_tags, stats_list) loop
     fmtObj.setStatEnabled(recs.enabled);
     -- set the current stat name in the action so that it can be 
     -- monitered from another session.
     l_action := recs.stat_name;
     l_action := l_action || to_char(ord/total_count*100,'999')||'% ('||
                 ord||'/'||total_count||')';
     DBMS_APPLICATION_INFO.SET_ACTION (l_action);

     -- Set the repeat value for this stat so that it can be executed
     -- so many times. It is not fully implemented yet. It always hardcoded
     -- for now overriding what is specified in the stat attributes
     --fmtObj.setRepeat(recs.repeat, recs.repeat_interval);
     fmtObj.setRepeat(1, 0);
     fmtObj.beginStat(ord,recs.stat_name); 
     
     -- pass on any tables info to the format object
     fmtObj.m_tables := recs.db_tables;

     -- attempt to execute only non-sys queries if user is not sys.
     -- we dont want to filter it out at the select itself as we
     -- want to say which queries were not executed for current user.
     if (recs.sys_only is null or recs.sys_only != '1' or user = 'SYS') then
       if (user = 'SYS' and recs.sys_only = '1') then
         fmtObj.setInternal();
       end if;
       getStatRows(fmtObj);
     else
       fmtObj.setStatEnabled('SYS_ONLY');
     end if;
    
     fmtObj.endStat(recs.stat_name); 
     ord := ord+1;
  end loop;
  fmtObj.mg_report_end_time := systimestamp;
  fmtObj.computeResult();
  result := fmtObj.getResult();

  return result;
end;

function check_stats(name_in in varchar2) return clob is

 -- Select all the stats available in the db
  cursor stats(name varchar2) is 
       select stat_name ,enabled ,db_tables, sys_only 
       from gghc_stats_tab 
       where (name = 'all' or
       stat_name = name) order by stat_name;
  result clob;
  status clob := ' ';
  err_status clob := ' ';
  stat_ord number := 1;
  success_cnt number := 0;
  failure_cnt number := 0;
begin
  status := ' ';

  -- for each stats get the stats and check if it is erroring.
  for recs in stats(name_in) loop
     if recs.sys_only is not null and recs.sys_only = 1 and user != 'SYS'
     then
       continue;
     end if;
     result := getOneStat(stat_ord, recs.stat_name);
     if result is null then
       err_status := err_status ||NL|| ' - '||recs.stat_name||' - NO ROWS';
       failure_cnt := failure_cnt +1;
     elsif instr(result, '"STATUS_KEY":"ERROR"') = 0 then
       status := status || NL || ' - '||recs.stat_name||' - SUCCESS';
       success_cnt := success_cnt +1;
     else
       err_status := err_status || NL || ' - '||recs.stat_name||' - '||result;
       failure_cnt := failure_cnt +1;
     end if;
     stat_ord := stat_ord + 1;
  end loop;
  status := status || NL || err_status || NL ||
            'Total Success:'||success_cnt||NL||
            'Total Failure:'||failure_cnt||NL;

  -- return the consolidated status
  return status;   
end;


procedure getError(fmtObj IN OUT GGHC_StatsFmtCtx, flag in varchar2, 
                   reason in varchar2) as
begin
   fmtObj.getError(flag, reason);
end;

procedure getStatRows(fmtObj IN OUT  GGHC_StatsFmtCtx) as 
  l_order_field varchar2(128);
  l_result clob;
  l_comments varchar2(500);
  l_sql_cursor number;
  l_cnt number;
  l_tab_name varchar2(128);
  l_select_cols clob;
  l_predicate  clob;
  l_qry clob;
  l_count number;
  l_truncated number := 0;
  l_debug boolean := false;
  l_prequery_action clob;
  l_postquery_action clob;
  ctx dbms_xmlgen.ctxHandle;
  db_uname varchar2(100);
  name_in varchar2(500);
begin
  begin
  name_in := fmtObj.m_stat_name;

  -- get the sql_txt to be executed along with pre and post action statements
  select sql_txt, prequery_action,postquery_action, comments
    into l_qry , l_prequery_action, l_postquery_action, l_comments
      from gghc_stats_tab where
  stat_name = name_in;

  -- pre and post actions would be executed only if the query is
  -- enabled. If not enabled we would just describe the columns
  -- in exec_query and return 
  if (fmtObj.isStatEnabled and l_prequery_action is not null) then
    execute immediate l_prequery_action;
  end if;
  
  -- execute the query and get the output in the format requested
  exec_query(l_qry, fmtObj);

  if (fmtObj.isStatEnabled and l_postquery_action is not null) then
    execute immediate l_postquery_action;
  end if;

  EXCEPTION WHEN OTHERS THEN
   getError(fmtObj, 'RED',SQLERRM);
  end;
end;

 function getDBVersion return varchar2 as
   ver varchar2(20);
 begin
     select version into ver from product_component_version where 
     product like 'Oracle Database%';

     return ver;
 end;
 
   
  /* Creates a GGHC_StatsFmtCtx object of desired subtype, based on the
   * 'format' value. Anytime a new subtype of GGHC_StatsFmtCtx is added this
   * function needs to be updated
   */
  function get_format_context(format in number) return GGHC_StatsFmtCtx as
    obj GGHC_StatsFmtCtx;
  begin
    if format = HTML_FMT then 
      obj := new GGHC_HTMLFmtCtx(HTML_FMT);
    elsif format = JSON_FMT then 
      obj := new GGHC_JSONFmtCtx(JSON_FMT);
    elsif format = HCJSON_FMT then 
      obj := new GGHC_HCJSONFmtCtx(HCJSON_FMT);
    elsif format = JS_FMT then 
      obj := new GGHC_JSFmtCtx(JS_FMT);
    elsif format = JSON2_FMT then 
      obj := new GGHC_JSON2FmtCtx(JSON2_FMT);
    else
       raise_application_error(-20002,'invalid format-'||format,true);
    end if;
    if obj is not null then 
      obj.m_version := HCJSON_VERSION;
      obj.m_sample_interval := sample_interval;
      obj.m_advisor_run_count := advisor_run_count;
      obj.m_advisor_interval := advisor_interval;
      obj.m_minutes_to_analyze := minutes_to_analyze;
    end if;
    return obj;
  end;

  function getRowCount(sql_txt clob) return varchar2 as
    sql_cursor number;
    row_count number;
    cols DBMS_SQL.DESC_Tab;
    ncols PLS_INTEGER;
    dummy_num number;
    col_value varchar2(2000);
    col_index number ;
  begin
      row_count := 0; 

      /* Open the cursor and describe the columns of the table */
      sql_cursor := dbms_sql.open_cursor;
      dbms_sql.parse(sql_cursor,'select count(*) from ('|| sql_txt||')', 
                     dbms_sql.native);
      DBMS_SQL.DESCRIBE_COLUMNS (sql_cursor, ncols, cols);

      /* define the columns */
      FOR colind IN 1 .. ncols 
      loop
       dbms_sql.define_column(sql_cursor, colind, col_value, 2000);
      end loop;
  
      dummy_num := dbms_sql.execute(sql_cursor);
  
      loop 
       if (dbms_sql.fetch_rows(sql_cursor) > 0 )then
       
        FOR colind IN 1 .. ncols
        LOOP
            dbms_sql.column_value(sql_cursor, colind, col_value);
        END LOOP;
       else
         exit;
       end if;
      end loop;
     DBMS_SQL.CLOSE_CURSOR (sql_cursor);    
     return col_value;
  end;

  procedure exec_query(sql_txt clob, fmtObj IN OUT GGHC_StatsFmtCtx) as
    sql_cursor number;
    row_count number;
    cols DBMS_SQL.DESC_Tab;
    ncols PLS_INTEGER;
    dummy_num number;
    col_value varchar2(2000);
    col_index number ;
  begin
      row_count := 0; 

      /* Open the cursor and describe the columns of the table */
      sql_cursor := dbms_sql.open_cursor;
      dbms_sql.parse(sql_cursor, sql_txt, dbms_sql.native);
      DBMS_SQL.DESCRIBE_COLUMNS (sql_cursor, ncols, cols);

      fmtObj.beginColDefs();
      FOR colind IN 1 .. ncols 
      loop
         col_index := colind - 1;
         -- make col_num zero based by subtracting 1
         fmtObj.addColDef(col_index, cols(colind).col_name, 
                           cols(colind).col_type);
      end loop;
      fmtObj.endColDefs();

      -- this cursor is used only for describing. 
      DBMS_SQL.CLOSE_CURSOR (sql_cursor);    

      -- if stat is not enabled then we come as far as describing
      -- columns so the the json can have them. The query will not be 
      -- executed .
      if fmtObj.isStatEnabled <> true then
        return;
      end if;
      
      -- Run the stat query for as many times as requested
      FOR run in 1 .. fmtObj.m_stat_repeat
      loop

      fmtObj.beginRun();
      sql_cursor := dbms_sql.open_cursor;
      dbms_sql.parse(sql_cursor, sql_txt, dbms_sql.native);

      /* define the columns */
      FOR colind IN 1 .. ncols 
      loop
       dbms_sql.define_column(sql_cursor, colind, col_value, 2000);
      end loop;
  
      dummy_num := dbms_sql.execute(sql_cursor);
  
      loop 
       if (dbms_sql.fetch_rows(sql_cursor) > 0 )then
       
        row_count := row_count + 1;

        -- if we have reached the max rows allowed, then just count the
        -- number of rows without adding the actual rows.
        if (row_count > dbms_goldengate_hcadm_int.max_rows) then
           fmtObj.m_run_actual_rows := getRowCount(sql_txt);
           exit;
        end if;

        /* construct the row record */
        fmtObj.beginRow();
   
        FOR colind IN 1 .. ncols
        LOOP
            dbms_sql.column_value(sql_cursor, colind, col_value);
            col_value := replace(replace(col_value, CHR(13), ''), CHR(10), '');
            /* Add each column as an element of this row json record */
            fmtObj.addCol(cols(colind).col_name,cols(colind).col_type,
                          col_value);
        END LOOP;
        -- one row is completed
        fmtObj.endRow();
       else
         exit;
       end if;
      end loop;
     DBMS_SQL.CLOSE_CURSOR (sql_cursor);    
     fmtObj.endRun();     

     if (run < fmtObj.m_stat_repeat) then
       dbms_lock.sleep(fmtObj.m_stat_repeat_interval);
     end if;
     end loop;
  
  end;

 /* 
  * select_version: Helps to choose or discard a stat.
  *  version: current version of the db
  *  min_version : min version of db the stat is applicable for
  *  max_version : max version of db the stat is applicable for
  * Returns :'0' if the current version of the db doesnt fall in 
  *           the range of min_version and max_version. 
  *          '1' if it falls in the range.
  *          if min_db_version and max_db_version is null then returns '1'
  */
 function select_version(version varchar2,
         min_version varchar2, max_version varchar2) 
   return varchar2 is
   ret varchar2(5) := '0';
 begin
   if (min_version is null and max_version is null) then
     ret := '1'; -- if no version info then choose selection
   elsif (min_version is null) then
     if version <= max_version then 
       ret := '1';
     end if;
   elsif (max_version is null) then
     if version >= min_version then 
       ret := '1';
     end if;
   else
     if version >= min_version and version <= max_version then
       ret := '1';
     end if;
   end if;
   return ret;
    
 end;

 /* check_install: Runs a series of checks to ensure that the setup
  *                of stats and the pl/sql packages went through fine.
  */
 procedure check_install is
  -- change this number inline with the number of expected objects
  TOTAL_OBJECTS number := 24;
  MIN_STAT_COUNT number := 160;

  cursor stat_count is select count(*) cnt from gghc_stats_tab;

  -- no stat should have a version range not compatible with current db version
  cursor version_range(version varchar2) is 
         select stat_name, min_db_version, max_db_version 
         from gghc_stats_tab 
         where min_db_version > version or max_db_version < version ;

  -- no stat should have a null min_db_version
  cursor null_check is select stat_name, min_db_version, max_db_version 
         from gghc_stats_tab 
         where min_db_version is null;

  -- no duplicate stat name. Duplicates mean that different version queries
  -- were added.
  cursor dups is select stat_name from (select stat_name, count(*) cnt
                    from gghc_stats_tab group by stat_name) where
                    cnt > 1 ;

  -- the individual objects and their state.
  cursor obj_status is 
      select object_name,object_type,status from user_objects 
      where object_name in ('DBMS_GOLDENGATE_HCADM_INT','DBMS_GOLDENGATE_HCADM','DBMS_GOLDENGATE_HC','GGHC_STATSFMTCTX','GGHC_HCJSONFMTCTX','GGHC_JSFMTCTX','GGHC_HTMLFMTCTX','GGHC_JSONFMTCTX','GGHC_STATS_TAB','GGHC_FLAGS_TAB','GGHC_SUMMARY_TAB','GGHC_SNAPSHOT_TAB','GGHC_PARAMS_TAB','GGHC_FILES','GGHC_SUMMARY_ID','GGHC_DELTA_TIME') order by 1,2;

  l_actual_total number := 0;
  l_stat_count number := 0;
  l_invalid_objs number := 0;
  l_version_range clob := '';
  l_null_check clob := '';
  l_dups number := 0;
  l_obj_status clob := '';
  l_result clob := '';
  has_priv number := 0;
  NL varchar2(2) := chr(10);
begin 

  for recs in stat_count loop
      l_stat_count := recs.cnt;
  end loop;
  for recs in version_range(getDBVersion) loop
    l_version_range:= '1';
    dbms_output.put_line('VERSION RANGE:'||recs.stat_name || ' '||
                       recs.min_db_version ||' '||recs.max_db_version); 
  end loop;

  -- if the user is SYS then no privilege is required otherwise check 
  -- if select any dictionary privilege is given.
  -- TODO:Also need to check for goldengate privileges
  select count(*) into has_priv from user_sys_privs 
  where (username = user and privilege = 'SELECT ANY DICTIONARY') or
        user = 'SYS' ;

  for recs in null_check loop
    l_null_check:= '1';
    dbms_output.put_line('MIN_DB_VERSION IS NULL: FAILED:'||recs.stat_name || ' '|| 
                         recs.max_db_version);
  end loop;

  for recs in dups loop
    l_dups:= '1';
    dbms_output.put_line('DUPLICATE STAT NAME: FAILED:'||recs.stat_name );
  end loop;

  for recs in obj_status loop
    l_actual_total := l_actual_total + 1;
    if recs.status = 'INVALID' then
      l_invalid_objs := l_invalid_objs + 1;
      dbms_output.put_line('INVALID OBJECTS:'||recs.object_name || ' '||
                       recs.object_type || ' ' || recs.status); 
    end if;
  end loop;

  if has_priv = 0 then 
    l_result := l_result||NL||'ERR..NO SELECT ANY DICTIONARY Privilege.'; 
  end if;

  if l_version_range is null then
    l_result := l_result||NL||'OK...STAT DB Version Range Check.';
  else
    l_result := l_result||NL||'ERR..STAT DB Version Range Check.';
  end if;

  if l_null_check is null then
    l_result := l_result||NL||'OK...STAT DB Version Check.';
  else
    l_result := l_result||NL||'ERR..STAT DB Version Check.';
  end if;

  if l_dups = 0 then
    l_result := l_result||NL||'OK...STAT No Duplicates.';
  else
    l_result := l_result||NL||'ERR..STAT Duplicates found.';
  end if;

  if (l_stat_count > 150) then
    l_result := l_result||NL||'OK...STAT Count check ('||l_stat_count||').';
  else
    l_result := l_result||NL||'ERR..STAT Count check ('||l_stat_count||').';
  end if;


  if l_invalid_objs = 0 then
    l_result := l_result||NL||'OK...STAT Invalid Objects Count check.';
  else
    l_result := l_result||NL||'ERR..('||l_invalid_objs||')Invalid Objects found';
  end if;

  if l_actual_total = TOTAL_OBJECTS then
    l_result := l_result||NL||'OK...GGHC Objects Count:actual='||
                   l_actual_total||':expected='||TOTAL_OBJECTS;
  else
    l_result := l_result||NL||'ERR..GGHC Objects Count:actual='||
                   l_actual_total||':expected='||TOTAL_OBJECTS;
  end if;

  dbms_output.put_line(l_result);

end;

function get_current(name_in varchar2) return varchar2 is
   val varchar2(200) := '';
begin
   dbms_goldengate_hcadm_int.check_param(name_in);
   if name_in = 'sample_interval' then
     val := sample_interval;
   elsif name_in = 'advisor_interval' then
     val := advisor_interval;
   elsif name_in = 'advisor_run_count' then
     val := advisor_run_count;
   elsif name_in = 'minutes_to_analyze' then
     val := minutes_to_analyze;
   elsif name_in = 'empno' then
     val := empno;
   end if;
   return val;
end;

end dbms_goldengate_hcadm_int;
/

show errors

SET NUMWIDTH 10
SET LINESIZE 80
SET TRIMSPOOL ON
SET TAB OFF
SET PAGESIZE 0
set long 100000


create or replace package dbms_goldengate_hcadm as 

function health_check(
  format number default dbms_goldengate_hcadm_int.JS_FMT,
  tags varchar2 default 'HC',
  exclude_tags varchar2 default null
) return clob;


procedure set_parameter(name_in varchar2, value_in varchar2) ;
function get_parameter(name_in varchar2) return varchar2 ;


function getQuery(name in varchar2) return clob ;

procedure enable(stat_id varchar2) ;
procedure disable(stat_id varchar2) ;


end dbms_goldengate_hcadm;
/

show errors


create or replace package body dbms_goldengate_hcadm as

function health_check(
  format number,
  tags varchar2,
  exclude_tags varchar2
) return clob is
  statExclude varchar2(100);
 pragma AUTONOMOUS_TRANSACTION;
begin
  return dbms_goldengate_hcadm_int.getAllStats(format,tags, exclude_tags);
end;

procedure set_parameter(name_in varchar2, value_in varchar2) is 
begin
 dbms_goldengate_hcadm_int.check_param(name_in);
 if get_parameter(name_in) != '' then
   update gghc_params_tab set value = value_in where name = name_in;
 else
   insert into gghc_params_tab values (name_in,value_in,'');
 end if; 
 commit;
end;

function get_parameter(name_in varchar2) return varchar2 is
begin
    return dbms_goldengate_hcadm_int.get_parameter(name_in);
end;


function getQuery(name in varchar2) return clob is
 qry clob;
 sql_cursor number;
begin
  select sql_txt into qry from gghc_stats_tab where
  stat_name = name;

  return qry;
end;
 

  procedure enable(stat_id varchar2) as
    sname varchar2(128);
  begin
    select stat_name into sname from gghc_stats_tab 
    where stat_name = stat_id for update;

    update  gghc_stats_tab set enabled='YES' 
    where stat_name = stat_id;
    commit;
  end;

  procedure disable(stat_id varchar2) as
    sname varchar2(128);
  begin
    select stat_name into sname from gghc_stats_tab 
    where stat_name = stat_id for update;
    update  gghc_stats_tab set enabled='NO' 
    where stat_name = stat_id;
    commit;
  end;

 

end dbms_goldengate_hcadm;
/

show errors

  

/* dbms_goldengate_hc : Package that contains procedures and functions
 * that are specifically used only by OGG healthcheck.
 */
drop package dbms_goldengate_hc;
drop type gghc_rows;
drop type gghc_row;
drop type gghc_cols;

drop type gghc_heartbeat_rows;
drop type gghc_heartbeat_row;

create type gghc_cols is varray(100) of varchar2(2000);
/

show errors
create  type gghc_row as object
(
  cols gghc_cols
);
/
show errors

create type gghc_rows as table of gghc_row;
/

create or replace type gghc_heartbeat_row as object(
     LOCAL_DATABASE         VARCHAR2(512),
     CURRENT_LOCAL_TS        TIMESTAMP(6),
     REMOTE_DATABASE        VARCHAR2(512),
     INCOMING_HEARTBEAT_AGE     NUMBER,
     INCOMING_PATH            VARCHAR2(4000),
     INCOMING_LAG            NUMBER,
     OUTGOING_HEARTBEAT_AGE     NUMBER,
     OUTGOING_PATH            VARCHAR2(4000),
     OUTGOING_LAG            NUMBER);
/

create type gghc_heartbeat_rows as table of gghc_heartbeat_row;
/


create or replace package dbms_goldengate_hc as

CONST_DB_INIT_ORA          varchar2(100) := 'INIT_params';
CONST_DB_ADMIN_USERS       varchar2(100) := 'OGG_admin_info';
CONST_DB_JOBS              varchar2(100) := 'db_jobs2';
CONST_DB_ADMIN             varchar2(100) := 'gg_admin';
CONST_DB_INFO              varchar2(100) := 'db_info';

CONST_LOGMNR_STATS         varchar2(100) := 'logmnr_stats';
CONST_CAPTURE              varchar2(100) := 'cp_summary';
CONST_CAPTURE_CLASSIC      varchar2(100) := 'cp_proc_1';
CONST_CAPTURE_ATTAHED      varchar2(100) := 'cp_client_info';
CONST_CAPTURE_RUNTIME      varchar2(100) := 'cp_runtime';
CONST_CAPTURE_STATE        varchar2(100) := 'cp_stats';
CONST_CAPTURE_PARAMS       varchar2(100) := 'cp_param';
CONST_CAPTURE_V1           varchar2(100) := 'intl_cp';

CONST_APPLY_PARAMS         varchar2(100) := 'ap_param';
CONST_APPLY_KEY_PARAMS     varchar2(100) := 'ap_key_params';
CONST_APPLY                varchar2(100) := 'ap_summary';
CONST_APPLY_ERROR          varchar2(100) := 'err_q_type';
CONST_APPLY_DML_HANDLERS   varchar2(100) := 'ap_dml_handler';
CONST_APPLY_READER         varchar2(100) := 'ap_reader';
CONST_APPLY_COORD_STATS    varchar2(100) := 'ap_coord_stats';

CONST_INSTANCE_SPOOL       varchar2(100) := 'sp_stats';
CONST_INSTANCE_REG         varchar2(100) := 'db_reg_info';

db_version varchar2(20);


FUNCTION exec_query(sql_txt clob) RETURN gghc_rows PIPELINED ;
FUNCTION heartbeat_tab_func RETURN gghc_heartbeat_rows PIPELINED ;
function is11 return boolean;
function is_sys return boolean;
function dba_replace(sql_txt_in in clob) return clob ;


function get_parameter(
   param_name        in varchar2,
   param_value       in out varchar2,
   table_name        in varchar2,
   table_param_name  in varchar2,
   table_value       in varchar2
 ) return boolean ;
 
 procedure all_checks (verbose boolean ) ;

 procedure database_checks;

 procedure object_checks;

 procedure verify_init_parameter( 
   param_name         in varchar2, 
   expected_value     in varchar2,
   verbose            in boolean,
   more_info          in varchar2 := null,
   more_info2         in varchar2 := null,
   at_least           in boolean := false,
   is_error           in boolean := false,
   use_like           in boolean := false,
   -- may not be necessary
   alert_if_not_found in boolean := true
 ) ;
procedure init_ora_checks(verbose boolean) ;
procedure locked_admin(verbose boolean) ;
procedure extract_notifications(verbose boolean) ;
procedure replicat_notifications(verbose boolean) ;
procedure sys_checks(verbose boolean) ;
procedure config_checks(verbose boolean); 
procedure perf_checks(verbose boolean) ;

procedure fade_old_checks;
function captures_param return clob ;
procedure record_flag(l1 varchar2, l2 varchar2, l3 varchar2, flag varchar2,
  reason varchar2, info varchar2 default null, 
  error_only boolean default false) ;
procedure gen_summary ;
procedure record_sql(name varchar2,sql_txt clob, is_insert boolean);
function getValue(lvl0 varchar2, lvl1 varchar2, 
                                    lvl2 varchar2, nm varchar2, 
                                    what varchar2) return varchar2 ;
procedure record_column (lvl0 varchar2, lvl1 varchar2, 
                                          lvl2 varchar2,
                                          col_name varchar2, 
                                          col_type varchar2, 
                                          ts timestamp, val varchar2, 
                                          is_insert boolean) ;
procedure write_summary(text varchar2, val varchar2 default null, 
                        typ varchar2 default 'a',
                        comments varchar2 default null);
end dbms_goldengate_hc;
/

show errors

create or replace package body dbms_goldengate_hc as

  function is11 return boolean is 
  begin
    if db_version is null then
      select version into db_version from v$instance ;
    end if;

    if (db_version < '12.0.0.0.0') then
      return true;
    else 
      return false;
    end if;
  end;

  function is12 return boolean is 
  begin
    if db_version is null then
      select version into db_version from v$instance ;
    end if;

    if (db_version >= '12.0.0.0.0' and db_version < '18.0.0.0') then
      return true;
    else 
      return false;
    end if;
  end;

  function is_sys return boolean is 
  begin
    if user = 'SYS' then
      return true;
    else 
      return false;
    end if;
  end;

  function dba_replace(sql_txt_in in clob) return clob is
    conid varchar2(10); 
    dba varchar2(10);
    sql_txt clob := sql_txt_in;
  begin
    if (is11) then
      conid := '0';
      dba := 'DBA';
    else
      conid := 'CON_ID';
      dba := 'CDB';
    end if;
    
    sql_txt := replace(sql_txt,'__CON_ID__',conid);
    sql_txt := replace(sql_txt,'__DBA__',dba);

    return sql_txt;
  end;


  function heartbeat_tab_func
       return gghc_heartbeat_rows PIPELINED is
   row_value gghc_heartbeat_row ;
   cursor hb_exec(sql_txt clob) is select * from table(exec_query(sql_txt));
   v_table_name varchar2(128);
   hb_select clob := 'select * from __HBTABLE__ order by remote_database,incoming_path';

  begin
    row_value := gghc_heartbeat_row(null,null,null,null,null,null,null,null,null);
    begin
      select owner||'.'||object_name into v_table_name from
      dba_objects
      where object_name='GG_LAG' and object_type='VIEW';
    exception when others then
      v_table_name :='no_heartbeat';
    end;

    if (v_table_name = 'no_heartbeat') then
      pipe row(row_value);
      return;
    end if;
    hb_select := replace(hb_select,'__HBTABLE__',v_table_name);
    for rec in (select * from table(exec_query(hb_select))) loop
      row_value.LOCAL_DATABASE := rec.cols(1);
      row_value.CURRENT_LOCAL_TS := rec.cols(2);
      row_value.REMOTE_DATABASE := rec.cols(3);
      row_value.INCOMING_HEARTBEAT_AGE := rec.cols(4);
      row_value.INCOMING_PATH := rec.cols(5);
      row_value.INCOMING_LAG := rec.cols(6);
      row_value.OUTGOING_HEARTBEAT_AGE := rec.cols(7);
      row_value.OUTGOING_PATH := rec.cols(8);
      row_value.OUTGOING_LAG := rec.cols(9);
      pipe row(row_value);
    end loop; 
    return;
  end;
 

  function exec_query(sql_txt clob)
       return gghc_rows PIPELINED is
   row_value gghc_row ;
   sql_cursor number;
   cols DBMS_SQL.DESC_Tab;
   ncols PLS_INTEGER;
   col_value varchar2(2000);
   dummy_num number;
 begin      
   row_value := gghc_row(null);
   /* Open the cursor and describe the columns of the table */
   sql_cursor := dbms_sql.open_cursor;
   dbms_sql.parse(sql_cursor, sql_txt, dbms_sql.native);
   DBMS_SQL.DESCRIBE_COLUMNS (sql_cursor, ncols, cols);

   for colind IN 1 .. ncols
   loop
     dbms_sql.define_column(sql_cursor, colind, col_value, 2000);   
   end loop;
   dummy_num := dbms_sql.execute(sql_cursor);

   loop
     if (dbms_sql.fetch_rows(sql_cursor) > 0 )then
      -- for each row clear the cols
      row_value.cols := gghc_cols();
      FOR colind IN 1 .. ncols
      LOOP
        -- for each column value assign it to an element in cols varray 
        dbms_sql.column_value(sql_cursor, colind, col_value);
        row_value.cols.extend;
        row_value.cols(colind) := col_value;
      END LOOP;
 
      pipe row(row_value);
     else 
       exit;
     end if;
    end loop;
    dbms_sql.close_cursor(sql_cursor);

    return;
 end;


function get_parameter(
   param_name        IN varchar2,
   param_value       IN OUT varchar2,
   table_name        IN varchar2,
   table_param_name  IN varchar2,
   table_value       IN varchar2
 ) return boolean is
   statement varchar2(4000);
 begin
   -- construct query 
   statement :=  'select ' || table_value || ' from ' || table_name || ' where ' 
                 || table_param_name || '=''' || param_name || '''';
 
   begin
     execute immediate statement into param_value;
   exception when no_data_found then
     -- data is not found, so return FALSE
     return FALSE;
   end;
   -- data found, so return TRUE
   return TRUE;
 end get_parameter;

 

 procedure verify_init_parameter( 
   param_name         IN varchar2, 
   expected_value     IN varchar2,
   verbose            IN boolean,
   more_info          IN varchar2 := NULL,
   more_info2         IN varchar2 := NULL,
   at_least           IN boolean := FALSE,
   is_error           IN boolean := FALSE,
   use_like           IN boolean := FALSE,
   -- may not be necessary
   alert_if_not_found IN boolean := TRUE
 ) 
 is
   current_val_num  NUMBER;
   expected_val_num NUMBER;
   current_value    varchar2(512);
   prefix           varchar2(25);
   matches          boolean := FALSE;
   comparison_str   varchar2(20);
   flag             varchar2(10) := 'GREEN';
   error_flag       varchar2(10) ;
   reason           varchar2(4000);
 begin
   -- Set prefix as warning or error
   if is_error then
     error_flag := 'RED';
   else
     error_flag := 'YELLOW';
   end if;
 
   -- Set comparison string
   if at_least then
     comparison_str := ' at least ';
   elsif use_like then
     comparison_str := ' like ';
   else
     comparison_str := ' set to ';
   end if;
 
   -- Get value
   if get_parameter(param_name, current_value, 'v$parameter', 'name', 'value') = FALSE 
      and alert_if_not_found then
     flag := error_flag;
     -- Value isn't set, so output alert
     reason := 'The parameter ''' || param_name || ''' should be'
                          || comparison_str || '''' || expected_value 
                          || ''', instead it has been left to its default value.'
     ;
     if verbose and more_info is not null then
       reason := reason || ' ' || more_info;
       if more_info2 is not null then
         reason := reason || ' ' || more_info2;
       end if;
     end if;
     record_flag('DATABASE', 'Configuration', param_name, flag, reason, 
                 CONST_DB_INIT_ORA , error_only => true);
     return;
   end if;
 
   -- See if the expected value is what is actually set
   if use_like then
     -- Compare with 'like'
     if current_value like '%'||expected_value||'%' then
       matches := TRUE;
     end if;
   elsif at_least then
     -- Do at least
     current_val_num := to_number(current_value);
     expected_val_num := to_number(expected_value);
     if current_val_num >= expected_val_num then
       matches := TRUE;
     end if;
   else
     -- Do normal comparison
     if current_value = expected_value then
       matches := TRUE;
     end if;
   end if;
   
   if matches = FALSE then
     -- The values don't match, so alert
     flag := error_flag;
     
     reason := 'The parameter ''' || param_name || ''' should be'
                          || comparison_str || '''' || expected_value 
                          || ''', instead it has the value ''' || current_value || '''.';
     if verbose and more_info is not null then
       reason := reason || ' ' || more_info;
       if more_info2 is not null then
         reason := reason || ' ' || more_info;
       end if;
     end if;
   else
     /* TODO: remove this for GREEN case */
     flag := 'GREEN';
     reason := 'The parameter ''' || param_name || ''' should be'
                          || comparison_str || '''' || expected_value 
                          || ''', it has the value ''' || current_value || '''.';
   end if;
   record_flag('DATABASE', 'Configuration',param_name,flag, reason, 
               CONST_DB_INIT_ORA, error_only => true);
 
 end verify_init_parameter;
 
 procedure database_checks is
   v_stmt varchar2(4000);
   v_count number;
   cursor dv_installed is
      SELECT * FROM V$OPTION WHERE PARAMETER = 'Oracle Database Vault' and value = 'TRUE';
   reason varchar2(4000);
  BEGIN
 
    -- RAC check
    v_count :=0;
    select count(inst_id) into v_count from gv$instance;
    if (v_count > 1) then
       reason := 'Real Application Cluster (RAC) in use';
       record_flag('DATABASE', 'Configuration', 'RAC', 'INFO', reason);
    end if;   
  
    v_count :=0;
    if (is11 = false) then
      -- Multitenant DB check
      v_stmt  := 'select count(*) from v$database where CDB = ''YES''';
    
      execute immediate v_stmt INTO v_count;
      if ( v_count > 0) then
         reason := 'Multitenant Database (CDB/PDB) in use';
         record_flag('DATABASE', 'Configuration', 'RAC', 'INFO', reason);
      end if;
    end if;

    --  If Data Vault installed, check for additional DV roles
    for rec in dv_installed loop
      reason := 'Database Vault is enabled';
      record_flag('DATABASE', 'Security', 'Database Vault', 'INFO', reason);
      exit;
    end loop;
  end database_checks;
 
procedure object_checks as
  reason varchar2(4000); 
  v_size number;
  v_count number;
  v_threshold number ;
  v_stmt varchar2(4000);
begin

  -- STREAMS$_APPLY_PROGRESS
  v_threshold := 1048576000; -- 1GB
  select max(nvl(bytes,0)) into v_size from dba_segments 
    where segment_name ='STREAMS$_APPLY_PROGRESS';
  if (v_size > v_threshold) then
    reason := 'Consider a reorganization from the STREAMS$_APPLY_PROGRESS segment';
    record_flag('REPLICAT', 'Performance', 'Segments', 'INFO', reason);
  end if;
 
  if (is_sys and NOT is11) then
    --  SYS."_DBA_APPLY_CDR_INFO"  
    v_threshold := 10000;
    v_stmt := 'select count(*) from SYS."_DBA_APPLY_CDR_INFO"';
    execute immediate v_stmt into v_count;
    if (v_count > v_threshold) then
      reason := 'Check SYS."_DBA_APPLY_CDR_INFO" view';
      record_flag('ERROR MGMT', 'Performance', 'CDR', 'RED', reason);
    end if;
  end if;
end object_checks;

procedure init_ora_checks(verbose boolean) as
   -- Change the variable below to FALSE if you just want the warnings and errors, not the advice
   dbvers             number;
   row_count          number;
   num_downstream_cap number;
   capture_procs      number;
   apply_procs        number;
   newline            varchar2(2) := chr(10);

    mycheck number;
    value varchar2(100);
 begin
   -- Error checks first
     select count(*) into dbvers from v$instance where version not like '12.1.0.1%';
     if is11 = false and dbvers <> 0 then
         verify_init_parameter('enable_goldengate_replication', 'TRUE', verbose, 
                         '+    To use Oracle GoldenGate with Oracle Database 12g Release 1 (12.1.0.2 or up), '||  
                         'this parameter should be set to TRUE in the init.ora or spfile','+    This parameter can be set dynamically using: ALTER SYSTEM set enable_goldengate_replication=true;',is_error => true);
    
     end if;
   
 
   -- Then warnings
 
  if (is12 = true) then
   verify_init_parameter('compatible', '12.', verbose, 
                         '+    To use the new  features introduced in Oracle Database 12c Release 1, '||  
                         'this parameter should be set to a value greater than ''12.0.0''',
                         '+    To use the triggerless DDL feature of Oracle GoldenGate 12c Integrated Capture (including triggerless DDL), '||  
                         'this parameter should be set to at least 11.2.0.4 at the source database',
                         use_like => TRUE);
  -- TODO: is18 needs to be checked ?
  end if;
 
 
 -- explictly check if aq_tm_processes has been manually set to 0.  If so, raise error.
   begin
    select value ,1 into value,mycheck from v$parameter where name = 'aq_tm_processes' and (value = '0' or value = '10')
      and (ismodified <> 'FALSE' OR isdefault='FALSE');
    if mycheck = 1 then
      record_flag('DATABASE', 'Configuration', 'aq_tm_processes', 'RED',' The parameter ''aq_tm_processes'' should not be explicitly set to '|| value ||
      '      Queue monitoring is disabled for all queues.' ||
      '+    To resolve this problem, set the value to 1 using:  ALTER SYSTEM SET AQ_TM_PROCESSES=1;  ',
                            CONST_DB_INIT_ORA);
    end if;
    exception when no_data_found then 
      record_flag('DATABASE','Configuration', 'aq_tm_processes','GREEN',
                  'aq_tm_processes is non-zero', 
                  CONST_DB_INIT_ORA, error_only => true);
  end;
 
   verify_init_parameter('streams_pool_size', '0', TRUE, 
                         '+    If this parameter is 0 and sga_target is non-zero, then autotuning of the streams pool is implied.'||newline||
                         '+    If the sga_target parameter is set to 0 and streams_pool_size is 0,'|| newline||
                         '+    10% of the shared pool will be used for Streams.' || newline ||
                         '+    If sga_target is 0, the minimum recommendation for streams_pool_size is 200M.'|| newline||
                         '+      Note you must bounce the database if changing the ',
                         '+    value from zero to a nonzero value.  But if simply increasing this' || newline ||
                         '+    value from an already nonzero value, the database need not be bounced.',
                         at_least=> TRUE);
 end;
 
procedure locked_admin(verbose boolean) is
 
  -- By default a streams pool usage above 95% will result in output
  streams_pool_usage_threshold number := 95;  
  -- The total number of registered archive logs to have before reporting 
  -- an error

  row_count number;
  days_old number;
  failed boolean;
  streams_pool_usage number;
  streams_pool_size varchar2(512);
  flag             varchar2(10) := 'GREEN';
  reason           varchar2(4000);
 
  locked_admin clob := 'select username,account_status,__CON_ID__ from '||
                        ' __DBA___users '||
                        'where username in  (select capture_user from '||
                        '__DBA___capture where purpose like ''GoldenGate%'' '||
                        ' union select apply_name from __DBA___apply  where '||
                        ' purpose like ''GoldenGate%'' union select username '||
                        ' from __DBA___goldengate_privileges) and '||
                        ' account_status != ''OPEN'' order by 1';

  
  all_ok boolean := true;
  -- table() keword is required for 11204
  cursor exec(sql_txt clob) is select * from table(exec_query(dba_replace(sql_txt)));

begin

  --  Check for LOCKED GoldenGate Admin Users
  for rec in exec(locked_admin) loop
    flag := 'RED';
    
    if is11 then
      reason := ' GoldenGate Admin ' || rec.cols(1) ||' is '||rec.cols(2);
    else 
      reason := ' GoldenGate Admin ' || rec.cols(1) ||' account in container '||
                rec.cols(3)|| ' is ' ||rec.cols(2);
    end if;
    record_flag('DATABASE', 'Configuration', 'GG Admin Account locked',flag,
                reason, CONST_DB_ADMIN_USERS);
    all_ok := true;
  end loop;

  if all_ok then
    record_flag('DATABASE','Configuration', 'GG Admin Account unlocked',
                'GREEN', 'Admin users not locked',   
                 CONST_DB_ADMIN_USERS, error_only => true);
  end if;

end;

procedure extract_notifications(verbose boolean) as
      
  flag             varchar2(10) := 'GREEN';
  reason           varchar2(4000);
  -- By default a streams pool usage above 95% will result in output
  streams_pool_usage_threshold number := 95;  
  -- The total number of registered archive logs to have before reporting an error
  registered_logs_threshold    number := 1000;
  -- The total number of days old the oldest archived log should be before reporting an error
  registered_age_threshold     number := 60;  -- days
  log_mode                     varchar2(20);
  version                      varchar2(8);

  ckpt_rec boolean;
  row_count number;
  days_old number;
  failed boolean;
  streams_pool_usage number;
  streams_pool_size varchar2(512);

 
  aborted_capture clob := 'select capture_name, error_number, error_message, '||
                          ' __CON_ID__ from __DBA___capture '||
                          ' where status=''ABORTED''';
 
  disabled_capture clob := 'select capture_name,__CON_ID__ from __DBA___capture where status=''DISABLED'' and purpose = ''GoldenGate Capture''';

  cursor  unattached_extract is select capture_name, substr(capture_name,9,8) extract_name from gv$goldengate_capture where state='WAITING FOR INACTIVE DEQUEUERS';
 
  classic_capture clob := 'select capture_name from __DBA___capture where capture_name like ''OGG%$%'' and purpose=''Streams''';

  cursor  old_state_time is select capture_name,state,state_changed_time,to_char( (SYSDATE- state_changed_time)*1440,'99990.99') mins from gv$goldengate_capture where (SYSDATE - state_changed_time ) > .00211;

   ckpt_retention_time clob := 'select capture_name,client_name extract_name, DECODE(checkpoint_retention_time,60,''YELLOW'', 7, ''INFO'', ''INFO'') flag, DECODE(checkpoint_retention_time,60,''WARNING: Checkpoint Retention time is set too high (60 days) for extract '', 7,''INFO: Checkpoint Retention time set to OGG default of 7 days for extract '', ''INFO: Checkpoint Retention time set to ''||checkpoint_retention_time||'' days by extract '') msg from __DBA___capture  where purpose=''GoldenGate Capture''';


  cap_param_maxsga clob := 'select cp.capture_name, substr(cp.capture_name,9,8) extract_name, value from __DBA___capture_parameters cp, __DBA___capture c where c.capture_name=cp.capture_name and purpose = ''GoldenGate Capture'' and cp.parameter = ''MAX_SGA_SIZE''';
  
  -- table() keword is required for 11204
  cursor exec(sql_txt clob) is select * from table(exec_query(dba_replace(sql_txt)));
begin

  flag := 'GREEN';
  reason := 'No capture found in ABORTED state';
  -- Check for aborted capture processes
  for rec in exec(aborted_capture) loop
    flag := 'RED'; 
    reason := 'Capture ''' || rec.cols(1) || ''' has aborted with message ' || rec.cols(3);
    record_flag('EXTRACT', 'Process', 'ABORTED ('||rec.cols(1)||')', flag, 
                reason, CONST_CAPTURE);
  end loop;

  if flag = 'GREEN' then
    record_flag('EXTRACT', 'Process', 'Status', flag, reason,CONST_CAPTURE,
                 error_only => true);
  end if;
 
  flag := 'GREEN';
  reason := 'No capture found in DISABLED state.';
  -- Check for disabled capture processes
  for rec in exec(disabled_capture) loop
    flag := 'YELLOW';
    reason := 'Capture ''' || rec.cols(1) || ''' is disabled';
    record_flag('EXTRACT', 'Process', 'DISABLED Status ('||rec.cols(1)||')', flag, reason,CONST_CAPTURE);
  end loop;

  if flag = 'GREEN' then
    record_flag('EXTRACT', 'Process', 'Status', flag, reason, CONST_CAPTURE,
                 error_only => true);
  end if;

  flag := 'GREEN';
  reason := 'No Classic capture found.';
  -- Check for classic capture processes
  for rec in exec(classic_capture) loop
    flag := 'INFO';
    reason := 'Capture ''' || rec.cols(1) || ''' is Oracle GoldenGate classic capture with LOGRETENTION enabled';
    record_flag('EXTRACT', 'Process', 'Classic ('||rec.cols(1)||')', flag, 
                reason, CONST_CAPTURE_CLASSIC);
  end loop;

  if flag = 'GREEN' then
    record_flag('EXTRACT', 'Process', 'Classic', flag, reason, 
                CONST_CAPTURE_CLASSIC, error_only => true);
  end if;

  flag := 'GREEN';
  reason := 'All available Extracts attached to capture';
  --- capture is started but extract is not attached
   for rec in unattached_extract loop
      flag := 'YELLOW';
      reason := 'Extract '''||rec.extract_name||
                ''' is not attached to capture '''||rec.capture_name||
                '''. State is WAITING FOR INACTIVE DEQUEUERS.'||
                'In GGSCI, use this command to start the extract process: '||
                'START extract '||rec.extract_name;
    record_flag('EXTRACT', 'Process', 'NOT_ATTACHED ('||rec.extract_name||')', 
                flag, reason,CONST_CAPTURE_ATTAHED);
   end loop;

   if flag = 'GREEN' then
      record_flag('EXTRACT', 'Process', 'NOT_ATTACHED', flag, reason,
                  CONST_CAPTURE_ATTAHED, error_only => true);
   end if;

  flag := 'GREEN';
  reason := 'No capture whose state change happened more than 3 minutes back';
 --- capture state has not changed for at least 3 minutes 
   for rec in old_state_time loop
      flag := 'YELLOW';
      reason :=  'Capture State for  '||rec.capture_name||
                 ' has not changed for over '|| rec.mins||
                 ' minutes.'|| 'Last Capture state change timestamp is '||
                 rec.state_changed_time||' State is '||rec.state;
    record_flag('EXTRACT', 'Process', 
                'NO_STATUS_CHANGE ('||rec.capture_name||')', flag, 
                reason,CONST_CAPTURE_STATE);
   end loop;

   if flag = 'GREEN' then
    record_flag('EXTRACT', 'Process', 'NO_STATUS_CHANGE',flag, 
                reason, CONST_CAPTURE_STATE, error_only => true);
   end if;
  flag := 'GREEN';
  reason := 'No job scheduled to run every second';
     select count(*) into row_count from dba_scheduler_jobs where repeat_interval ='FREQ=SECONDLY' and enabled='TRUE';
     select substr(version,0,8)  into version from v$instance;
     if row_count > 0 and version = '12.1.0.1' then
        flag := 'INFO';
        reason := 'There are '||row_count ||' jobs scheduled to run every second.' || 'Jobs scheduled to run every second on an otherwise idle database can cause unexplained extract lag. '|| 'To workaround the issue, decrease the the scheduled job frequency.Database patch for bug 16796277 resolves the issue.'|| 'Bug 16796277 is included in the OGG/RDBMS recommended bundled patch for 12.1.0.1 (MOS docid  1557031.1) ';
     record_flag('DATABASE', 'Configuration', 'Scheduler/Job Frequency', flag,
                 reason, CONST_DB_JOBS, error_only => true);
     end if;

     if flag = 'GREEN' then
       record_flag('DATABASE','Configuration', 'Scheduler/Job Frequency', flag,
                   reason, CONST_DB_JOBS, error_only => true);
     end if;

  flag := 'GREEN';
  reason := '';
   ckpt_rec := FALSE;
   for rec in exec(ckpt_retention_time) loop
       ckpt_rec := TRUE;
   end loop;

   if flag = 'GREEN' then
      record_flag('EXTRACT', 'Configuration', 'Checkpoint Retention', flag, 
                  reason ,CONST_CAPTURE_CLASSIC, error_only => true);
   end if;

/* TODO: Revisit to include these
       if (verbose and ckpt_rec) then
       dbms_output.put_line('+  You can set this parameter to a lower value by including or modifying the following line in the extract parameter file ');
       dbms_output.put_line('    TRANLOGOPTIONS CHECKPOINTRETENTIONTIME number_of_days  ');
       dbms_output.put_line('+   where number_of_days is the number of days the extract logmining server will retain checkpoints. The default is 7 days');
       end if;
   dbms_output.put_line('+ ');
*/
   
  flag := 'GREEN';
  reason := '';
   for rec in exec(cap_param_maxsga) loop
        if rec.cols(3) = 'INFINITE' then
          flag := 'RED';
          reason := 'Extract '||rec.cols(2)||' has not set the memory size parameter for capture '||rec.cols(1)||'.'|| 'Include the following line in the extract parameter file:'|| 'TRANLOGOPTIONS INTEGRATEDPARAMS( MAX_SGA_SIZE 1000)';
        else 
         flag := 'INFO';
          reason := 'Extract '||rec.cols(2)||' memory size  for capture '||rec.cols(1)||' is configured as '||rec.cols(3)||' Megabytes';
        end if;
        record_flag('EXTRACT', 'Configuration', 
                    'MAX_SGA_SIZE ('||rec.cols(2)||')', flag, 
                    reason,CONST_CAPTURE_PARAMS);
   end loop;


  -- Check for too many registered archive logs
  flag := 'GREEN';
  reason := '';

    failed := FALSE;
    reason := '';
    select count(*) into row_count from dba_registered_archived_log where purgeable = 'NO';
    select (sysdate - min(modified_time)) into days_old from dba_registered_archived_log where purgeable = 'NO';
    if row_count > registered_logs_threshold then 
      failed := TRUE;
      flag := 'YELLOW';
      reason :=  row_count || ' archived logs registered for extracts/captures ...';
    end if;
    if days_old > registered_age_threshold then
      failed := TRUE;
      flag := 'YELLOW';
      reason := reason || 'The oldest archived log is ' || round(days_old) || ' days old!';
    end if;

    record_flag('DATABASE', 'Configuration', 'Archive Log Files', flag, 
                reason, error_only => true);

    failed := FALSE;
    reason := 'No anomalies found with archive log count';
    select count(*) into row_count from dba_registered_archived_log where purgeable = 'YES';
    if row_count > registered_logs_threshold/2 then
      flag := 'YELLOW';
      reason := 'There are '|| row_count ||' archived logs ready to be purged from disk.'||'Use the following select to identify unneeded logfiles: '||
      'select name from dba_registered_archived_log where purgeable = "YES"  ';
      record_flag('DATABASE','Configuration','Archive Log Files',flag, 
                  reason, error_only => true);
    end if;

    if (flag = 'GREEN') then
      record_flag('DATABASE','Configuration','Archive Log Files',flag, reason,
                   error_only => true);
    end if;

  /* TODO: Revisit  
    if failed then
      dbms_output.put_line('+    A restarting Capture process must mine through each registered archive log.');
      dbms_output.put_line('+    To speedup Capture restart, reduce the amount of disk space taken by the archived');
      dbms_output.put_line('+    logs, and reduce Capture metadata, consider moving the first_scn automatically by  ');
      dbms_output.put_line('+    altering the checkpoint_retention_time capture parameter to a lower value.');
      dbms_output.put_line('+    Include  ( or modify an existing line) in the extract parameter file ');
      dbms_output.put_line('+    TRANLOGOPTIONS CHECKPOINTRETENTIONTIME number_of_days  ');
      dbms_output.put_line('+         where number_of_days is the number of days the extract logmining server will retain checkpoints.');
      dbms_output.put_line('+    For more information, see the Oracle GoldenGate for Windows and UNIX Reference Guide ');
      dbms_output.put_line('+    Note that once the first scn is increased, Capture will no longer be able to mine prior to ' );
      dbms_output.put_line('+    this new scn value.');
      dbms_output.put_line('+    Successive moves of the first_scn will remove unneeded registered archive');
      dbms_output.put_line('+    logs only if the files have been removed from disk');
    end if;
       dbms_output.put_line('+ '); 
   */

end;

procedure replicat_notifications(verbose boolean) as
  flag             varchar2(10) := 'GREEN';
  reason           varchar2(4000);
  -- By default any errors in cdb_apply_error will result in output
  apply_error_threshold        number := 0;          
  -- By default a streams pool usage above 95% will result in output
  streams_pool_usage_threshold number := 95;  
  log_mode                     varchar2(20);

  row_count number;
  failed boolean;
  streams_pool_usage number;
  streams_pool_size varchar2(512);

  apply_error clob := 'select apply_name, count(*) from __DBA___apply_error group by apply_name';
  aborted_apply clob:= 'select apply_name, error_number, error_message,__CON_ID__ from __DBA___apply where status=''ABORTED'' and purpose = ''GoldenGate Apply''';
 
  disabled_apply clob := 'select apply_name,__CON_ID__ from __DBA___apply where status=''DISABLED''  and purpose = ''GoldenGate Apply''';
  
   apply_parameters clob := 'select apply_name,substr(apply_name,5,8) replicat_name, max(case when parameter=''PARALLELISM'' then value end) parallelism ,max(case when parameter=''MAX_PARALLELISM'' then value end) max_parallelism ,max(case when parameter=''COMMIT_SERIALIZATION'' then value end) commit_serialization ,max(case when parameter=''EAGER_SIZE'' then value end) eager_size ,max(case when parameter=''_DML_REORDER'' then value end) batchsql              ,max(case when parameter=''BATCHSQL_MODE'' then value end) batchsql_mode ,max(case when parameter=''_BATCHTRANSOPS'' then value end) batchtransops ,max(case when parameter=''MAX_SGA_SIZE'' then value end) max_sga_size  ,max(case when parameter=''OPTIMIZE_PROGRESS_TABLE'' then value end) optimize_progress_table from __DBA___apply_parameters ap, __DBA___goldengate_inbound ib where ib.server_name=ap.apply_name group by apply_name order by apply_name';


  -- table() keword is required for 11204
  cursor exec(sql_txt clob) is select * from table(exec_query(dba_replace(sql_txt)));
begin

  flag := 'GREEN';
  reason := 'No apply found in ABORTED state';
  -- Check for aborted apply processes
  for rec in exec(aborted_apply) loop
    flag := 'RED';
    reason := 'Apply ''' || rec.cols(1) || ''' has aborted with message ' || 
                         rec.cols(3);
    if verbose then
      -- Try to give some suggestions
      -- TODO:  include other errors, suggest how to recover
      if rec.cols(2) = 26714 then
        reason := reason || 'This apply aborted because a non-fatal user error has occurred and the ''disable_on_error'' parameter is ''Y''.';
        reason := reason || 'Please resolve the errors and restart the replicat.';
      elsif rec.cols(2) = 26688 then
        reason := reason||'This apply aborted because a column value in a particular change record belonging to a key column was not found. ';
        reason := reason ||'A column value in a particular change record belonging to a key column was not found. ';
        reason := reason ||'For more information, search the trace files for ''26688'' and view the relevant trace file.';
        reason := reason || 'Check that the extract parameter file includes LOGALLSUPCOLS command.';
        reason := reason || 'Also confirm that OGG 12.1.2 (or above) ADD TRANDATA or ADD SCHEMATRANDATA have been performed at source database.'; 

      end if;
    end if;
    record_flag('REPLICAT', 'Process', 'ABORTED Status ('||rec.cols(1)||')', flag, reason, CONST_APPLY);
  end loop;

  if flag = 'GREEN' then
    record_flag('REPLICAT', 'Process', 'Status', flag, reason, CONST_APPLY, error_only => true);
  end if;

  flag := 'GREEN';
  reason := 'No errors in apply error queue';
  -- Check for apply errors in the error queue
  for rec in exec(apply_error) loop
    row_count := rec.cols(2);
    if row_count > apply_error_threshold then
      flag := 'RED';
      reason := '  Apply ''' || rec.cols(1) || ''' has placed ' || 
                row_count || dba_replace(' transactions in the error queue!  Please check the __DBA___apply_error view.');
      record_flag('ERROR MGMT','Apply Error Queue',rec.cols(1), flag, 
                  reason,CONST_APPLY_ERROR);
    end if;
  end loop;

  if flag = 'GREEN' then
    record_flag('ERROR MGMT', 'Apply Error Queue','', flag, 
                reason,CONST_APPLY_ERROR, error_only => true);
  end if;

  flag := 'GREEN';
  reason := 'No apply found in DISABLED state';
  -- Check for disabled apply processes
  for rec in exec(disabled_apply) loop
    flag := 'YELLOW';
      reason := '  Apply ''' || rec.cols(1) || ''' is disabled';
      record_flag('REPLICAT', 'Process', 'DISABLED ('||rec.cols(1)||')', flag, 
                  reason,CONST_APPLY);
  end loop;

  if flag = 'GREEN' then
    record_flag('REPLICAT', 'Process', 'Status', flag, reason,CONST_APPLY,
                error_only => true);
  end if;

  for rec in exec(apply_parameters) loop
    flag := 'GREEN';
    reason := 'MAX_SGA_SIZE parameter check good.';
       if rec.cols(10) <> 'INFINITE' then --max_sga_size
        if rec.cols(10) < 1024 then
          flag := 'YELLOW';
          reason := '     Apply memory from streams pool set to '||rec.cols(10)||'MB for Integrated Replicat '||rec.cols(2) ||'.'||
          'Specify at least 1024 MB for MAX_SGA_SIZE when using Integrated Replicat';
        else 
          flag := 'INFO';
          reason := '     Apply memory from streams pool set to '||rec.cols(10)||'MB for Integrated Replicat '||rec.cols(2) ;
        end if;
        record_flag('REPLICAT', 'Configuration', 'MAX_SGA_SIZE ('||rec.cols(2)||')', flag, reason,CONST_APPLY_PARAMS);
      end if;
      
      if flag = 'GREEN' then
        record_flag('REPLICAT', 'Configuration', 'MAX_SGA_SIZE ('||rec.cols(2)||')', flag, reason,CONST_APPLY_PARAMS, error_only => true);
      end if;

      flag := 'GREEN';
      reason := 'OPTIMIZE_PROGRESS_TABLE parameter check good.';
      if rec.cols(11) = 'Y' then
         select  LOG_MODE into log_mode from v$database;
         if log_mode <> 'ARCHIVELOG' then
           flag := 'YELLOW';
           reason := ' Progress table maintenance configured via redo has been specified, but database is not in ARCHIVELOG mode for Integrated Replicat '||rec.cols(2)||'.'||'The progress table maintenance will not be performed via redo.  Optimize_progress_table setting is ignored for Integrated Replicat '||rec.cols(2);
         else         
           flag := 'INFO';
           reason := '    Progress table maintenance configured via redo for Integrated Replicat '||rec.cols(2);
         end if;
      record_flag('REPLICAT', 'Configuration', 
                  'OPTIMIZE_PROGRESS_TABLE ('||rec.cols(2)||')', flag, 
                  reason,CONST_APPLY_KEY_PARAMS, error_only => true);
      end if;

     if flag = 'GREEN' then
      record_flag('REPLICAT', 'Configuration', 
                  'OPTIMIZE_PROGRESS_TABLE ('||rec.cols(2)||')', flag, 
                  reason,CONST_APPLY_KEY_PARAMS, error_only => true);
     end if;

      flag := 'GREEN';
      reason := 'PARALLELISM parameter check good.';
      if rec.cols(3)=1 then
        flag := 'INFO';
      reason := 'Parallelism and autotuning are disabled for Integrated Replicat '||rec.cols(2);
      record_flag('REPLICAT', 'Configuration', 
                  'PARALLELISM ('||rec.cols(2)||')', flag, 
                  reason,CONST_APPLY_KEY_PARAMS, error_only => true);
      end if;
      if rec.cols(3)=rec.cols(4) and rec.cols(3) > 1 then
        flag := 'INFO';
      reason := 'Parallelism is enabled but autotuning is disabled for Integrated Replicat '||rec.cols(2);
      record_flag('REPLICAT', 'Configuration', 'AUTO_TUNE ('||rec.cols(2)||')', flag, reason);
      end if;
      if rec.cols(3) <> rec.cols(4) and rec.cols(3) > 1  then
        flag := 'INFO';
      reason := 'Both Parallelism and autotuning are enabled for Integrated Replicat '||rec.cols(2);
      record_flag('REPLICAT', 'Configuration', 
                  'PARALLELISM ('||rec.cols(2)||')', flag, 
                  reason, CONST_APPLY_KEY_PARAMS);
      end if;

      flag := 'GREEN';
      reason := 'COMMIT_SERIALIZATION parameter check good';
      if rec.cols(5)='FULL' then
        flag := 'INFO';
      reason := '     Apply parallelism restricted to source commit order for Integrated Replicat '||rec.cols(2);
      record_flag('REPLICAT', 'Configuration', 
                  'COMMIT_SERIALIZATION ('||rec.cols(2)||')', flag, 
                  reason,CONST_APPLY_KEY_PARAMS);
      end if;

      if flag = 'GREEN' then
        record_flag('REPLICAT', 'Configuration', 
                    'COMMIT_SERIALIZATION ('||rec.cols(2)||')', flag, 
                    reason,CONST_APPLY_KEY_PARAMS, error_only => true);
        
      end if;

      flag := 'GREEN';
      reason := 'COMMIT_SERIALIZATION parameter check good';
    if rec.cols(7) is not null  then
        flag := 'INFO';
      reason := 'BATCHSQL is enabled for Integrated Replicat '||rec.cols(2);
      record_flag('REPLICAT', 'Configuration', 'BATCH_SQL ('||rec.cols(2)||')', flag, reason);
        if rec.cols(8) is not null then
          flag := 'INFO';
      reason := 'Batching is '||rec.cols(8);
      record_flag('REPLICAT', 'Configuration', 
                  'BATCH_MODE ('||rec.cols(2)||')', flag, 
                  reason,CONST_APPLY_KEY_PARAMS);
        end if;
        if rec.cols(9) is null then
          flag := 'INFO';
      reason := '     Default BATCHTRANSOPS value is 50 for Integrated Replicat '||rec.cols(2);
          if rec.cols(8) <> 'DEPENDENT' then
             reason := reason || 'Use GoldenGate BATCHTRANSOPS parameter to change this setting.  Tune this parameter down to reduce the amount of WAIT DEPENDENCY  state between apply servers';
          else
             reason := reason || 'Use GoldenGate BATCHTRANSOPS parameter to change this setting.  Tune this parameter up or down to modify the batch grouping size.';
          end if;        
        record_flag('REPLICAT', 'Configuration', 
                    'BATCHTRANSOPS ('||rec.cols(2)||')', flag, reason);
        else 
          flag := 'INFO';
      reason := 'BATCHTRANSOPS value is set to '||rec.cols(9)||' for Integrated Replicat '||rec.cols(2);
          if rec.cols(8) <> 'DEPENDENT' then
             reason := reason || 'Use GoldenGate BATCHTRANSOPS parameter to change this setting.  Tune this parameter down to reduce the amount of WAIT DEPENDENCY  state between apply servers';
          else
             reason := reason || 'Use GoldenGate BATCHTRANSOPS parameter to change this setting.  Tune this parameter up or down to modify the batch grouping size.';
          end if;
      record_flag('REPLICAT', 'Configuration', 
                  'BATCHTRANSOPS ('||rec.cols(1)||')', flag, reason);
        end if;
      end if;
  end loop;
end;

procedure fade_old_checks as
pragma autonomous_transaction;
begin
/*
  delete from gghc_flags_tab where flag = 'FADE';
  update gghc_flags_tab set flag = 'FADE';
*/
  delete from gghc_flags_tab;
  commit;
end;

procedure sys_checks(verbose boolean) as
  flag             varchar2(10) := 'GREEN';
  reason           varchar2(4000);
    -- By default a streams pool usage above 85% will result in output
  streams_pool_usage_threshold number := 85;  
  
  row_count number;
  days_old number;
  failed boolean;
  streams_pool_usage number;
  streams_pool_size varchar2(512);

  unrecovered_queue clob := 'select queue_schema,queue_name from x$buffered_queues where flags=1';
  v1_capture clob := 'select capname_knstcap, substr(capname_knstcap,9,8) extract_name from x$knstcap x , __DBA___capture c where bitand(x.flags_knstcap,64) <> 64 and  x.capname_knstcap=c.capture_name and c.purpose = ''GoldenGate Capture'' and bitand(flags_knstcap,64) <> 64';

  spool_usage clob := 'select FRUSED_KWQBPMT from x$kwqbpmt';

  -- table() keword is required for 11204
  cursor exec(sql_txt clob) is select * from table(exec_query(dba_replace(sql_txt)));
begin

  
  if (is_sys) then
    reason := 'NO V1 capture found';

    for rec in exec(v1_capture) loop
       flag := 'YELLOW';
       reason := '  Extract '''||rec.cols(2)||''' is using V1 protocol';
       reason := reason || 'To convert to V2 protocol (the default for newly created extract) do the following:';
       reason := reason || '1.  Make sure that all outstanding bounded recovery  (BR) transactions have been applied';
       reason := reason || '2.  In GGSCI issue the following command:  Stop extract '||rec.cols(2);
       reason := reason || '3.  Add the following line to the parameter file for '||rec.cols(2);
       reason := reason || 'TRANLOGOPTIONS _LCRCAPTUREPROTOCOL V2';
       reason := reason || '4.  In GGSCI issue the following command:  Start extract '||rec.cols(2);
 
      record_flag('EXTRACT', 'Configuration', 'V1_CAPTURE ('||rec.cols(2)||')', flag, reason,CONST_CAPTURE_V1);
    end loop;
  else -- non-sys
    flag := 'YELLOW';    
    reason := 'V1 Capture check not done.SYS only check';
    record_flag('EXTRACT', 'Configuration', 'V1_CAPTURE', flag, reason,CONST_CAPTURE_V1);
  end if;

  -- TODO: unify the record_flag under for all flag values. We write only for
  -- GREEN here and the respective error cases would write earlier.
  
    flag := 'GREEN';
    reason := '';

    if is_sys then 
    -- Check high streams pool usage
    for rec in exec(spool_usage) loop
    begin
      streams_pool_usage := rec.cols(1);
      select value into streams_pool_size from v$parameter where name = 'streams_pool_size';
      if streams_pool_usage > streams_pool_usage_threshold then
        flag := 'YELLOW';
        reason := '  Streams pool usage for this instance is ' || streams_pool_usage ||
                           '% of ' || streams_pool_size || ' bytes!';
        reason := reason || 'If this system is processing a typical workload, and no ' || 'other errors exist, consider increasing the streams pool size.';
        record_flag('DATABASE', 'Configuration','streams_pool_size', flag, reason, CONST_INSTANCE_SPOOL);
      end if;
    exception when others then null;
    end;
    end loop;

    if flag = 'GREEN' then
      record_flag('DATABASE','Configuration', 'streams_pool_size',flag, 
                  'Usage: '||streams_pool_usage||' threshold: '||streams_pool_usage_threshold, CONST_INSTANCE_SPOOL);
    end if;
  
  -- Check unrecovered queues
    flag := 'GREEN';
    reason := '';  

    for rec in exec(unrecovered_queue) loop
      flag := 'RED';
      reason := ' Queue ''' || rec.cols(1) || '.'||rec.cols(2)||' has not been recovered normally ' ;
      reason := reason || 'Force recovery by altering the queue ownership to another instance. ';
      reason := reason || 'Use the DBMS_AQADM.ALTER_QUEUE_TABLE procedure to specify a different instance.';
      record_flag('DATABASE', 'Recovery', 'unrecovered Queue ('||rec.cols(2)||')', flag, reason);
    end loop;

  end if; -- is_sys
 end;

procedure config_checks(verbose boolean) as
  current_value varchar2(4000);

  flag             varchar2(10) := 'GREEN';
  reason           varchar2(4000);
  
  multiqueues clob := 'select c.capture_name capture_name, a.apply_name apply_name, c.queue_owner queue_owner, c.queue_name queue_name from __DBA___capture c, __DBA___apply a where c.queue_name = a.queue_name and c.queue_owner = a.queue_owner and c.capture_type != ''DOWNSTREAM'' and a.purpose =''STREAMS APPLY'' and c.capture_name not like ''CDC$%''';

  nonlogged_tables clob := 'select table_owner owner,table_name name from __DBA___capture_prepared_tables t where table_owner in (select distinct(table_owner) from __DBA___capture_prepared_tables where supplemental_log_data_pk=''NO'' and supplemental_log_data_fk=''NO'' and supplemental_log_data_ui=''NO'' and supplemental_log_data_all=''NO'' minus select schema_name from __DBA___capture_prepared_schemas) and not exists (select ''X'' from __DBA___log_groups l where t.table_owner = l.owner and t.table_name = l.table_name UNION select ''x'' from __DBA___capture_prepared_database)';


  cursor overlapping_rules is
   select a.streams_name sname, a.streams_type stype, 
          a.rule_set_owner rule_set_owner, a.rule_set_name rule_set_name, 
          a.rule_owner owner1, a.rule_name name1, a.streams_rule_type type1, 
          b.rule_owner owner2, b.rule_name name2, b.streams_rule_type type2
     from dba_streams_rules a, dba_streams_rules b
    where a.rule_set_owner = b.rule_set_owner 
      and a.rule_set_name = b.rule_set_name
      and a.streams_name = b.streams_name and a.streams_type = b.streams_type
      and a.rule_type = b.rule_type
      and (a.subsetting_operation is null or b.subsetting_operation is null)
      and (a.rule_owner != b.rule_owner or a.rule_name != b.rule_name)
      and ((a.streams_rule_type = 'GLOBAL' and b.streams_rule_type 
            in ('SCHEMA', 'TABLE') and a.schema_name = b.schema_name)
       or (a.streams_rule_type = 'SCHEMA' and b.streams_rule_type = 'TABLE' 
           and a.schema_name = b.schema_name)
       or (a.streams_rule_type = 'TABLE' and b.streams_rule_type = 'TABLE' 
           and a.schema_name = b.schema_name and a.object_name = b.object_name
           and a.rule_name < b.rule_name)
       or (a.streams_rule_type = 'SCHEMA' and b.streams_rule_type = 'SCHEMA' 
           and a.schema_name = b.schema_name and a.rule_name < b.rule_name)
       or (a.streams_rule_type = 'GLOBAL' and b.streams_rule_type = 'GLOBAL' 
           and a.rule_name < b.rule_name))
       order by a.rule_name;

  spilled_apply clob := 'select a.apply_name from __DBA___apply_parameters p, __DBA___apply a, gv$buffered_queues q where a.queue_owner = q.queue_schema and a.queue_name = q.queue_name and a.apply_name = p.apply_name and p.parameter = ''PARALLELISM'' and p.value > 1 and (q.cspill_msgs/DECODE(q.cnum_msgs, 0, 1, q.cnum_msgs) * 100) > 25';

/*
  cursor bad_source_db is
   select rule_owner||'.'||rule_name Rule_name, source_database from dba_streams_rules where source_database not in 
             (select global_name from system.logmnrc_dbname_uid_map);

*/
  qtab_too_long clob := 'select queue_table name, length(queue_table) len from dba_queues q , __DBA___apply a where length(queue_table) > 24 and q.owner=a.queue_owner and q.name=a.queue_name';

  cursor reginfo_invalid is
     select comp_id,status from dba_registry where comp_id in ('CATALOG','CATPROC') and status not in ('VALID','UPDATED');

  cursor version_diff is
     select i.version inst_version,r.version reg_version from v$instance i, dba_registry r where 
        r.comp_id  in ('CATALOG','CATPROC') and i.version <>  r.version;

  cparallel clob := 'select p.capture_name, c.client_name  from __DBA___capture_parameters p, __DBA___capture c where c.capture_name=p.capture_name and c.purpose = ''GoldenGate Capture'' and p.parameter=''PARALLELISM'' and to_number(p.value)= 0';

  ogg_cap_privs clob :=  'select distinct capture_user username from __DBA___capture where purpose = ''GoldenGate Capture'' minus select distinct username from dba_goldengate_privileges where privilege_type in (''*'',''CAPTURE'')';

  app_parallel clob :=  'select count(*) from __DBA___apply_parameters p where  p.apply_name in (select apply_name from __DBA___apply where purpose = ''GoldenGate Apply'') and p.parameter=''PARALLELISM'' and to_number(value) = 1';

  dml_handlers clob :=  'select count(*) from __DBA___apply_dml_handlers d where d.apply_name is null and d.error_handler = ''N''';

  error_handlers clob :=  'select count(*) from __DBA___apply_dml_handlers d where d.apply_name is null and d.error_handler = ''Y''';

  cursor ogg_app_privs is select distinct apply_user username from dba_goldengate_inbound 
				minus
			select distinct username from dba_goldengate_privileges where privilege_type in ('*','APPLY');
  cap_count1 clob := 'select count(*) from (select c.capture_name,cp.value  from __DBA___capture c, __DBA___capture_parameters cp where cp.capture_name=c.capture_name and cp.parameter = ''DOWNSTREAM_REAL_TIME_MINE'' and cp.value = ''Y'')';

  cap_count2 clob :='select count(*) from (select c.capture_name,cp.value  from __DBA___capture c, __DBA___capture_parameters cp where cp.capture_name=c.capture_name  and c.capture_type = ''DOWNSTREAM'' and cp.parameter = ''DOWNSTREAM_REAL_TIME_MINE'' and cp.value = ''Y'')';

  cap_count3 clob := 'select count(*) from __DBA___capture_prepared_tables';

  row_count     number;
  min_count     number;
  max_count     number;
  capture_count number;
  local_capture_count number := 0;
  overlap_rules boolean := FALSE;
  latency       number;

  -- table() keword is required for 11204
  cursor exec(sql_txt clob) is select * from table(exec_query(dba_replace(sql_txt)));
begin
 
        
  -- Check  Registry Info STATUS
  for rec in reginfo_invalid loop
     flag := 'RED';
      reason := '  The DBA_REGISTRY status information for component '''||rec.comp_id||
      ''' requires attention.  Status is '||rec.status||
                          '. Please recompile the component ';
      record_flag('DATABASE', 'Configuration', 'Registry Status',flag, reason,CONST_INSTANCE_REG);
  end loop;                

  -- Check consistent Instance and Registry Info
  for rec in version_diff loop
     flag := 'RED';
      reason := '  The ORACLE_HOME software is '''||rec.inst_version||''' but the database catalog is '||rec.reg_version||
                          '.  CATPATCH must be run successfully to complete the upgrade';
      record_flag('DATABASE', 'Configuration', 'Registry Invalid',flag, reason,CONST_INSTANCE_REG);
  end loop;                

 --  OGG Administrator privilege checks

  for rec in exec(ogg_cap_privs) loop
       flag := 'YELLOW';
      reason := '  '''||rec.cols(1)||''' has not been granted OGG administrator privileges for CAPTURE';
       reason := reason || 'To grant appropriate privileges, use  ';
       reason := reason || 'exec dbms_goldengate_auth.grant_admin_privilege('''||rec.cols(1)||''',PRIVILEGE_TYPE=>''*'',GRANT_SELECT_PRIVILEGES=>true);';
      record_flag('DATABASE', 'Security', 'Capture Privileges',flag, reason,CONST_DB_ADMIN);
  end loop;

  for rec in ogg_app_privs loop
       flag := 'YELLOW';
      reason := '  '''||rec.username||''' has not been granted OGG administrator privileges for APPLY';
       reason := reason || 'To grant appropriate privileges, use  ';
       reason := reason || 'exec dbms_goldengate_auth.grant_admin_privilege('''||rec.username||''',PRIVILEGE_TYPE=>''*'',GRANT_SELECT_PRIVILEGES=>true);';
      record_flag('DATABASE', 'Security', 'Apply Privileges',flag, reason,CONST_DB_ADMIN);
  end loop;

  -- Separate queues for capture and apply
  for rec in exec(multiqueues) loop
    flag := 'RED';
      reason := '  the Capture process ''' || rec.cols(1) ||
                         ''' and Apply process ''' || rec.cols(2) || '''';
    reason := reason || 'share the same queue ''' || rec.cols(3) || '.'
                         || rec.cols(4) || '''.  If the Apply process is receiving changes';
    reason := reason || 'from a remote site, a separate queue should be created fo'
                         || ' the Apply process.';
      record_flag('DATABASE', 'Configuration','Queues ('||rec.cols(1)||')', flag, reason);
  end loop;

  -- Make sure database  is in archivelog mode if capture configured
   for rec in exec(cap_count1) loop
    capture_count:= rec.cols(1);
    select count(*) into row_count from v$database 
    where log_mode = 'NOARCHIVELOG';
    if row_count > 0 and capture_count > 0 then
      flag := 'RED';
      reason := '  ARCHIVELOG mode must be enabled for this database.';
      if verbose then
        reason := reason || 'For a Capture process to function correctly, it'
                           || ' must be able to read the archive logs.';
        reason := reason || 'Please refer to the database documentation to restart the database' || ' in ARCHIVELOG format.';
      end if;
      record_flag('DATABASE', 'Configuration', 'Archiving' ,flag, reason,CONST_DB_INFO);
    end if;
   end loop;


  --  Make sure that downstream capture in real time mode has standby redo logs configured
    for rec in exec(cap_count2) loop
     capture_count := rec.cols(1);
     select count(*),min(bytes), max(bytes) into row_count,min_count,max_count from v$standby_log;
     if row_count>0 and capture_count > 0 then
        flag := 'INFO';
      reason := ' Number of standby redo logs configured is '||row_count;
        if min_count != max_count then
	    reason := reason || 'Standby redo logs have different sizes, ranging in bytes from '||min_count||' to '||max_count;
        end if;
      record_flag('DATABASE', 'Configuration', 'Downstream: Standby Log Files',flag, reason,CONST_DB_INFO);
     end if;
    end loop;
    
  -- Basic supplemental logging checks
  -- #1.  If minimal supplemental logging is not enabled, this is an error
  select count(*) into row_count from v$database where SUPPLEMENTAL_LOG_DATA_MIN = 'NO';  select count(*) into local_capture_count from dba_capture where capture_type = 'LOCAL';
  if row_count > 0 and local_capture_count > 0 then
    flag := 'RED';
      reason := '  Minimal supplemental logging not enabled.';
    if verbose then 
      reason := reason || 'For a Capture process to function correctly, at'
                           || ' least minimal supplemental logging should be enabled.';
      reason := reason || 'Execute ''ALTER DATABASE ADD SUPPLEMENTAL LOG DATA'''
                           || ' to fix this issue.  Note you may need to specify further';
      reason := reason || 'levels of supplemental logging, see the documentation'
                           || ' for more details.';
      dbms_output.put_line('+');
    end if;
      record_flag('DATABASE', 'Configuration', 'Minimal Supplemental Logging',flag, reason,CONST_DB_INFO);
  end if;

  -- #2.  If Primary key database level logging not enabled, there better be some 
  -- log data per prepared table
  select count(*) into row_count from v$database where SUPPLEMENTAL_LOG_DATA_PK = 'NO';
  if row_count > 0 and local_capture_count > 0 then
    for rec in exec(nonlogged_tables) loop
      flag := 'RED';
      reason := '  No supplemental logging specified for table '''
                           || rec.cols(1) || '.' || rec.cols(2) || '''.';
      if verbose then 
        reason := reason || 'In order for Replication to work properly, it must' ||
                             ' have key information supplementally logged';
        reason := reason || 'for each table whose changes are being captured.  ' ||
                             'This system does not have database level primary key information ';
        reason := reason || ', thus for each interested table manual logging'
                             || 'must be specified.  Please see the documentation for more info.';
      end if;
      record_flag('DATABASE', 'Configuration','Supplemental Logging', flag, reason,CONST_DB_INFO);
    end loop;
  end if;

  --
  -- Suggestions.  These might help speedup performance.
  --

  if verbose then 
  
  for rec in exec(cparallel) loop
    flag := 'YELLOW';
    reason := '  the Capture process ''' || rec.cols(1) ||' for extract '||rec.cols(2)||' has parallelism set to 0!';
    reason := reason || 'For Oracle Database Enterprise Edition, include the following line in the extract parameter file';
    reason := reason || ' ''TRANLOGOPTIONS INTEGRATEDPARAMS(PARALLELISM 2)''.';
    reason := reason || 'For Oracle Database Standard Edition, include the following line in the extract parameter file';
    reason := reason || ' ''TRANLOGOPTIONS INTEGRATEDPARAMS(PARALLELISM 1)''';
    record_flag('EXTRACT', 'Process', 'PARALLELISM ('||rec.cols(1)||')', flag, reason, CONST_CAPTURE_PARAMS);
  end loop;


    -- Apply has parallelism 1
    for rec in exec(app_parallel) loop
     row_count := rec.cols(1);
     if row_count > 0 then 
       flag := 'INFO';
       reason := '  One or more Apply processes have parallelism 1';
       reason := reason || 'If your workload consists of many independent transactions';
       reason := reason || 'and the apply is the bottleneck of your Enterprise Edition database, ';
       reason := reason || 'Review the following:';
       reason := reason || 'Set PARALLELISM to at least 4 using the following command in the replicat parameter file';
       reason := reason || 'DBOPTIONS INTEGRATEDPARAMS(PARALLELISM 4)';
       reason := reason || 'To limit the maximum number of apply server processes to 30 on the database, use the MAX_PARALLELISM parameter';
       reason := reason || 'DBOPTIONS INTEGRATEDPARAMS(MAX_PARALLELISM 30)';
       reason := reason || 'For Oracle Database Standard Edition, include the following line in the replicat parameter file';
       reason := reason || 'DBOPTIONS INTEGRATEDPARAMS(PARALLELISM 1, MAX_PARALLELISM 1)' ;
       record_flag('REPLICAT', 'Configuration', 'PARALELLISM',flag, reason, CONST_APPLY_PARAMS);
     end if;
    end loop;

   
    -- General  dml handlers defined for apply
    for rec in exec(dml_handlers) loop
      row_count := rec.cols(1);

      if row_count > 0 then 
        flag := 'INFO';
        reason := '  One or more General DML handlers are configured in this database. ';
        reason := reason || 'A general DML handler is configured for a particular table and operation, for ALL Apply processes';
        record_flag('REPLICAT', 'Configuration', 'DML Handler',flag, reason,CONST_APPLY_DML_HANDLERS);
      end if;
    end loop;

    -- General  error handlers defined for apply
    for rec in exec(error_handlers) loop
     row_count := rec.cols(1);

     if row_count > 0 then 
      flag := 'INFO';
      reason := '  One or more General Error handlers are configured in this database  ';
      reason := reason || 'A general Error handler is configured for a particular table and operation, for ALL Apply processes';
      record_flag('REPLICAT', 'Configuration', 'Error Handler',flag, reason,CONST_APPLY_DML_HANDLERS);
     end if;
    end loop;

    -- Database-level supplemental logging defined but only a few tables replicated
    select count(*) into row_count from v$database where supplemental_log_data_pk = 'YES';
    for rec in exec(cap_count3) loop
     capture_count := rec.cols(1);
    if row_count > 0 and capture_count < 10 and local_capture_count > 0 then
      flag := 'INFO';
      reason := '  Database-level supplemental logging enabled but only a few tables ';
      reason := reason || 'prepared for capture.  Database-level supplemental logging could write more ';
      reason := reason || 'information to the redo logs for every update statement in the system.';
      reason := reason || 'If the number of tables you are interested in is small, you might consider ';
      reason := reason || 'specifying supplemental logging of keys and columns on a per-table basis.';
      reason := reason || 'See the documentation for more information on per-table supplemental logging.';
      record_flag('DATABASE', 'Configuration', 'Supplemental Logging', flag, reason);
    end if;
   end loop;
  end if;  
end;

procedure perf_checks(verbose boolean) as
  flag             varchar2(10) := 'GREEN';
  reason           varchar2(4000);
  -- how far back capture must be before we generate a warning
  capture_latency_threshold    number := 300;  -- seconds
 -- how long logminer can spend spilling before generating a warning
  logminer_spill_threshold     number := 30000000;  -- microseconds 

  
  -- how far back the apply reader must be before we generate a warning
  applyrdr_latency_threshold   number := 600;  -- seconds
  -- how far back the apply coordinator's LWM must be before we generate a warning
  applylwm_latency_threshold   number := 1200;  -- seconds
  -- how many messages should be unconsumed before generating a warning
  unconsumed_msgs_threshold    number := 300000;
  

  complex_rules boolean := FALSE;
  slow_clients boolean := FALSE;

  cursor capture_latency (threshold NUMBER) is 
   select capture_name, 86400 *(available_message_create_time - capture_message_create_time) latency
     from gv$goldengate_capture 
    where 86400 *(available_message_create_time - capture_message_create_time) > threshold;


  cursor apply_reader_latency (threshold NUMBER) is 
   select apply_name, 86400 *(dequeue_time - dequeued_message_create_time) latency
     from gv$gg_apply_reader
    where 86400 *(dequeue_time - dequeued_message_create_time) > threshold;

  cursor apply_lwm_latency (threshold NUMBER) is 
   select r.apply_name, 86400 *(r.dequeue_time - c.lwm_message_create_time) latency
     from gv$gg_apply_reader r, gv$gg_apply_coordinator c
    where r.apply# = c.apply# and r.apply_name = c.apply_name 
      and 86400 *(r.dequeue_time - c.lwm_message_create_time) > threshold;

  cursor queue_stats is
  select queue_schema, queue_name, num_msgs, cnum_msgs, 
           86400 *(sysdate - startup_time) alive
    from gv$buffered_queues;

 cursor logminer_spill_time (threshold NUMBER) is
  select c.capture_name, l.name, l.value from gv$goldengate_capture c, gv$logmnr_stats l
   where c.logminer_id = l.session_id 
     and name = 'microsecs spent in pageout' and value > threshold;  

 cursor client_slow is
    select c.capture_name, c.extract_name, c.state,l.available_txn-l.delivered_txn difference from 
         gv$goldengate_capture c, 
         gv$logmnr_session l 
        where c.capture_name = l.session_name 
           and c.state in ('WAITING FOR CLIENT REQUESTS', 'WAITING FOR TRANSACTION;WAITING FOR CLIENT');


begin

  for rec in client_slow loop
     flag := 'YELLOW';
      reason := '  Extract '||rec.extract_name||' is slow to request changes ('||rec.difference||' chunks available) from capture '||rec.capture_name;
      reason := reason || 'Use the following command to obtain Extract wait statistics ';
      reason := reason || ' ''extract '||rec.extract_name||', LOGSTATS ''.';
      reason := reason || 'Output of above command is written to extract report file';
     slow_clients := TRUE;
     record_flag('EXTRACT', 'Performance', 'slow ('||rec.extract_name||')', flag, reason);
  end loop;
/* TODO: Revisit
    if  slow_clients then
       reason := reason || 'The  WAITING FOR CLIENT REQUESTS state is an indicator to investigate the extract process rather than the logmining server when there are chunks available from capture.';
       reason := reason || 'If Integrated Extract is V2 and wait statistics from SEND extract... LOGSTATS are high, ';
       reason := reason || 'add the following line to the extract parameter file and restart extract:';
       reason := reason || '_READAHEADCOUNT 64';
       reason := reason || 'See My Oracle Support article 1063123.1 for instructions on additional troubleshooting of the extract process, if needed.'; 
    end if;
*/

   for rec in capture_latency(capture_latency_threshold) loop
    flag := 'YELLOW';
      reason := '  The latency of the Capture process ''' || rec.capture_name||
                ''' is ' || to_char(rec.latency, '99999999') || ' seconds!';
    if verbose then
      reason := reason || 'This measurement shows how far behind the Capture process is in processing the';
      reason := reason || ' redo log.  ';
      reason := reason || 'If this latency is chronic and not due';
      reason := reason || ' to errors, consider the above suggestions for improving Capture Performance.';
    end if;
      record_flag('EXTRACT', 'Performance', 'Latency ('||rec.capture_name||')', flag, reason, CONST_CAPTURE_RUNTIME);
  end loop;

  for rec in apply_reader_latency(applyrdr_latency_threshold) loop
    flag := 'YELLOW';
      reason := '  The latency of the reader process for Apply ''' || rec.apply_name
                         || ''' is ' || to_char(rec.latency, '99999999') || ' seconds!';
    if verbose then
      reason := reason || 'This measurement shows how far behind the Apply reader is from when the message was';
      reason := reason || 'created, which in the normal case is by a Capture process.  In other words, ';
      reason := reason || 'the time between message creation and message dequeue by the Apply reader is too large.';
      reason := reason || 'If this latency is chronic and not due to errors, consider the above suggestions ';
      reason := reason || 'for improving Capture and Propagation performance.';
    end if;
      record_flag('REPLICAT', 'Performance' ,'Reader Latency ('||rec.apply_name||')', flag, reason,CONST_APPLY_READER);
  end loop;

  for rec in apply_lwm_latency(applylwm_latency_threshold) loop
    flag := 'YELLOW';
      reason := '  The latency of the coordinator process for Apply ''' || rec.apply_name
                         || ''' is ' || to_char(rec.latency, '99999999') || ' seconds!';
    if verbose then
      reason := reason || 'This measurement shows how far behind the low-watermark of the Apply process is ';
      reason := reason || 'from when the message was first created, which in the normal case is by a Extract/Capture process.';
      reason := reason || 'The low-watermark is the most recent transaction (in terms of SCN) that has been ';
      reason := reason || 'successfully applied, for which all previous transactions have also been applied.';
      reason := reason || 'A high latency can be due to long-running tranactions, many dependent transactions,';
      reason := reason || 'or slow/down Extract, Pump, or Replicat processes.';
    end if;
      record_flag('REPLICAT', 'Performance', 'LWM Latency ('||rec.apply_name||')', flag, reason,CONST_APPLY_COORD_STATS);
  end loop;

   -- logminer spill time
  for rec in logminer_spill_time(logminer_spill_threshold) loop
    flag := 'YELLOW';
      reason := '  Excessive spill time for Capture process ''' 
                          || rec.capture_name || '''!';
    if verbose then
      reason := reason || 'Spill time implies that the Logminer component used by Capture ';
      reason := reason || 'does not have enough memory allocated to it.  This condition ';
      reason := reason || 'occurs when the system workload contains many DDLs and/or LOB ';
      reason := reason || 'transactions.  Consider increasing the size of memory allocated to the ';
      reason := reason || 'Capture process by increasing the ''MAX_SGA_SIZE'' extract parameter TRANLOGOPTIONS INTEGRATEDPARAMS.';
    end if;
    record_flag('EXTRACT', 'Performance', 'LogMiner Spill Time ('||rec.capture_name||')', flag, reason,CONST_LOGMNR_STATS);
  end loop;

end;

function captures_param return clob as
  caplist clob := '';
  comma varchar2(2) := ',';
     sql_cursor number;
   cols dbms_sql.desc_tab;
   ncols pls_integer;
   keys_value clob := '';
   col_value varchar2(2000);
   dummy_num number;
   first_col boolean := true;

begin
  for cap in (select capture_name from dba_capture order by capture_name) loop
    caplist := caplist ||  
               ',(select value from dba_capture_parameters i where i.capture_name = '||''''||cap.capture_name||''''||
               ' and i.parameter = o.parameter) '||cap.capture_name || chr(10);

  end loop;

  caplist := 'select distinct parameter ' || caplist || 
             '  from dba_capture_parameters o ' || chr(10)||
             '  where (o.set_by_user=''YES'' or '|| chr(10)||
             '         o.parameter=''PARALLELISM'' '|| chr(10)||
             '        )  order by o.parameter';
  
  /* execute the sql */
  sql_cursor := dbms_sql.open_cursor;
  dbms_sql.parse(sql_cursor, caplist, dbms_sql.native);

  DBMS_SQL.DESCRIBE_COLUMNS (sql_cursor, ncols, cols);

  FOR colind IN 1 .. ncols
  loop
     dbms_sql.define_column(sql_cursor, colind, col_value, 2000);
  end loop;

  dummy_num := dbms_sql.execute(sql_cursor);

  loop
    if (dbms_sql.fetch_rows(sql_cursor) > 0 )then

      first_col := true;

      FOR colind IN 1 .. ncols
      LOOP
         dbms_sql.column_value(sql_cursor, colind, col_value);
         dbms_output.put_line(cols(colind).col_name||':'||col_value);
         first_col := false;
      END LOOP;
    else
      exit;
    end if;
  end loop;
  
  return caplist;
end;

 procedure all_checks (verbose boolean ) is
 begin
   fade_old_checks;
   init_ora_checks(verbose);
   config_checks(verbose);
   locked_admin(verbose);
   extract_notifications(verbose);
   replicat_notifications(verbose);
   sys_checks(verbose);
   perf_checks(verbose);
   perf_checks(verbose);
   database_checks;
   object_checks;
 end;

 procedure record_flag(l1 varchar2, l2 varchar2, l3 varchar2, flag varchar2,
  reason varchar2, info varchar2, error_only boolean ) is
 pragma AUTONOMOUS_TRANSACTION;
 begin
     
    delete from gghc_flags_tab where l1_name = l1 and l2_name = l2 and
     l3_name = l3;
    if (flag != 'GREEN' or error_only = false) then
      insert into gghc_flags_tab values (l1, l2, l3, flag, reason, info);
    end if;
    commit;
 end;

procedure gen_summary as

  v_numfmt       varchar2(20) := '99G999G999G999D99';
  v_numfmt_short varchar2(20) :=      '9G999G999D99';
  v_intfmt       varchar2(20) := '99999999999999999';
  v_intfmt_short varchar2(20) :=           '9999999';
  v_pctfmt       varchar2(6)  :=            '999D99';

  cap_catchup_normed number;   -- Capture
  apr_catchup_normed number;   -- Apply Reader
  apt_catchup_normed number;   -- Apply Progress Table
  apc_catchup_normed number;   -- Apply Coordinator
  apr_wm_ratio       number;   -- Ratio of Transactions with WaterMark Dependencies
  avg_in_size        number;   -- Avg In Size of LCR
  avg_out_size       number;   -- Avg Output Size of LCR

  sysstat clob := '
    SELECT ''DATABASE'' level0, name level1, null level2, value
           FROM v$sysstat
           WHERE name in(''redo size'', ''redo entries'',''user commits'',''user calls'')';

  hist_sysstat clob := '
    select ''DATABASE'' level0, ''HIST ''||stat_name level1, null level2, value
      from (
        select f.stat_name, i.begin_interval_time mtime
              ,round((f.value - (lead(f.value) over (partition by (f.stat_name) order by i.snap_id desc )))
              /gghc_delta_time(i.begin_interval_time,i.end_interval_time),2)  value
          from DBA_HIST_SNAPSHOT i, dba_hist_sysstat f
          where i.snap_id=f.snap_id
          and f.stat_name in (''redo size'', ''redo entries'',''user commits'',''user calls'')
          order by  f.snap_id desc
       )
     where rownum <5';

  sysmetric_15 clob := '
     SELECT ''DATABASE'' level0, ''SYSMETRIC_15 ''||metric_name level1, null level2, value
       FROM v$sysmetric
       WHERE metric_name in (''Executions Per Sec''
                            ,''User Transaction Per Sec'',''User Commits Per Sec'',''User Calls Per Sec''
                            ,''Redo Generated Per Sec'',''Redo Writes Per Sec''
                            ,''Physical Reads Per Sec'',''Physical Writes Per Sec'')
       AND GROUP_ID =3';

  sysmetric_60 clob := '
     SELECT ''DATABASE'' level0, ''SYSMETRIC_60 ''||metric_name level1, null level2, value
       FROM v$sysmetric
       WHERE metric_name in (''Executions Per Sec''
                            ,''User Transaction Per Sec'',''User Commits Per Sec'',''User Calls Per Sec''
                            ,''Redo Generated Per Sec'',''Redo Writes Per Sec''
                            ,''Physical Reads Per Sec'',''Physical Writes Per Sec'')
       AND GROUP_ID =2';

v_CaptureReadFrom  varchar2(10);
v_CaptureParamMine varchar2(10);

CaptureInfo clob := '
   select ''CAPTURE'' level0, d.capture_name level1, null level2,
          d.client_name, d.capture_name, s.sid, s.serial#,
          d.client_status, s.state, d.status,
          SYSDATE,
          ((SYSDATE-STARTUP_TIME)*24) Run_time_HR,
          -- SCN
          d.FIRST_SCN,
          d.REQUIRED_CHECKPOINT_SCN,
          d.CAPTURED_SCN,
          d.REQUIRED_CHECKPOINT_SCN - d.FIRST_SCN delta1,
          d.CAPTURED_SCN            - d.REQUIRED_CHECKPOINT_SCN delta2,
          -- Total Msg
          s.TOTAL_MESSAGES_CAPTURED ,
          s.TOTAL_MESSAGES_ENQUEUED,
          s.TOTAL_MESSAGES_SENT,
          s.TOTAL_MESSAGES_ENQUEUED - s.TOTAL_MESSAGES_CAPTURED delta1_tot_msg,
          s.TOTAL_MESSAGES_SENT     - s.TOTAL_MESSAGES_ENQUEUED delta2_tot_msg,
          -- MSG Number
          s.CAPTURE_MESSAGE_NUMBER,
          s.ENQUEUE_MESSAGE_NUMBER ,
          s.LAST_SENT_MESSAGE_NUMBER,
          -- Memory
          s.sga_used,
          s.sga_allocated,
          round(100*SGA_USED/SGA_ALLOCATED,2) sga_pct,
          -- Redo Mining
          s.bytes_sent,
          s.bytes_of_redo_mined,
          ((SYSDATE-STARTUP_TIME)*24) Run_time_HR,
          round(BYTES_OF_REDO_MINED/1024/1024/1024,2) Mined_GB,
          round((BYTES_OF_REDO_MINED/1024/1024/1024)/((SYSDATE-STARTUP_TIME)*24),2) GB_Per_HR,
          round(BYTES_SENT/1024/1024/1024,2) Sent_GB,
          round((BYTES_SENT/1024/1024/1024)/((SYSDATE-STARTUP_TIME)*24),2)          Sent_GB_Per_HR,
          round(100*Bytes_sent/BYTES_OF_REDO_MINED,2) bytes_pct,
          -- Message Create Time
          s.ENQUEUE_MESSAGE_CREATE_TIME,
          s.CAPTURE_MESSAGE_CREATE_TIME,
          s.AVAILABLE_MESSAGE_CREATE_TIME,
          s.LAST_SENT_MESSAGE_CREATE_TIME,
          86400 *(sysdate - s.ENQUEUE_MESSAGE_CREATE_TIME) delta_enqueue_msg_create_tm,
          86400 *(sysdate - s.AVAILABLE_MESSAGE_CREATE_TIME) delta_available_msg_create_tm,
          86400 *(sysdate - s.CAPTURE_MESSAGE_CREATE_TIME) delta_capture_msg_create_tm,
          86400 *(sysdate - s.LAST_SENT_MESSAGE_CREATE_TIME) delta_sent_msg_create_tm,
          s.ENQUEUE_MESSAGE_CREATE_TIME   - s.CAPTURE_MESSAGE_CREATE_TIME delta1_msg_create_tm,
          s.LAST_SENT_MESSAGE_CREATE_TIME - s.ENQUEUE_MESSAGE_CREATE_TIME delta2_msg_create_tm
   from dba_capture d, sys.v_$goldengate_capture s
   where d.capture_name = s.capture_name (+)';

inbound_progress clob :=
'select ''APPLY'' level0, d.apply_name level1, ''IP'' level2,
    round((sysdate - i.applied_message_create_time)*60*60*24,2) lag,
    i.applied_message_create_time from
    dba_apply d, DBA_GG_INBOUND_PROGRESS i
where d.apply_name = i.server_name and d.purpose not like ''%Capture''';

apr clob :=
'select ''APPLY'' level0, d.apply_name level1, ''APR'' level2,
       round(100*apr.SGA_USED/apr.SGA_ALLOCATED,2) sga_pct,
       apr.sga_used, apr.sga_allocated,
       (dequeue_time - dequeued_message_create_time)*60*60*24 dq_latency,
       apr.bytes_received,
       apr.total_messages_dequeued,
       apr.state,
       apr.dequeued_position,
       apr.total_lcrs_with_dep,
       apr.total_lcrs_with_wmdep
from dba_apply d, sys.v_$gg_apply_reader apr
where d.apply_name = apr.apply_name(+) and d.purpose not like ''%Capture''';

apc clob := 'select ''APPLY'' level0, d.apply_name level1, ''APC'' level2,
        apc.total_received,
        apc.total_assigned,
        apc.total_applied,
        apc.lwm_position,
        apc.state,
        apc.lwm_message_create_time,
        (apc.hwm_message_create_time - apc.lwm_message_create_time)*60*60*24 wm_range
from dba_apply d, sys.v_$gg_apply_coordinator apc where
d.apply_name =  apc.apply_name(+) and d.purpose not like ''%Capture''';

anr clob := 'select ''APPLY'' level0, d.apply_name level1, ''ANR'' level2,
        anr.state, anr.last_received_msg_position
from dba_apply d,  sys.v_$gg_apply_receiver anr
where d.apply_name = anr.apply_name(+) and d.purpose not like ''%Capture''';

aps clob := 'select ''APPLY'' level0, d.apply_name level1, ''APS'' level2,
        ans.state
from dba_apply d,  sys.v_$gg_apply_server ans
where d.apply_name = ans.apply_name(+) and d.purpose not like ''%Capture''';

apply clob := 'select ''APPLY'' level0, d.apply_name level1, ''APPLY'' level2,
       d.apply_name , d.status
from dba_apply d where  d.purpose not like ''%Capture''';

inbound clob := 'select ''APPLY'' level0, d.apply_name level1, ''GG'' level2,
        ib.replicat_name , ib.status
from dba_apply d,  DBA_GOLDENGATE_INBOUND ib
where d.apply_name = ib.server_name (+) and d.purpose not like ''%Capture''';

apt clob := 'select ''APPLY'' level0, d.apply_name level1, ''APPLY'' level2,
             apt.applied_message_create_time
from dba_apply_progress apt where  apt.purpose not like ''%Capture''';

level0 varchar2(10);
cnt number;
date_format varchar2(50) := 'YYYY/MM/DD HH24:MI:SS';
safe_value1 varchar2(500);
safe_value2 varchar2(500);
pragma autonomous_transaction;
begin
   execute immediate 'truncate table gghc_summary_tab';
   execute immediate 'truncate table gghc_snapshot_tab';
   execute immediate 'alter session set nls_date_format='''||date_format||'''';

   record_sql('sysstat',sysstat,true);
   record_sql('sysmetric_15',sysmetric_15,true);
   record_sql('sysmetric_60',sysmetric_60,true); 
   record_sql('hist_sysstat',hist_sysstat, true);
   record_sql('CaptureInfo',CaptureInfo, true);
   record_sql('inbound_progress',inbound_progress, true);
   record_sql('apply',apply, true);
   record_sql('apr',apr, true);
   record_sql('apc',apc, true);
   record_sql('anr',anr, true);
   record_sql('aps',aps, true);
   record_sql('inbound',inbound, true);

   dbms_lock.sleep(dbms_goldengate_hcadm_int.sample_interval);

   record_sql('sysstat',sysstat,false);
   record_sql('hist_sysstat',hist_sysstat, false);
   record_sql('CaptureInfo',CaptureInfo, false);
   record_sql('inbound_progress',inbound_progress, false);
   record_sql('apply',apply, false);
   record_sql('apr',apr, false);
   record_sql('apc',apc, false);
   record_sql('anr',anr, false);
   record_sql('aps',aps, false);
   record_sql('inbound',inbound, false);


   write_summary(text => 'Database (Instance#)', typ =>'h1', comments => 'Comments');

   level0 := 'DATABASE';
   for db_rec in (SELECT i.*,d.current_scn,sysdate
                    from GV$INSTANCE i,GV$DATABASE d  
                    where i.inst_id = d.inst_id 
                    order by i.inst_id) loop

     write_summary(text => db_rec.instance_name||' ('||db_rec.inst_id||')',
                   typ => 'h2');

     write_summary(text => 'Current SCN (Time)',
                   val => db_rec.current_scn||
                          ' ('||
                          to_char(db_rec.sysdate,'YYYY-MM-DD HH24:MI:SS')||
                          ')',
                   comments => 'Current Scn and the time corresponding to it');
/*     write_summary(text     => 'Measurment Interval'
                  ,val      => dbms_goldengate_hcadm_int.sample_interval||' sec'
                  ,comments => 'Measurment Interval (sample_interval) for differential Analysis.<br> The time can be controlled within the call dbms_goldengate_hcadm.set_parameter'
                  ); 
*/
     write_summary(text => 'Database Version ', 
                   val => db_rec.VERSION,
                   comments => 'Database Software version.<br>Note that the COMPATIPLE parameter can be different (lower)'
 );

     write_summary(text => 'Database Status ', 
                   val => db_rec.DATABASE_STATUS,
                   comments => null);

     write_summary(text => 'Shutdown Pending ', 
                   val => db_rec.SHUTDOWN_PENDING,
                   comments => null);

     write_summary(text => 'Active State ', 
                   val => db_rec.ACTIVE_STATE,
                   comments => null
                  );
     write_summary(text => 'Blocked ', 
                   val => db_rec.BLOCKED,
                   comments => null);
     write_summary(text => 'Archiver ',
                   val => db_rec.ARCHIVER,
                   comments => null);

     write_summary(text => 'Logins ', 
                   val => db_rec.LOGINS,
                   comments => null);

     write_summary(text => chr(13));
     
     for metric_rec in (select s.metric_name,s.value
                          from gv$sysmetric s
                          where s.inst_id = db_rec.inst_id
                          and s.metric_name in ('Redo Generated Per Sec','Redo Writes Per Sec'
                                               ,'User Transaction Per Sec','User Commits Per Sec','Executions Per Sec','User Calls Per Sec'
                                               ,'Physical Reads Per Sec','Physical Writes Per Sec')
                          and s.group_id=2)
     loop
         write_summary(text     => metric_rec.metric_name
                      ,val      => round(metric_rec.value,2)
                      ,comments => 'System metric captured for the most current time interval for 60-second duration'
                      );
     end loop;
     

  end loop;
/*  write_summary(text => chr(13));
  
  write_summary(text    => 'Redo Generated Per Sec'
               ,val     => to_char(getValue('DATABASE','SYSMETRIC_15 Redo Generated Per Sec',null,'VALUE','value1'),v_numfmt)||' ('||
                           to_char(getValue('DATABASE','SYSMETRIC_60 Redo Generated Per Sec',null,'VALUE','value1'),v_numfmt)||')'
               ,comments=> 'Redo Generation is derived from the V$SYSMETRIC in 15 (60) sec measurement interval.<br>This is one of the main metrics dealing with Database throughput of the system.'
               );
  write_summary(text    => 'Redo Writes Per Sec'
               ,val     => to_char(getValue('DATABASE','SYSMETRIC_15 Redo Writes Per Sec',null,'VALUE','value1'),v_numfmt)||' ('||
                           to_char(getValue('DATABASE','SYSMETRIC_60 Redo Writes Per Sec',null,'VALUE','value1'),v_numfmt)||')'
               ,comments=> 'Redo Writes are derived from the V$SYSMETRIC in 15 (60) sec measurement interval.<br>This is one of the main metrics dealing with Database Redo generation.'
               );

  write_summary(text    => 'User Transaction Per Sec'
               ,val     => to_char(getValue('DATABASE','SYSMETRIC_15 User Transaction Per Sec',null,'VALUE','value1'),v_numfmt)||' ('||
                           to_char(getValue('DATABASE','SYSMETRIC_60 User Transaction Per Sec',null,'VALUE','value1'),v_numfmt)||')'
               ,comments=> 'User Transactions are derived from the V$SYSMETRIC in 15 (60) sec 0measurement interval.'
               );
  write_summary(text    => 'User Commits Per Sec'
               ,val     => to_char(getValue('DATABASE','SYSMETRIC_15 User Commits Per Sec',null,'VALUE','value1'),v_numfmt)||' ('||
                           to_char(getValue('DATABASE','SYSMETRIC_60 User Commits Per Sec',null,'VALUE','value1'),v_numfmt)||')'
               ,comments=> 'User Commits are derived from the V$SYSMETRIC in 15 (60) sec measurement interval.'
               );
  write_summary(text    => 'Executions Per Sec'
               ,val     => to_char(getValue('DATABASE','SYSMETRIC_15 Executions Per Sec',null,'VALUE','value1'),v_numfmt)||' ('||
                           to_char(getValue('DATABASE','SYSMETRIC_60 Executions Per Sec',null,'VALUE','value1'),v_numfmt)||')'
               ,comments=> 'Executions are derived from the V$SYSMETRIC in 15 (60) sec measurement interval.'
               );
  write_summary(text    => 'User Calls Per Sec'
               ,val     => to_char(getValue('DATABASE','SYSMETRIC_15 User Calls Per Sec',null,'VALUE','value1'),v_numfmt)||' ('||
                           to_char(getValue('DATABASE','SYSMETRIC_60 User Calls Per Sec',null,'VALUE','value1'),v_numfmt)||')'
               ,comments=> 'User Transactions are derived from the V$SYSMETRIC in 15 (60) sec measurement interval.'
               );
  write_summary(text    => 'Physical Reads Per Sec'
               ,val     => to_char(getValue('DATABASE','SYSMETRIC_15 Physical Reads Per Sec',null,'VALUE','value1'),v_numfmt)||' ('||
                           to_char(getValue('DATABASE','SYSMETRIC_60 Physical Reads Per Sec',null,'VALUE','value1'),v_numfmt)||')'
               ,comments=> 'Physical Reads are derived from the V$SYSMETRIC in 15 (60) sec measurement interval.'
               );
  write_summary(text    => 'Physical Writes Per Sec'
               ,val     => to_char(getValue('DATABASE','SYSMETRIC_15 Physical Writes Per Sec',null,'VALUE','value1'),v_numfmt)||' ('||
                           to_char(getValue('DATABASE','SYSMETRIC_60 Physical Writes Per Sec',null,'VALUE','value1'),v_numfmt)||')'
               ,comments=> 'Physical Writes are derived from the V$SYSMETRIC in 15 (60) sec measurement interval.'
               );

*/
/*
  write_summary(text => 'Transactions [/sec] ',
                val => to_char(getValue(level0,
                                        'user commits',null,'VALUE',
                                        'rate'),v_numfmt)||
                       ' (History: '||
                       to_char(getValue('DATABASE','HIST user commits',
                                        null,'VALUE','value2'),v_numfmt)||
                       ')',
                comments => 'Transactions per Seconds derived  from the System Statistics.<br>The historical Information is derrived from the last two History Views'
               );

  write_summary(text => 'Redo Throughput [kB/sec] ',
                val => to_char(round(getValue(level0,'redo size',null,
                                              'VALUE','rate')/1024,2),
                               v_numfmt)||
                       ' ( History: '||
                       to_char(round(getValue('DATABASE','HIST redo size',
                                              null,'VALUE','value2')/1024,2),
                               v_numfmt)||
                       ' )',
                comments => 'Redo Volume per Seconds generated by the database and derived from the System Statistics.<br>The historical Information is derrived from the last two History Views'

                );

  safe_value1 := getValue(level0,'user commits',null,'VALUE','diff');
  select decode(safe_value1,0,null,safe_value1) into safe_value1 from dual;
  safe_value2 := getValue('DATABASE','HIST user commits',null,'VALUE','value2');
  select decode(safe_value2,0,null,safe_value2) into safe_value2 from dual;

  write_summary(text => 'Redo Throughput [kB/txn] ',
                val => to_char(round(getValue(level0,'redo size',null,'VALUE',
                                             'diff')/1024/safe_value1,2),
                               v_numfmt)||
                       ' ( History: '||
                       to_char(round(getValue('DATABASE','HIST redo size',null,
                                              'VALUE',
                                              'value2')/1024/safe_value2,2),
                               v_numfmt)||
                       ' )',
                comments => 'Redo Volume per Transaction generated by the database and derived from the System Statistics.<br>High values are indicating large transactions.<br>This might be related to operations on many records or the records are large in size (many columns or LOB columns)<br>The historical Information is derrived from the last two History Views '
                );
*/
  write_summary(text => chr(13));

  cnt := 0;
  for ext_rec in (select level1 from gghc_snapshot_tab where level0 = 'CAPTURE' group by level1 order by level1) loop
    if (cnt = 0) then
      write_summary(text => 'Extract', typ => 'h1', comments => 'Comments');
      cnt := 1;
    end if;

    select decode(value,'N','NO', 'YES')
      into v_CaptureParamMine
      from dba_capture_parameters
      where capture_name = ext_rec.level1
      and parameter ='DOWNSTREAM_REAL_TIME_MINE';

    select case count(*) when 0 THEN 'Archive' ELSE 'Redo' END
      into v_captureReadFrom
      from v$log, v$goldengate_capture c
      where  capture_name = ext_rec.level1
      and    first_change# < c.enqueue_message_number;

    write_summary(text => replace(ext_rec.level1,'OGG$CAP_',''), typ => 'h2');

    write_summary(text => 'Extract Name',
                  val => getValue('CAPTURE', ext_rec.level1, null,
                                  'client_name','value1'),
                  comments => 'Name of the Extract');
    write_summary(text => 'Capture Name',
                  val => getValue('CAPTURE',ext_rec.level1,null,
                                  'capture_name','value1')||
                         ' (sid='||
                         getValue('CAPTURE',ext_rec.level1,null,
                                  'sid','value1')||
                         ',serial#='|| 
                         getValue('CAPTURE',ext_rec.level1,null,
                                  'serial#','value1')||') ',
                  comments => 'Name of the Capture process within the datbase belonging to the Extract .<br>The Capture Session can be identified with the (SID,SERIAL#)'
);

    write_summary(text => 'Client Status', 
                  val => getValue('CAPTURE',ext_rec.level1,null,
                                  'client_status','value1'),
                  comments => 'Status of the Outbound Server. Client must be ATTACHED to the database.'
);
    write_summary(text => 'Status', 
                  val => getValue('CAPTURE',ext_rec.level1,null,
                                  'status','value1'),
                  comments => 'Status of the Capture Process.The status must be ENABLED.');

    write_summary(text => chr(13));

    write_summary(text => 'RealTimeMining '           , 
                  val => v_CaptureParamMine,
                  comments => 'Check if GoldenGate capture is configured to capture from Redolog/StandbyLog files or Archive log files.<br>If RealTimeMining is YES, the Capture is configured to capture from Redolog files/StandbyLog files.<br>Otherwise, Capture is mining fro Archivelog files only. ');

    write_summary(text => 'Capture from '             , 
                  val => v_captureReadFrom,
                  comments => 'Analysis if GoldenGate captures information from Redolog files or Archive log files at the time.<br>If GoldenGate is configured for RealTimeMining, but the Capture process mines from Archive Log Files,<br>
there is delay and a the capture process has to catch up with a back log. ');

    write_summary(text => '[Capture|Sent] Rate [GB/h]',
                  val => to_char(round(getValue('CAPTURE', ext_rec.level1,null,
                                                'GB_Per_HR','value2'),2),
                                 v_numfmt)||
                         ' | '||
                         to_char(round(getValue('CAPTURE', ext_rec.level1,null,
                                                'Sent_GB_Per_HR','value2'),2),
                                 v_numfmt),
                  comments => ''
                 );
    write_summary(text => chr(13));

    write_summary(text => 'Memory (Used [MB]  | Alloc [MB] | [%])',
                  val => to_char(round(getValue('CAPTURE', ext_rec.level1,null,
                                             'SGA_USED','value2')/1024/1024,2),
                                 v_numfmt)||
                         ' | '||
                         to_char(round(getValue('CAPTURE', ext_rec.level1,null,
                                        'SGA_ALLOCATED','value2')/1024/1024,2),
                                 v_numfmt)||
                         ' | '||
                         to_char(getValue('CAPTURE', ext_rec.level1,null,
                                          'sga_pct','value2'),v_pctfmt)||'%',
                  comments => 'Memory used and allocated by Capture. The Percentage should be less than 90%.<br>Otherwise the Extract Parameter MAX_SGA_SIZE and the database parameter Streams_Pools_size might be adjusted '
                 );

    write_summary(text => 'Bytes (Mined [MB] | Sent [MB] | [%])',
                  val => to_char(round(getValue('CAPTURE',ext_rec.level1,null,
                                  'BYTES_OF_REDO_MINED','value2')/1024/1024,2),
                                 v_numfmt)||
                         ' | '||
                         to_char(round(getValue('CAPTURE', ext_rec.level1,null,
                                         'Bytes_sent','value2')/1024/1024),
                                 v_numfmt)||
                         ' | '||
                         to_char(getValue('CAPTURE', ext_rec.level1,null,
                                          'bytes_pct','value2'),
                                 v_pctfmt)||'%',
                  comments => 'Bytes mined within the Redolog/Archivelog files and Bytes being sent to Extract.<br>The values might differ and the sent bytes are usually higher than the bytes being mined.  '
                 );

    write_summary(text => chr(13));

   -- Avg LCR out size
    if (nvl(getValue('CAPTURE', ext_rec.level1,null,'TOTAL_MESSAGES_SENT','diff'),0) !=0) then
      avg_out_size := round(getValue('CAPTURE', ext_rec.level1,null, 'BYTES_SENT','diff')
                                /getValue('CAPTURE', ext_rec.level1,null,'TOTAL_MESSAGES_SENT','diff'),2);

      write_summary(text => 'Avg LCR Size: ',
                    val => avg_out_size||' Bytes',
                    comments => 'Average Size of message. In case of LOB processing or changes on wide tabbles, the size might be high.');
    end if;


    write_summary(text => 'First SCN',
                  val => to_char(getValue('CAPTURE', ext_rec.level1,null,
                                          'FIRST_SCN','value2'),
                                 v_intfmt),
                  comments => 'System change number (SCN) from which the capture process can be restarted.');
    write_summary(text => 'ReqCkpt SCN' , 
                  val => to_char(getValue('CAPTURE', ext_rec.level1,null,
                                   'REQUIRED_CHECKPOINT_SCN','value2')
                                ,v_intfmt)||
                         ' ('||
                         getValue('CAPTURE', ext_rec.level1,null,
                                  'delta1','value2')||
                         ' higher than the First SCN)',
                  comments => 'Lowest checkpoint SCN for which the capture process requires redo information.  '
                 );
    write_summary(text => 'Capture SCN' ,
                  val => to_char(getValue('CAPTURE', ext_rec.level1,null,'CAPTURED_SCN','value2'),v_intfmt)||
                  ' ('|| getValue('CAPTURE', ext_rec.level1,null,'delta2','value2')||' higher than the Required Checkpoint SCN)',
                  comments => 'System change number (SCN) of the last redo log record scanned. ');
    write_summary(text => chr(13));

    write_summary(text => 'Total Messages', typ => 'h3');
    write_summary(text => 'Total Captured Messages | Delta | Rate'
                 ,val => rpad(to_char(getValue('CAPTURE', ext_rec.level1,null,
                                        'TOTAL_MESSAGES_CAPTURED','value2')
                              ,v_intfmt),30,' ')||' LCR | '||
                 to_char(getValue('CAPTURE', ext_rec.level1,null,
                                  'TOTAL_MESSAGES_CAPTURED','diff')
                        ,v_numfmt)||' LCR | '||
                 to_char(getValue('CAPTURE', ext_rec.level1,null,
                                  'TOTAL_MESSAGES_CAPTURED','rate')
                        ,v_numfmt_short)||' LCR/sec ',
                 comments => 'Total changes captured since the capture process was last started and within the measurment interval '
                 );
    write_summary(text => 'Total Enqueued Messages | Delta | Rate'
                 ,val => rpad(to_char(getValue('CAPTURE', ext_rec.level1,null,
                                        'TOTAL_MESSAGES_ENQUEUED','value2')
                              ,v_intfmt),30,' ')||' LCR | '||
                 to_char(getValue('CAPTURE', ext_rec.level1,null,
                                         'TOTAL_MESSAGES_ENQUEUED','diff')
                              ,v_numfmt)||' LCR | '||
                 to_char(getValue('CAPTURE', ext_rec.level1,null,
                                         'TOTAL_MESSAGES_ENQUEUED','rate')
                              ,v_numfmt_short)||' LCR/sec',
                 comments => 'Total number of messages enqueued since the capture process was last started and within the measurment interval '
                 );
    write_summary(text =>'Total Sent Messages | Delta | Rate'
                 ,val => rpad(to_char(getValue('CAPTURE', ext_rec.level1,null,
                                        'TOTAL_MESSAGES_SENT','value2')
                              ,v_intfmt),30,' ') ||' LCR | '||
                 to_char(getValue('CAPTURE', ext_rec.level1,null,
                                          'TOTAL_MESSAGES_SENT','diff')
                                ,v_numfmt)||' LCR | '||
                 to_char(getValue('CAPTURE', ext_rec.level1,null,
                                          'TOTAL_MESSAGES_SENT','rate')
                                ,v_numfmt_short)||' LCR/sec',
                 comments => 'Total number of LCRs sent by the capture process to the GoldenGate extract process since the last time the extract attached to the capture and within the measurment interval '
                 );
    write_summary(text => chr(13));

    write_summary(text =>'Message Create Time', typ => 'h3');
    write_summary(text => 'Capture'
                 ,val => rpad(to_char(getValue('CAPTURE', ext_rec.level1,null,
                                        'CAPTURE_MESSAGE_NUMBER','value2')
                              ,v_intfmt),30,' ')||
                  '('||getValue('CAPTURE', ext_rec.level1,null,
                                 'CAPTURE_MESSAGE_CREATE_TIME','value2')||
                  ')',
                  comments => 'Creation time of the most recently captured message ');
    write_summary(text => 'Enqueue'
                 ,val =>rpad(to_char(getValue('CAPTURE', ext_rec.level1,null,
                                        'ENQUEUE_MESSAGE_NUMBER','value2')
                              ,v_intfmt),30,' ') ||
                  '('||getValue('CAPTURE', ext_rec.level1,null,
                                 'ENQUEUE_MESSAGE_CREATE_TIME','value2') ||
                  ')',
                  comments => 'Creation time of the last enqueued message '
                 );
    write_summary(text => 'Last Sent'
                 ,val => rpad(to_char(getValue('CAPTURE', ext_rec.level1,null,
                                        'ENQUEUE_MESSAGE_NUMBER','value2')
                              ,v_intfmt),30,' ')||
                  '('||getValue('CAPTURE', ext_rec.level1,null,
                                 'LAST_SENT_MESSAGE_CREATE_TIME','value2')||
                  ')',
                  comments => 'Creation time  of the last LCR sent by the capture process to the extract process '
                 );
    write_summary(text => chr(13));
      
    write_summary(text => 'Capture Lag [sec] '
                 , val => to_char(round(getValue('CAPTURE', ext_rec.level1,null,
                                          'delta_capture_msg_create_tm',
                                          'value2'),2)
                           ,v_intfmt),
                  comments => 'Capture Lag '
                 );
    write_summary(text => 'Delta Messages: '
                 ,val  => getValue('CAPTURE', ext_rec.level1,null,
                         'TOTAL_MESSAGES_CAPTURED','diff')||' Msgs in '||dbms_goldengate_hcadm_int.sample_interval||' sec elapsed time'
                 ,comments => 'Messages processed within the measurment interval.'
                 );
    write_summary(text => 'Delta MsgCreateTime: '
                 ,val => getValue('CAPTURE', ext_rec.level1,null,
                               'CAPTURE_MESSAGE_CREATE_TIME','diff')||' sec in '||dbms_goldengate_hcadm_int.sample_interval||' sec elapsed time'
                 ,comments => 'Change of the Message Create Time within the Measurment Interval.<br>Assuming that there is a backlog/lag that might be indicated by the fact that Extract is unwillingly processing <br>out of Archivelog files:<br>If the number is higher than the measurement interval, Extract is catching up with the backlog/lag.<br>If the number is lower than the measurement interval, Extract is falling behind with the backlog/lag.'
                 );

  -- compute catchup if not mining from redo logs
  -- i.e mining from archive logs
  if (v_captureReadFrom = 'Archive' and v_captureReadFrom = 'Archive' ) then
    write_summary(text => 'Catch-up-Rate: ', 
                  val => getValue('CAPTURE', ext_rec.level1,null,
                                 'CAPTURE_MESSAGE_CREATE_TIME','rate')||' sec per second elapsed time',
                  comments => 'Catchup rate in seconds.<br> In one second elapsed time/wall time, Extract is caching up with <n> seconds of the backlog.<br> With this information, it can be estimated how long it takes time to catchup completely with the backlog/lag ');

    if (nvl(getValue('CAPTURE', ext_rec.level1,null,'TOTAL_MESSAGES_CAPTURED','diff'),0) !=0) then
      cap_catchup_normed := round(getValue('CAPTURE', ext_rec.level1,null,
                                     'CAPTURE_MESSAGE_CREATE_TIME','diff')*1000000
                           /getValue('CAPTURE', ext_rec.level1,null,
                                     'TOTAL_MESSAGES_CAPTURED','diff'),2);
      write_summary(text => 'Catch-up-Rate per million LCRs: ',
                    val => cap_catchup_normed||' sec per second elapsed time and million LCRs',
                    comments => 'Catchup rate in seconds normalized by the number of LCR''s.<br> If the amount of data being processed changes over time, the previous estimation needs to be adjusted by the number of prcessed LCR''s ');
    end if;

  end if; -- not capture from redo
  end loop;

  level0 := 'APPLY';

  cnt := 0;
  for rep_rec in (select level1 from gghc_snapshot_tab where level0 = 'APPLY'
                  group by level1 order by level1) loop

    if (cnt = 0 ) then
      write_summary(text => 'Replicat',typ => 'h1', comments => 'Comments');
      cnt := 1;
    end if;
    write_summary(text => replace(rep_rec.level1,'OGG$','') ,typ => 'h2');
    write_summary(text => 'Replicat Name '
                 ,val => getValue(level0,rep_rec.level1, 'GG' ,
                           'replicat_name','value2')
                 ,comments => 'Name of the Replicat');
    write_summary(text => 'Apply Name '
                 ,val => getValue(level0,rep_rec.level1, null,
                           'apply_name','value2')
                 ,comments => 'Name of the Apply process within the database belonging to the Replicat.');

    write_summary(text => chr(13));
    write_summary(text => 'State', typ =>'h3');
    write_summary(text => rpad('Client Status ',30,' ')
                 ,val => getValue(level0,rep_rec.level1, 'GG','status','value2')
                 , comments => 'Status of the Inbound Server. The client must be ATTACHED to the database.');
    write_summary(text => rpad('Status ',30,' ')
                 ,val => getValue(level0,rep_rec.level1, 'APPLY','status','value2')
                 ,comments => 'Status of the Apply process. The status must be ENABLED.');
    write_summary(rpad('ANR State ',30,' ')
                 ,getValue(level0,rep_rec.level1, 'ANR','state','value2')
                 ,comments=>'State of the Apply Network Receiver process.');
    write_summary(rpad('APR State ',30,' ')
                 ,getValue(level0,rep_rec.level1, 'APR','state','value2')
                 ,comments=>'State of the Apply Reader process.' );           
    write_summary(rpad('APC State ',30,' ')
                 ,getValue(level0,rep_rec.level1, 'APC','state','value2')
                 ,comments=>'State of the Apply Coordinator process.');
    write_summary(rpad('APS State ',30,' ')
                 ,getValue(level0,rep_rec.level1, 'APS','state','value2')
                 ,comments=>'State of the Apply Server processes.');
    write_summary(chr(13),null);

    write_summary('Memory (Used | Alloc | Pct)'
                 ,round(getValue(level0,rep_rec.level1,'APR',
                                           'SGA_USED','value2')/1024/1024,2)||
                       ' MB'||
                  ' | '||round(getValue(level0,rep_rec.level1,'APR',
                                       'SGA_ALLOCATED','value2')/1024/1024,2)||
                  ' MB'||
                  ' | '||getValue(level0,rep_rec.level1,'APR',
                                  'sga_pct','value2')||'%'
                 ,comments=>'Memory used and allocated by Apply. The Percentage should be less than 90%.<br>Otherwise the Replicat Parameter MAX_SGA_SIZE and the database parameter Streams_Pools_size might be adjusted.');


    -- Avg LCR size
    write_summary(chr(13),null);
    if (nvl(getValue('APPLY', rep_rec.level1,'APR','TOTAL_MESSAGES_DEQUEUED','diff'),0) !=0) then
      avg_in_size := round(getValue('APPLY', rep_rec.level1,'APR', 'BYTES_RECEIVED','diff')
                                /getValue('APPLY', rep_rec.level1,'APR','TOTAL_MESSAGES_DEQUEUED','diff'),2);
      write_summary('Avg LCR Size: ',avg_in_size||' Bytes',comments=>'LCR size might be very large for wide tables or tables with LOBs.');
    end if;

    write_summary(chr(13),null);
    write_summary('Processing',null,'h3');
    write_summary(rpad('Bytes Received | Delta | Rate ',30,' ')
                 ,lpad(' '||
                       round(getValue(level0,rep_rec.level1,'APR',
                                     'BYTES_RECEIVED','value2')/1024/1024,2)||' MB',15,' ')||
                   rpad(' | '||
                       round(getValue(level0,rep_rec.level1,'APR',
                                'BYTES_RECEIVED','diff')/1024/1024,2)||' MB',30,' ')||
                  rpad(' | '||
                       getValue(level0,rep_rec.level1,'APR',
                                'BYTES_RECEIVED','rate')||' kB/sec',30,' ')
                 , comments=>'Bytes received at Apply Reader.' );

    write_summary(rpad('Msg Dequeued | Delta | Rate ',30,' ')
                 ,lpad(' '||
                       getValue(level0,rep_rec.level1,'APR',
                               'total_messages_dequeued','value2')||' LCR',15,' ')||
                  rpad(' | '||
                       getValue(level0,rep_rec.level1,'APR',
                                'total_messages_dequeued','diff')||' LCR ',30,' ')||
                  rpad(' | '||
                       getValue(level0,rep_rec.level1,'APR',
                                'total_messages_dequeued','rate')||' LCR/sec',30,' ')
                 ,comments=>'Dequeued Messages are visibl at the Apply Reader.');

    write_summary(rpad('txn Received | Delta | Rate',30,' ')
                 ,lpad(' '||getValue(level0,rep_rec.level1,'APC',
                                     'total_received','value2')||' txn',15,' ')||
                  rpad(' | '||
                       getValue(level0,rep_rec.level1,'APC',
                                'total_received','diff')||' txn',30,' ')||
                  rpad(' | '||
                       getValue(level0,rep_rec.level1,'APC',
                                'total_received','rate')||' txn/sec',30,' ')
                 ,comments=>'Transactions received by the Apply Coordinator process.');

    write_summary(rpad('txn Assigned | Delta | Rate',30,' ')
                 ,lpad(' '||getValue(level0,rep_rec.level1,'APC',
                                    'total_assigned','value2')||' txn',15,' ')||
                  rpad(' | '||
                       getValue(level0,rep_rec.level1,'APC',
                                'total_assigned','diff')||' txn',30,' ')||
                  rpad(' | '||
                       getValue(level0,rep_rec.level1,'APC',
                                'total_assigned','rate')||' txn/sec',30,' ')
                 ,comments=>'Number of transactions assigned to the Apply servers.');

    write_summary(rpad('txn Applied | Delta | Rate',30,' ')
                 ,lpad(' '||getValue(level0,rep_rec.level1,'APC',
                                     'total_applied','value2')||' txn',15,' ')||
                  rpad(' | '||
                       getValue(level0,rep_rec.level1,'APC',
                                'total_applied','diff')||' txn',30,' ')||
                  rpad(' | '||
                       getValue(level0,rep_rec.level1,'APC',
                                'total_applied','rate')||' txn/sec',30,' ')
                 ,comments=>'Number of transactions applied by the Apply process'
                  );
    write_summary(chr(13),null);
    write_summary('Latency',null,'h3');

    write_summary('Apply Reader Lag [sec]: '     , round(getValue(level0,rep_rec.level1,'APR','dq_latency','value2'),2),comments=>'Latency at the Apply Reader');
    write_summary('Apply Reader Delta Lag: '     , round(getValue('APPLY',rep_rec.level1,'APR','DQ_LATENCY','diff'),2)||
                  ' sec in '||dbms_goldengate_hcadm_int.sample_interval||' sec elapsed time');
    write_summary('Apply Reader Catch-up-Rate: ' , getValue('APPLY',rep_rec.level1,'APR','dq_latency','rate')||
                  ' sec per second elapsed time',comments=>'Apply Reader Catch-up rate');

    -- LCR Normalization
    if (nvl(getValue('APPLY', rep_rec.level1,'APR','TOTAL_MESSAGES_DEQUEUED','diff'),0) !=0) then
      apr_catchup_normed := round(getValue('APPLY', rep_rec.level1,'APR', 'DQ_LATENCY','diff')*1000000
                           /getValue('APPLY', rep_rec.level1,'APR',
                                     'DQ_LATENCY','diff'),2);
      write_summary('Catch-up-Rate per million LCR: ',apc_catchup_normed||' sec per second elapsed time and million LCR');
   end if;
    write_summary(chr(13),null);

    write_summary(chr(13),null);
    write_summary('Lag',null,'h3');
    write_summary('Apply Coordinator Lag [sec]: '
                 , gghc_delta_time(to_date(getValue('APPLY', rep_rec.level1,'APC','LWM_MESSAGE_CREATE_TIME','value2'),'YYYY/MM/DD HH24:MI:SS')
                             ,to_date(sysdate, 'YYYY/MM/DD HH24:MI:SS'))||
                  ' + '|| round(getValue('APPLY', rep_rec.level1,'APC','WM_RANGE','value2'))|| ' range');
    write_summary('Apply Coordinator Delta Lag [sec]: '
                 , getValue('APPLY', rep_rec.level1,'APC','LWM_MESSAGE_CREATE_TIME','diff')||
                  ' sec in '||dbms_goldengate_hcadm_int.sample_interval||' sec elapsed time');
    write_summary('Apply Coordinator Catch-up-Rate: '
                 , getValue('APPLY', rep_rec.level1,'APC','LWM_MESSAGE_CREATE_TIME','rate')||
                  ' sec per second elapsed time');

    -- TXN Normalization
    if (nvl(getValue('APPLY', rep_rec.level1,'APC','TOTAL_APPLIED','diff'),0) !=0) then
      apc_catchup_normed := round(getValue('APPLY', rep_rec.level1,'APC', 'LWM_MESSAGE_CREATE_TIME','diff')*1000
                           /getValue('APPLY', rep_rec.level1,'APC',
                                     'TOTAL_APPLIED','diff'),2);
      write_summary('Catch-up-Rate per thousand TXN: ',apc_catchup_normed||' sec per second elapsed time and thousand LCRs');
    end if;
    write_summary(chr(13),null);

    write_summary('Dependencies',null,'h3');
    write_summary('LCRs with Dependencies: Delta | Rate '
                 ,getValue(level0,rep_rec.level1,'APR',
                                'TOTAL_LCRS_WITH_DEP','diff')||
                  rpad(' | '||
                       getValue(level0,rep_rec.level1,'APR',
                                'TOTAL_LCRS_WITH_DEP','rate'),30,' '));
    write_summary('LCRs with WaterMark Dependencies: Delta | Rate '
                 ,getValue(level0,rep_rec.level1,'APR',
                                'TOTAL_LCRS_WITH_WMDEP','diff')||
                  rpad(' | '||
                       getValue(level0,rep_rec.level1,'APR',
                                'TOTAL_LCRS_WITH_WMDEP','rate'),30,' '));

    if (nvl(getValue('APPLY', rep_rec.level1,'APR','TOTAL_LCRS_WITH_WMDEP','diff'),0)
      + nvl(getValue('APPLY', rep_rec.level1,'APR','TOTAL_LCRS_WITH_DEP','diff'),0)!=0) then
      apr_wm_ratio := round(getValue('APPLY', rep_rec.level1,'APR', 'TOTAL_LCRS_WITH_WMDEP','diff')*100
                           /(nvl(getValue('APPLY', rep_rec.level1,'APR','TOTAL_LCRS_WITH_WMDEP','diff'),0)
                           + nvl(getValue('APPLY', rep_rec.level1,'APR','TOTAL_LCRS_WITH_DEP','diff'),0)),2);
      write_summary('Ratio of Watermark Dependencies [%]: ',apr_wm_ratio);
    end if;
    write_summary(chr(13),null);
  end loop;
end;

procedure record_sql(name varchar2, sql_txt clob, is_insert boolean) as
 sql_c number;
 cols DBMS_SQL.DESC_Tab;
 ncols PLS_INTEGER;
 dummy_num number;
 col_value varchar2(2000);
 level0 varchar2(500);
 level1 varchar2(500);
 level2 varchar2(500);
 ts timestamp;
 coli pls_integer;
pragma autonomous_transaction;
 
begin
  ts := systimestamp;
  sql_c := dbms_sql.open_cursor;
  dbms_sql.parse (sql_c, sql_txt, dbms_sql.native);

  DBMS_SQL.DESCRIBE_COLUMNS (sql_c, ncols, cols);

  /* define the columns */
  FOR colind IN 1 .. ncols
  loop
     dbms_sql.define_column(sql_c, colind, col_value, 2000);
  end loop;

  dummy_num := dbms_sql.execute(sql_c);
  ts := systimestamp;
  loop
    if (dbms_sql.fetch_rows(sql_c) > 0 )then
      dbms_sql.column_value(sql_c,1,col_value);
      level0 := col_value;
      dbms_sql.column_value(sql_c,2,col_value);
      level1 := col_value;
      dbms_sql.column_value(sql_c,3,col_value);
      level2 := col_value;
      for colind in 4 .. ncols  loop

           dbms_sql.column_value(sql_c, colind, col_value);
           record_column(level0, level1, level2,cols(colind).col_name, 
                         cols(colind).col_type,ts, col_value, is_insert);
      end loop;
    else
       exit;
    end if;
  end loop;
exception when others then
  record_column('SUMMARY_ERROR',name,null,name, 1,ts,SQLERRM,is_insert);
end;

function getValue(lvl0 varchar2, lvl1 varchar2, 
                                    lvl2 varchar2, nm varchar2, 
                                    what varchar2) return varchar2 is
  res varchar2 (500);
  ts1 timestamp;
  ts2 timestamp;
  val1 varchar2(500);
  val2 varchar2(500);
  col_type varchar2(4);
  time_diff number;
begin
  begin
  select type#, tstamp1, value1, tstamp2, value2 into 
         col_type, ts1, val1, ts2, val2 from gghc_snapshot_tab
  where level0 = lvl0 and (lvl1 is null or level1 = lvl1) and (lvl2 is null or level2 = lvl2) and name = upper(nm);
  exception when no_data_found then
    dbms_output.put_line(lvl0||':'||lvl1||':'||lvl2||':'||nm||':not found');
    return '';
   when others then
    dbms_output.put_line(lvl0||':'||lvl1||':'||lvl2||':'||nm||':'||SQLERRM);
  end;

  -- TODO: rewrite this to use date format and different date types.
  -- assert that diff on varchar type is not attempted
  if what = 'value1' then
    res := val1;    
  elsif what = 'value2' then
    res := val2;
  elsif what = 'diff' then
    -- handle diff for timestamp/date
    if (col_type = '12' or col_type = '180') then
      res := gghc_delta_time(to_date(val1, 'YYYY/MM/DD HH24:MI:SS'),
                   to_date(val2,'YYYY/MM/DD HH24:MI:SS'));
    else
      res := val2 - val1;
    end if;
  elsif what = 'rate' then
    time_diff := gghc_delta_time(ts1,ts2);
    if (time_diff = 0) then
      res := null;
    else
      -- handle rate for timestamp/date
      if (col_type = '12' or col_type = '180') then
        res := round(gghc_delta_time(to_date(val1, 'YYYY/MM/DD HH24:MI:SS'),
                   to_date(val2,'YYYY/MM/DD HH24:MI:SS'))/time_diff);
      else 
        res := round((val2 - val1)/time_diff);
      end if;
    end if;
  end if;   
   return res;
end;

procedure write_summary(text varchar2, val varchar2, 
                        typ varchar2 default 'a',
                        comments varchar2 default null)
is
pragma autonomous_transaction;
begin
  insert into gghc_summary_tab values (gghc_summary_id.nextval, text, val, 
                                       typ, comments);
  commit;
end;

procedure record_column (lvl0 varchar2, lvl1 varchar2, 
                                          lvl2 varchar2,
                                          col_name varchar2, 
                                          col_type varchar2, 
                                          ts timestamp, val varchar2, 
                                          is_insert boolean) as
pragma autonomous_transaction;
begin
  if is_insert then
   insert into gghc_snapshot_tab(level0,level1,level2,name,type#,tstamp1, value1) values (lvl0,lvl1,lvl2,col_name,col_type,ts,val);
  else
   update gghc_snapshot_tab set tstamp2 = ts, value2 = val where level0 = lvl0 and 
                      ((level1 is null and lvl1 is null) or level1 = lvl1) and 
                      ((level2 is null and lvl2 is null) or level2 = lvl2) and
                      name = upper(col_name);
  end if;
  commit;
end;

end dbms_goldengate_hc;
/

show errors
 
     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,GENERAL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'report_summary',
      ' begin dbms_goldengate_hc.gen_summary; end;  ',
      null,
      ' select * from gghc_summary_tab ',
      'HC,GENERAL',
      'Database, Extract and Replicat Summary',
      null,
      'YES',
      'NONE', 
      'Description of the System. This contains basic information of the database and the GoldenGate processes',
      'Check that the database is open, active and accesible <BR>Check that the GoldenGate process is up and running <BR>The basic information about the throughput are defined:<BR>Database: Redo Throughput [Bytes/sec]<BR>Extract: Change Rate of Total Messages and the the Message Create Time',
      '11.2.0.0.0',
      '',
      '0',
      'GGHC_SUMMARY_TAB',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,GENERAL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'report_check',
      ' begin dbms_goldengate_hc.all_checks(false); end;   ',
      null,
      ' select l1_name Component,l2_name Type,l3_name Name, flag Alert, reason Reason, stat_info 
           from gghc_flags_tab 
           order by decode(l1_name,''DATABASE'',1,''CAPTURE'',2,''APPLY'',3,''APPLY ERROR'',4,99)
  ',
      'HC,GENERAL',
      'General Findings',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'GGHC_FLAGS_TAB',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99>') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,INTERNAL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_v2',
      null,
      null,
      ' select extractname_knstcap Extract_Name, capname_knstcap Capture_Name
             , decode(bitand(flags_knstcap,64), 64,''V2'',''V1'') protocol
             , apply_name,replace(apply_name,''OGG$'','''') Extract, queue_owner||''.''||queue_name QUEUE
             , apply_user, apply_tag
             , rule_set_owner||''.''||rule_set_name RSN
             , negative_rule_set_owner||''.''||negative_rule_set_name RSN2
             , status
          from x$knstcap
          left join dba_apply on replace(apply_name,''OGG$'','''') = extractname_knstcap
          where purpose like ''GoldenGate Cap%''
          or purpose is NULL
  ',
      'HC,CAPTURE,INTERNAL',
      'Internal: Apply Process belonging to Extract',
      null,
      'YES',
      'NONE', 
      'Information about the Extract Protocol (V1/V2) and the internal Apply process of the Capture.',
      '- If Extract Protocol is V2, there is an internal Apply Process related to the Capture Process, otherwise not. <BR>The Apply process does not perform any business related functionality.',
      '11.2.0.0.0',
      '11.2.0.4.99>',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_param',
      null,
      null,
      ' select p.capture_name
             , p.parameter
             , p.value
             , p.set_by_user
             , cap.source_database 
          from dba_capture_parameters p, dba_capture cap
          where p.parameter in (''CAPTURE_IDKEY_OBJECTS''
                               ,''DOWNSTREAM_REAL_TIME_MINE''
                               ,''INLINE_LOB_OPTIMIZATION''
                               ,''MAX_SGA_SIZE''
                               ,''PARALLELISM''
                               ,''TRACE_LEVEL''
                               ,''WRITE_ALERT_LOG''
                               ) 
          AND cap.capture_name = p.capture_name 
          AND cap.purpose = ''GoldenGate Capture'' 
          order by p.parameter
  ',
      'HC,CAPTURE,CONFIG',
      'Capture Parameters',
      null,
      'YES',
      'NONE', 
      'Information about Capture Parameter Settings [DBA_CAPTURE_PARAMETERS]',
      'Integrated [Extract|Replicat] Parameters are set with the [TRANLOGOPTIONS|DBOPTIONS| INTEGRATEDPARAMS &'||'lt;parameter value&'||'gt; <BR>You should change to non-default settings only if you have carefully evaluated the change',
      '11.2.0.0.0',
      '',
      '0',
      'DBA_CAPTURE_PARAMETERS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_param',
      null,
      null,
      ' select p.apply_name
             , p.parameter
             , p.value
             , p.set_by_user
          from dba_apply_parameters p, dba_apply app
          where p.parameter in (''COMMIT_SERIALIZATION''
                               ,''BATCHSQL_MODE''
                               ,''DISABLE_ON_ERROR''
                               ,''EAGER_SIZE''
                               ,''ENABLE_XSTREAM_TABLE_STATS''
                               ,''MAX_PARALLELISM''
                               ,''PARALLELISM''
                               ,''PARALLELISM_INTERVAL''
                               ,''MESSAGE_TRACKING_FREQUENCY''
                               ,''MAX_SGA_SIZE''
                               ,''PRESERVE_ENCRYPTION''
                               ,''OPTIMIZE_PROGRESS_TABLE''
                               ,''TRACE_LEVEL''
                               ,''WRITE_ALERT_LOG''
                               ) 
          AND p.apply_name = app.apply_name 
          and app.purpose = ''GoldenGate Apply'' 
          order by p.parameter
  ',
      'HC,APPLY,CONFIG',
      'Apply Parameters',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      'DBA_APPLY_PARAMETERS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,GENERAL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_version',
      null,
      null,
      ' SELECT i.host_name Host, db.platform_name
             , (select dbms_utility.port_string as VALUE from dual) Operating_System
             , (select value as VALUE from v$parameter where name = ''cpu_count'') CPU_COUNT
             , db.name Database_name,i.version
             , DECODE(regexp_substr(v.banner, ''[^ ]+'', 1, 4),''Edition'',''Standard'',regexp_substr(v.banner, ''[^ ]+'', 1, 4)) DB_Edition
             , (select decode(value,''FALSE'',''No'',''TRUE'',''YES'') RAC from v$parameter where name = ''cluster_database'') 
               ||(select '' (''||value||'')'' from v$parameter where name =''cluster_database_instances'') RAC
          FROM v$database db,v$instance i, v$version v
          WHERE banner LIKE ''Oracle%''
  ',
      'HC,DATABASE,GENERAL',
      'General System Information',
      null,
      'YES',
      'NONE', 
      '- Information about the current Database Instance',
      '- The Report is generated from this Database Instance. In a RAC environment, there are multiple instances and GoldenGate processes might run on different instances.<BR> In a DownStream environment, Min_required_capture_change# is not populated.',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      'V$DATABASE,V$INSTANCE,V$VERSION',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_summary',
      null,
      null,
      ' select SYSDATE Current_time
             , c.client_name extract_name
             , c.capture_name
             , c.capture_user
             , c.capture_type
             , decode(cp.value,''N'',''NO'', ''YES'') Real_time_mine
             , c.version
             , c.required_checkpoint_scn
             , case when g.sid=g.server_sid and g.serial#=g.server_serial# then ''V2''
               else ''V1''
               end protocol
             , c.logminer_id
             , o.created registered
             , o.last_ddl_time
             , c.status
             , g.state
             , dbms_goldengate_hcadm_int.display_date((SYSDATE - g.capture_message_create_time)*86400) capture_lag
             , dbms_goldengate_hcadm_int.display_bytes(g.bytes_of_redo_mined) redo_mined
             , dbms_goldengate_hcadm_int.display_bytes(g.bytes_sent) redo_sent
             , g.startup_time
             , g.inst_id
             , c.source_database
          from dba_capture c, dba_objects o, gv$goldengate_capture g, dba_capture_parameters cp
          where c.capture_name = g.capture_name
          and   c.capture_name = cp.capture_name and cp.parameter=''DOWNSTREAM_REAL_TIME_MINE''
          and   c.status = ''ENABLED'' 
          and   c.purpose = ''GoldenGate Capture''
          and   c.capture_name = o.object_name
          and   c.capture_name=g.capture_name
        union all
        select SYSDATE Current_time
             , c.client_name extract_name
             , c.capture_name
             , c.capture_user
             , c.capture_type 
             , decode(cp.value, ''N'',''NO'', ''YES'') Real_time_mine
             , c.version
             , c.required_checkpoint_scn
             , ''Unavailable''
             , c.logminer_id
             , o.created registered
             , o.last_ddl_time
             , c.status
             , ''Unavailable''
             , NULL
             , NULL
             , NULL
             , NULL
             , NULL
             , c.source_database
        from dba_capture c, dba_objects o, dba_capture_parameters cp
        where c.status in (''DISABLED'',''ABORTED'') 
       and   c.purpose=''GoldenGate Capture''
       and c.capture_name=cp.capture_name 
       and cp.parameter=''DOWNSTREAM_REAL_TIME_MINE''
       and c.capture_name = o.object_name
       order by extract_name
  ',
      'HC,CAPTURE,PERF',
      'Integrated Extracts Summary',
      null,
      'YES',
      'CAPTURE', 
      'Summary Information about the Extract Processes - Details are shown in the subsequent tables.',
      '- The Report is generated from this Database Instance',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      'DBA_CAPTURE,DBA_CAPTURE_PARAMETERS,DBA_OBJECTS,DBA_XSTREAM_OUTBOUND,GV$GOLDENGATE_CAPTURE,GV$XSTREAM_OUTBOUND_SERVER',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_key_params',
      null,
      null,
      ' select cp.capture_name,substr(cp.capture_name,9,8) extract_name
             , max(case when parameter=''PARALLELISM'' then value end) parallelism
             , max(case when parameter=''MAX_SGA_SIZE'' then value end) max_sga_size
             , max(case when parameter=''EXCLUDETAG'' then value end) excludetag
             , max(case when parameter=''EXCLUDEUSER'' then value end) excludeuser
             , max(case when parameter=''GETAPPLOPS'' then value end) getapplops
             , max(case when parameter=''GETREPLICATES'' then value end) getreplicates 
             , max(case when parameter=''_CHECKPOINT_FREQUENCY'' then value end) checkpoint_frequency                
          from dba_capture_parameters cp, dba_capture c 
          where c.capture_name = cp.capture_name
          and   c.purpose=''GoldenGate Capture''
          group by cp.capture_name
  ',
      'HC,CAPTURE,CONFIG',
      'Integrated Extract key parameters',
      null,
      'NO',
      'CAPTURE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      'DBA_CAPTURE,DBA_CAPTURE_PARAMETERS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,LOGMINER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_logmnr_info',
      null,
      null,
      ' select session_name, available_txn, delivered_txn
             , available_txn-delivered_txn as Difference
             , builder_work_size, prepared_work_size
             , dbms_goldengate_hcadm_int.display_bytes(used_memory_size) as "Used Memory"
             , dbms_goldengate_hcadm_int.display_bytes(max_memory_size) as "Max Memory"
             , dbms_goldengate_hcadm_int.display_number((used_memory_size/NULLIF(max_memory_size,0))*100) as "Used Memory [Percentage]"
          FROM gv$logmnr_session 
          order by session_name
 ',
      'HC,CAPTURE,LOGMINER,PERF',
      'Integrated Extract/Logminer Session Information',
      null,
      'YES',
      'CAPTURE', 
      'Runtime Information about the Extract/Logminer',
      '- If the Differnce is high, meaning that there are much more avialable than delivered transactions, <BR>it is most likeley that the Extract client program causes a delay. <BR>- Memory utilization of Logminer is shown in percenatge.',
      '11.2.0.0.0',
      '',
      '0',
      'GV$LOGMNR_SESSION',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,PATCH,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_bp_info',
      null,
      null,
      ' select value$ from sys.props$ where name = ''REPLICATION_BUNDLE''
  ',
      'HC,DATABASE,PATCH,CONFIG',
      'Replication Bundled Patch Information',
      null,
      'YES',
      'APPLY', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'PROPS$',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,ALERTS,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_out_alerts',
      null,
      null,
      ' select message_type
             , creation_time
             , reason
             , suggested_action
             , module_id
             , object_type
             , instance_name||'' ('' ||instance_number||'' )'' Instance
             , time_suggested
          from dba_outstanding_alerts 
          where creation_time >= sysdate -10 
          and rownum < 11
          order by creation_time desc
  ',
      'HC,DATABASE,ALERTS,CONFIG',
      'Outstanding alerts',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'DBA_OUTSTANDING_ALERTS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE_APPLY,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'rep_count',
      null,
      null,
      ' select purpose,count(*) nmbr, ''CAPTURE'' type from dba_capture group by purpose
        union all
        select purpose, count(*) nmbr, ''APPLY'' type from dba_apply group by purpose 
        order by purpose
  ',
      'HC,CAPTURE_APPLY,CONFIG',
      'Count of Capture and Apply processes configured in database by purpose',
      null,
      'NO',
      'APPLY', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      'DBA_APPLY,DBA_CAPTURE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_info',
      null,
      null,
      ' select dbid,name,open_mode
             , current_scn||'' (''||to_char(sysdate,''YYYY-MM-DD HH24:MI:SS'')||'')'' current_scn
             , resetlogs_change#||'' (''||to_char(RESETLOGS_TIME,''YYYY-MM-DD HH24:MI:SS'')||'')'' RESETLOGS_TIME
             , created
             , min_required_capture_change#
          from v$database
  ',
      'HC,DATABASE,CONFIG',
      'Database Information',
      null,
      'YES',
      'DATABASE', 
      'Information about the database',
      '- Check Read/Write ability of the database.  <BR>- Check for the min. required SCN used for the latest Capture process. <BR>- If min. required SCN is NULL, the database has vo Capture process or it is a DownStream Database.',
      '11.2.0.0.0',
      '',
      '0',
      'V$DATABASE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_log_info',
      null,
      null,
      ' SELECT log_mode
             , FORCE_LOGGING             FORCE_LOG
             , SUPPLEMENTAL_LOG_DATA_MIN MIN_LOG
             , SUPPLEMENTAL_LOG_DATA_PK  PK_LOG
             , SUPPLEMENTAL_LOG_DATA_UI  UI_LOG
             , SUPPLEMENTAL_LOG_DATA_FK  FK_LOG
             , SUPPLEMENTAL_LOG_DATA_ALL ALL_LOG
          from v$database 
  ',
      'HC,DATABASE,CONFIG',
      'Database Archive/Redo related Information',
      null,
      'YES',
      'DATABASE', 
      'Additional Information about the database',
      '- Check minimal Supplemental Logging  <BR>- Check if other Supplemental Logging options are enabled on the database level. <BR>- Check that the Database is in ArchiveLog mode.',
      '11.2.0.0.0',
      '',
      '0',
      'V$DATABASE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_edition',
      null,
      null,
      ' select * from v$version where banner like ''Oracle%''
  ',
      'HC,DATABASE,CONFIG',
      'Software Edition',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'V$VERSION',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_inst_info',
      null,
      null,
      ' select decode(instance_number
             , SYS_CONTEXT(''USERENV'',''INSTANCE''),''x'', '' '') current_instance
               , instance_number Instance, instance_name Name,instance_role
               , HOST_NAME Host, version
               , STARTUP_TIME, STATUS, PARALLEL, thread#, ARCHIVER, LOGINS, SHUTDOWN_PENDING, ACTIVE_STATE, BLOCKED
          from gv$instance
          order by instance_number 
  ',
      'HC,DATABASE,CONFIG',
      'Instance Information',
      null,
      'YES',
      'DATABASE', 
      '- If multiple records are shown, the Database Instance runs in a RAC environment.',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'GV$INSTANCE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_incarnation',
      null,
      null,
      ' Select Incarnation#, resetlogs_id,resetlogs_change# from v$database_incarnation where status = ''CURRENT''
  ',
      'HC,DATABASE,CONFIG',
      'Current Database Incarnation',
      null,
      'YES',
      'DATABASE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'V$DATABASE_INCARNATION',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,PATCH,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_reg_info',
      null,
      null,
      ' select comp_id, comp_name,version,status,modified,schema from DBA_REGISTRY
  ',
      'HC,DATABASE,PATCH,CONFIG',
      'Registry Information',
      null,
      'YES',
      'NONE', 
      'General Description of registered Components within the Database',
      '- Check that all loaded Database Components are valid.',
      '11.2.0.0.0',
      '',
      '0',
      'DBA_REGISTRY',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.3.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,PATCH,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_reg_hist',
      null,
      null,
      ' select * from dba_registry_history
  ',
      'HC,DATABASE,PATCH,CONFIG',
      'Registry History',
      null,
      'YES',
      'NONE', 
      'Information about upgrades, downgrades, and critical patch updates that have been performed on the Database',
      '- Check the Database for the latest apllied Patches (PSU, OGG/RDBMS Bundle-Patch, Database Bundle-Patch',
      '11.2.0.0.0',
      '11.2.0.3.99',
      '0',
      'DBA_REGISTRY_HISTORY',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_nls',
      null,
      null,
      ' select * from NLS_DATABASE_PARAMETERS
  ',
      'HC,DATABASE,CONFIG',
      'NLS Database Parameters',
      null,
      'YES',
      'DATABASE', 
      'Information about Globalization Support/National Character Set',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'NLS_DATABASE_PARAMETERS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_conn_info',
      null,
      null,
      ' select ''DATABASE NAME:'' name, name value from v$database
        union all
        select ''INSTANCE NAME:'' name,instance_name value from v$instance
        union all
        select ''GLOBAL NAME:'' name,global_name value from global_name
        union all
        select ''SERVICE NAMES:'' name, network_name value from v$services where network_name is not null
  ',
      'HC,DATABASE,CONFIG',
      'Connection Information',
      null,
      'YES',
      'NONE', 
      'Information about Database Name, Instance Name and Service Names',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'GLOBAL_NAME,V$DATABASE,V$INSTANCE,V$SERVICES',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,MEMORY,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_init_param',
      null,
      null,
      ' select keyparameter, name, value 
        from (
               select (CASE WHEN name in
                  ( ''aq_tm_processes''
                  , ''archive_lag_target''
                  , ''job_queue_processes'', ''_job_queue_interval''
                  , ''shared_pool_size'', ''sga_max_size'' , ''memory_max_target'',''memory_target'', ''sga_target'', ''streams_pool_size''
                  , ''global_names'', ''compatible'', ''log_parallelism''
                  , ''logmnr_max_persistent_sessions''
                  , ''processes'', ''sessions''
                  , ''control_file_record_keep_time''
                  , ''enable_goldengate_replication''
                  ) THEN ''Yes''
                  ELSE '' '' END ) KeyParameter
                 , name
                 , value
                 , description
                 , isdefault
                from v$parameter
             )
             where (KeyParameter = ''Yes'' or isdefault=''FALSE'')
             order by KeyParameter desc, name asc
  ',
      'HC,DATABASE,MEMORY,CONFIG',
      'Key Init.ora parameters',
      null,
      'YES',
      'DATABASE', 
      'Key Initialization Parameters that are related to GoldenGate',
      '- For Oracle Databases 11.2.0.4+ and 12.1.0.2+, GoldenGate Replication needs to be enabled. <BR>- Check that sufficient Memory for the Streams Pool is available.',
      '11.2.0.0.0',
      '',
      '0',
      'V$PARAMETER',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'gg_admin',
      null,
      null,
      ' select username
             , decode(privilege_type,''CAPTURE'',''CAPTURE'',''APPLY'',''APPLY'',''*'',''CAPTURE + APPLY'',NULL) priv_type
             , decode(grant_select_privileges,''YES'',''Trusted (full)'',''NO'',''Untrusted (minimum)'',null) priv_model
             , create_time  
          from DBA_goldengate_privileges
  ',
      'HC,DATABASE,CONFIG',
      'GoldenGate Administrator Users',
      null,
      'YES',
      'DATABASE', 
      'Information about the OGG Administartion User',
      '- The OGG Admin user needs privileges from dbms_goldengate_auth.grant_admin_privilege call.',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      'DBA_GOLDENGATE_PRIVILEGES',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'strm_admin',
      null,
      null,
      ' select * from dba_streams_administrator
 ',
      'HC,DATABASE,CONFIG',
      'Streams Administrator',
      null,
      'YES',
      'DATABASE', 
      'Information about the Streams Admin User',
      '- Check for sufficient resources, if Streams and GoldenGate are maintained in parallel.',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      'DBA_STREAMS_ADMINISTRATOR',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'gg_admin_info',
      null,
      null,
      ' select username, user_id, account_status, created, lock_date, expiry_date
              , default_tablespace, profile, initial_rsrc_consumer_group, password_versions
              , editions_enabled, authentication_type, external_name
          from dba_users 
          where username in  
            (select capture_user from dba_capture 
              where purpose like ''GoldenGate%'' 
            union 
            select apply_name from dba_apply 
              where purpose like ''GoldenGate%'' 
            union 
            select username from dba_goldengate_privileges
           )  
          order by 1
  ',
      'HC,DATABASE,CONFIG',
      'Database User Information for GoldenGate Administrators',
      null,
      'YES',
      'DATABASE', 
      'Information about the OGG Admin User Profile',
      '- Check the Profile from the OGG Admin User (Expiry Date).',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      'DBA_APPLY,DBA_CAPTURE,DBA_GOLDENGATE_PRIVILEGES,DBA_USERS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,QUEUES,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_q',
      null,
      null,
      ' SELECT q.OWNER||''.''||q.NAME queue
             , t.QUEUE_TABLE
             , q.enqueue_enabled
             , q.dequeue_enabled
             , t.primary_instance, t.secondary_instance
             , t.owner_instance
             , network_name
             , q.USER_COMMENT
          FROM DBA_QUEUES q, DBA_QUEUE_TABLES t
          WHERE t.OBJECT_TYPE = ''SYS.ANYDATA'' 
          AND   q.QUEUE_TABLE = t.QUEUE_TABLE 
          AND   q.OWNER       = t.owner
          order by q.owner, q.name, t.queue_table
  ',
      'HC,DATABASE,QUEUES,CONFIG',
      'Database Queues',
      null,
      'NO',
      'DATABASE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      'DBA_QUEUES,DBA_QUEUE_TABLES',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,QUEUES,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_q_sub',
      null,
      null,
      ' SELECT qs.owner||''.''||qs.queue_name queue
             , qs.queue_table
             , NVL2(qs.consumer_name,''CONSUMER: '',''ADDRESS : '') ||
               NVL(qs.consumer_name,qs.address) Subscriber
             , qs.delivery_mode
             , qs.queue_to_queue
             , qs.protocol
         FROM dba_queue_subscribers qs, dba_queue_tables qt
         WHERE qt.OBJECT_TYPE = ''SYS.ANYDATA''  
         AND   qs.QUEUE_TABLE = qt.QUEUE_TABLE 
         AND   qs.OWNER = qt.OWNER
         ORDER BY qs.owner,qs.queue_name
  ',
      'HC,DATABASE,QUEUES,CONFIG',
      'Queue Subscribers',
      null,
      'NO',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      'DBA_QUEUE_SUBSCRIBERS,DBA_QUEUE_TABLES',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.3.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'min_arch_log',
      null,
      null,
      ' SELECT ral.consumer_name ,ral.name,ral.first_time  
          from DBA_REGISTERED_ARCHIVED_LOG ral , v$database db
          where db.min_required_capture_change#  >= ral.first_scn 
          and   db.min_required_capture_change# < ral.next_scn order by thread# 
  ',
      'HC,CAPTURE,CONFIG',
      'Minimum Archive Log Necessary to Restart Integrated Capture (local capture)',
      null,
      'YES',
      'CAPTURE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.3.99',
      '0',
      'DBA_REGISTERED_ARCHIVED_LOG,V$DATABASE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_status',
      null,
      null,
      ' SELECT substr(capture_name,9,8) client_name
             , capture_name
             , status
             , decode(purpose, ''GoldenGate Capture'',''Integrated Capture'',''Streams'', ''Classic Capture'',''*'',NULL) extract_mode 
             , error_number
             , status_change_time
             , error_message 
          FROM dba_CAPTURE 
          where purpose like ''GoldenGate%'' or capture_name like ''OGG%$%'' 
          order by capture_name
  ',
      'HC,CAPTURE,PERF',
      'Capture Status',
      null,
      'YES',
      'CAPTURE', 
      'Information about the Attachment of the Extract client program to the Logmining Server',
      '- Check that the Client Status is ATTACHED.  <BR>- Check that the Status is ENABLED. <BR>- Check for the Error time, error_number and message in the case that Extract is aborted.',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      'DBA_CAPTURE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'intl_cp',
      null,
      null,
      ' select capname_knstcap capture_name
             , decode(bitand(flags_knstcap,64), 64,''V2'',''V1'') version 
          from x$knstcap 
          order by version, capture_name
  ',
      'HC,CAPTURE,CONFIG',
      'Integrated Capture Information',
      null,
      'NO',
      'CAPTURE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_info',
      null,
      null,
      ' SELECT capture_name
             , queue_owner||''.''||queue_name QUEUE
             , capture_type
             , purpose
       --    , status
             , capture_user
             , rule_set_owner||''.''||rule_set_name RSN
             , negative_rule_set_owner||''.''||negative_rule_set_name RSN2
             , checkpoint_retention_time  CheckpointRetentionTime
             , version
             , logfile_assignment
       --    , error_number
       --    , status_change_time
       --    , error_message 
          FROM DBA_CAPTURE 
          where purpose like ''GoldenGate%'' or capture_name like ''OGG%$%'' 
          order by capture_name
  ',
      'HC,APPLY,CONFIG',
      'Capture basic Information',
      null,
      'YES',
      'APPLY', 
      'Information of the Database Capture Process of the Extract',
      '- Check if Capture is LOCAL or DOWNSTREAM. <BR>- Check the Version of the Capture. <BR>- Check the Checkpoint Retention time used for the Capture. <BR>- In case of an Error, check the error number and the message.',
      '11.2.0.0.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_info_scn',
      null,
      null,
      ' SELECT capture_name
             , capture_type
             , source_database
             , captured_scn
             , applied_scn
             , last_enqueued_scn
             , required_checkpoint_scn
             , max_checkpoint_scn
             , first_scn, start_scn ||'' (''||start_time||'') '' start_scn
             , source_dbid
             , source_resetlogs_scn
             , source_resetlogs_time
          FROM DBA_CAPTURE 
          where purpose like ''GoldenGate%'' or capture_name like ''OGG%$%''
          order by capture_name
  ',
      'HC,CAPTURE,PERF',
      'Capture SCN Information',
      null,
      'YES',
      'CAPTURE', 
      'Time/SCN related Information of the Database Capture Process of the Extract',
      '- Check the the Required Checkpoint Time is moving forward over a long period in time. <BR>- Check the Version of the Capture. <BR>- Check the Checkpoint Retention time used for the Capture. <BR>- In case of an Error, check the error number and the message.',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_param_detail',
      null,
      null,
      ' select cp.* 
           from dba_capture_parameters cp,dba_capture c   
           where c.purpose like ''GoldenGate%'' 
           and c.capture_name = cp.capture_name 
           and (cp.set_by_user=''YES'' or cp.parameter=''PARALLELISM'') 
           order by cp.capture_name,PARAMETER 
  ',
      'HC,CAPTURE,CONFIG',
      'Capture Process Parameters',
      null,
      'YES',
      'CAPTURE', 
      'Extract Integrated Tranlogoptions Parameter Setting',
      '- Parameter Changes can be done from the Extract Parameter File with the TRANLOGOPTIONS INTEGRATEDPARAMS (<name><value>setting.',
      '11.2.0.0.0',
      '',
      '0',
      'DBA_CAPTURE,DBA_CAPTURE_PARAMETERS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,RULES,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_rules',
      null,
      null,
      ' select sr.streams_name NAME
             , sr.schema_name||''.''||sr.object_name OBJECT
             , sr.rule_set_type
             , sr.SOURCE_DATABASE
             , sr.STREAMS_RULE_TYPE ||'' ''||sr.Rule_type TYPE 
             , sr.INCLUDE_TAGGED_LCR
             , sr.same_rule_condition
             , sr.rule_owner||''.''||sr.rule_name RULE
          from dba_streams_rules sr, dba_capture c 
          where sr.streams_type = ''CAPTURE'' 
          and c.capture_name = sr.streams_name 
          and c.purpose like ''GoldenGate%''
          order by name,object, sr.source_database, sr.rule_set_type,rule
  ',
      'HC,CAPTURE,RULES,CONFIG',
      'Capture Rules',
      null,
      'YES',
      'CAPTURE', 
      'Capture Rules Belonging to the Extract',
      'In Multitenant Database environments, GLOBAL Rules are pointing to the specific PDB. <BR>- Check the TAG conditions. By default, Extract is Capturing all information (INCLUDE_TAGGED_LCR=YES). <BR>In bidirectional or N-Way Replication environments, this needs to be validated.',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      'DBA_CAPTURE,DBA_STREAMS_RULES',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,RULES,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_rulesets',
      null,
      null,
      ' select c.capture_name
             , rsr.rule_set_owner||''.''||rsr.rule_set_name RULE_SET 
             , rsr.rule_owner||''.''||rsr.rule_name RULE_NAME
             , r.rule_condition CONDITION 
          from dba_rule_set_rules rsr, DBA_RULES r ,DBA_CAPTURE c
          where rsr.rule_name  = r.rule_name 
          and   rsr.rule_owner = r.rule_owner  
          and   rsr.rule_set_owner = c.rule_set_owner 
          and   rsr.rule_set_name=c.rule_set_name  
          and rsr.rule_set_name in 
             (select rule_set_name from dba_capture where c.purpose like ''GoldenGate%'') 
          order by rsr.rule_set_owner, rsr.rule_set_name
  ',
      'HC,CAPTURE,RULES,CONFIG',
      'Capture Rules by Rulesets',
      null,
      'YES',
      'CAPTURE', 
      'Detailed Information about Capture Rules Belonging to the Extract <BR>Relation between RuleSets and Rules and the Rule conditions are shown.',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      'DBA_CAPTURE,DBA_RULES,DBA_CAPTURE,DBA_RULE_SET_RULES',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,RULES,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_rulesets2',
      null,
      null,
      ' select c.capture_name
            , rsr.rule_set_owner||''.''||rsr.rule_set_name RULE_SET 
            , rsr.rule_owner||''.''||rsr.rule_name RULE_NAME
            , r.rule_condition CONDITION 
        from dba_rule_set_rules rsr, DBA_RULES r ,DBA_CAPTURE c
        where rsr.rule_name = r.rule_name 
        and rsr.rule_owner = r.rule_owner 
        and rsr.rule_set_owner = c.negative_rule_set_owner 
        and rsr.rule_set_name = c.negative_rule_set_name 
        and rsr.rule_set_name in 
            (select negative_rule_set_name rule_set_name 
               from dba_capture 
               where c.purpose like ''GoldenGate%''
            ) 
        order by rsr.rule_set_owner,rsr.rule_set_name
  ',
      'HC,CAPTURE,RULES,CONFIG',
      'Capture Rules in Negative Rulesets',
      null,
      'YES',
      'CAPTURE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_reg_log',
      null,
      null,
      ' SELECT r.CONSUMER_NAME, r.SOURCE_DATABASE
             , r.thread#, r.SEQUENCE#
             , r.NAME
             , r.first_scn, r.FIRST_TIME
             , r.next_scn, r.next_time
             , r.MODIFIED_TIME
             , r.DICTIONARY_BEGIN, r.DICTIONARY_END
             , r.purgeable
          FROM DBA_REGISTERED_ARCHIVED_LOG r, DBA_CAPTURE c
          WHERE r.CONSUMER_NAME = c.CAPTURE_NAME 
          AND c.purpose like ''GoldenGate%''
          ORDER BY source_database, consumer_name, r.first_scn
  ',
      'HC,CAPTURE,CONFIG',
      'Registered Log Files for Capture',
      null,
      'NO',
      'CAPTURE', 
      'Information about all registered archived logfiles in regard to GoldenGate in the database.',
      '- Check (that all required archive log files are available.',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      'DBA_CAPTURE,DBA_REGISTERED_ARCHIVED_LOG',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.3.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_extra_attributes',
      null,
      null,
      ' SELECT ca.CAPTURE_NAME
             , ca.ATTRIBUTE_NAME
             , ca.ROW_ATTRIBUTE
             , ca.DDL_ATTRIBUTE
             , ca.INCLUDE 
          FROM DBA_CAPTURE_EXTRA_ATTRIBUTES ca, dba_capture c
          where c.purpose = ''GoldenGate Capture'' 
          and  ca.capture_name = c.capture_name 
           ORDER BY ca.CAPTURE_NAME 
  ',
      'HC,CAPTURE,CONFIG',
      'CAPTURE EXTRA ATTRIBUTES',
      null,
      'NO',
      'CAPTURE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.3.99',
      '0',
      'DBA_CAPTURE_EXTRA_ATTRIBUTES,DBA_CAPTURE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','12.1.0.1.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,SUPLOG,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'suplog_schema',
      null,
      null,
      ' select * from SYS.LOGMNR$SCHEMA_ALLKEY_SUPLOG order by 1
  ',
      'HC,DATABASE,SUPLOG,CONFIG',
      'Schemas Prepared for Capture',
      null,
      'YES',
      'CAPTURE', 
      'Information about Databases Schemas being prepared for Capture',
      'NONE',
      '11.2.0.0.0',
      '12.1.0.1.99',
      '0',
      'LOGMNR$SCHEMA_ALLKEY_SUPLOG',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,SUPLOG,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'suplog_all',
      null,
      null,
      ' select cp.* from dba_capture_prepared_database cp, dba_capture c 
          where c.purpose like ''GoldenGate%''
  ',
      'HC,DATABASE,SUPLOG,CONFIG',
      'Database prepared for Capture',
      null,
      'YES',
      'CAPTURE', 
      'Information about the Database being prepared for Capture',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      'DBA_CAPTURE,DBA_CAPTURE_PREPARED_DATABASE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,SUPLOG,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'suplog_table',
      null,
      null,
      ' select owner||''.''||table_name OBJECT, log_group_name, log_group_type
             , decode(always,''ALWAYS'',''Unconditional'',''CONDITIONAL'',''Conditional'',NULL,''Conditional'') ALWAYS
             , generated 
          from dba_log_groups 
          order by 1,2
  ',
      'HC,DATABASE,SUPLOG,CONFIG',
      'Table Level Supplemental Log Groups enabled for Capture',
      null,
      'YES',
      'CAPTURE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      'DBA_LOG_GROUPS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.3.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ogg_cp_config',
      null,
      null,
      ' Select SERVER_NAME
             , STATUS
             , CONNECT_USER
             , CAPTURE_NAME
             , SOURCE_DATABASE
             , START_SCN ||'' (''|| START_TIME||'')'' as "Start_SCN(Start_Time)"
             , CAPTURE_USER
             , QUEUE_OWNER||''.''||QUEUE_NAME queue
             , USER_COMMENT
             , CREATE_DATE
          from dba_xstream_outbound 
          where committed_data_only=''NO'' 
          order by 1
  ',
      'HC,CAPTURE,CONFIG',
      'GoldenGate CONFIGURATION',
      null,
      'NO',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.3.99',
      '0',
      'DBA_XSTREAM_OUTBOUND',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ogg_ap_config',
      null,
      null,
      ' Select apply_name, status
             , replace(apply_name,''OGG$'','''') Extract
             , queue_owner||''.''||queue_name QUEUE
             , a.apply_user, apply_tag, rule_set_owner||''.''||rule_set_name RSN
             , negative_rule_set_owner||''.''||negative_rule_set_name RSN2 
          from DBA_APPLY a 
          where a.purpose like ''GoldenGate%'' 
          order by 1
  ',
      'HC,APPLY,CONFIG',
      'GoldenGate Configuration',
      null,
      'NO',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      'DBA_APPLY',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.3.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_status_client',
      null,
      null,
      ' select xo.server_name client_name 
             , c.applied_scn  applied_scn
             , xo_status      client_status
             , c.status_change_time
             , c.error_number error_number
             , case when c.error_number =101  then ''STOP EXTRACT command performed ( ''||c.error_message||'' )''
                    when c.error_number =1013 then ''STOP EXTRACT command performed ( ''||c.error_message||'' )''
                    when xo_status =''DETACHED'' then ''Extract is not started''
               else c.error_message
               end           error_message
          from dba_xstream_outbound xo
            , dba_capture c
            , (select xo.capture_name ,case when (bitand(cp.flags_knstcap, 64) = 64) then ''ATTACHED''
                                       else decode(xo.status, ''ATTACHED'', ''ATTACHED'', ''DETACHED'')
                                       end xo_status
                 from dba_xstream_outbound xo, x$knstcap cp
                 where cp.capname_knstcap (+)= xo.capture_name )  d
          where c.purpose like ''GoldenGate%'' 
          and xo.capture_name=d.capture_name 
          and xo.capture_name=c.capture_name 
          order by 1
  ',
      'HC,CAPTURE,CONFIG',
      'Extract Client Status',
      null,
      'YES',
      'NONE', 
      'Information about the Attachment of the Extract client program to the Database Logmining Server',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.3.99',
      '0',
      'DBA_CAPTURE,DBA_XSTREAM_OUTBOUND,X$KNSTCAP',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.3.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ogg_out_pt1',
      null,
      null,
      ' select xop.* 
          from dba_xstream_outbound_progress xop, dba_apply a 
          where xop.server_name=a.apply_name 
          and a.purpose like ''Golden%'' 
          order by server_name
  ',
      'HC,APPLY,CONFIG',
      'OGG Outbound Progress Table',
      null,
      'NO',
      'APPLY', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.3.99',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.3.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,RULES,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_rulesets',
      null,
      null,
      ' select owner||''.''||object_name OBJECT, object_id,object_type, created,last_ddl_time, status 
          from dba_objects
          WHERE object_type in (''CAPTURE'',''APPLY'')
          OR   (object_type in (''RULE'',''RULE SET'') AND OWNER in (select username from DBA_goldengate_privileges))
          order by object_type, object
  ',
      'HC,DATABASE,RULES,CONFIG',
      'DBA Objects - Rules, and Capture/Apply Processes',
      null,
      'NO',
      'APPLY', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.3.99',
      '0',
      'DBA_GOLDENGATE_PRIVILEGES,DBA_OBJECTS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.3.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,QUEUES,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'hist_bufq',
      null,
      null,
      ' select s.begin_interval_time, s.end_interval_time 
        --   , bq.snap_id
             , bq.instance_number inst_id
             , bq.queue_schema||''.''||bq.queue_name Queue
             , bq.num_msgs, bq.cnum_msgs
        --   , bq.queue_id
             , bq.startup_time
        --   , bq.dbid
          from   dba_hist_buffered_queues bq, dba_hist_snapshot s 
          where  bq.snap_id=s.snap_id   
          and s.end_interval_time >= systimestamp-1 
          and bq.instance_number =s.instance_number
          order by bq.queue_schema,bq.queue_name,s.end_interval_time
  ',
      'HC,DATABASE,QUEUES,PERF',
      'Buffered Queue History for last day',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.3.99',
      '0',
      'DBA_HIST_BUFFERED_QUEUES,DBA_HIST_SNAPSHOT',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,QUEUES,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'hist_bufq_sub',
      null,
      null,
      ' select s.begin_interval_time,s.end_interval_time 
             , bs.instance_number
        --   , bs.snap_id
        --   , bs.subscriber_id
             , bs.queue_schema||''.''||bs.queue_name Queue
             , bs.subscriber_name
             , bs.num_msgs, bs.cnum_msgs
        --   , subscriber_address
             , bs.startup_time
        --   , bs.dbid
          from  dba_hist_buffered_subscribers bs, dba_hist_snapshot s 
          where bs.snap_id=s.snap_id 
          and   s.end_interval_time >= systimestamp-1 
          and  bs.instance_number = s.instance_number
          order by bs.queue_schema,bs.queue_name,bs.subscriber_id,s.end_interval_time
  ',
      'HC,DATABASE,QUEUES,PERF',
      'Buffered Subscriber History for last day',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      'DBA_HIST_BUFFERED_SUBSCRIBERS,DBA_HIST_SNAPSHOT',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_hist',
      null,
      null,
      ' select s.begin_interval_time,s.end_interval_time
             , sc.instance_number
             , sc.capture_name
             , sc.lag
             , sc.total_messages_captured
             , sc.total_messages_enqueued
             , sc.elapsed_pause_time
             , sc.elapsed_redo_wait_time
             , sc.elapsed_rule_time
             , sc.elapsed_enqueue_time
             , sc.startup_time
        --   , sc.dbid
          from   dba_hist_streams_capture sc, dba_hist_snapshot s 
          where sc.capture_name in (select capture_name from dba_capture where purpose like ''GoldenGate%'') 
          and   sc.snap_id=s.snap_id       
          and   s.end_interval_time >= systimestamp-1 
          and   sc.instance_number =s.instance_number
          order by sc.capture_name,s.end_interval_time
  ',
      'HC,CAPTURE,PERF',
      'Capture History for last day',
      null,
      'YES',
      'CAPTURE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'DBA_CAPTURE,DBA_HIST_SNAPSHOT,DBA_HIST_STREAMS_CAPTURE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.3.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,RULES,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'user_rules',
      null,
      null,
      ' select rule_owner,rule_name 
          from dba_rules 
          where (rule_name  not like ''ALERT_QUE%'' and rule_owner != ''SYS'')
        MINUS 
        select rule_owner,rule_name from dba_streams_rules
  ',
      'HC,DATABASE,RULES,CONFIG',
      'Check for Extra Rules in DBA_RULES',
      null,
      'NO',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.3.99',
      '0',
      'DBA_RULES',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.3.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE_APPLY,RULES,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'check_rules',
      null,
      null,
      ' select s.streams_type, s.streams_name, r.rule_owner||''.''||r.rule_name RULE,r.rule_condition 
          from dba_streams_rules s, dba_rules r
          where r.rule_name=s.rule_name and r.rule_owner=s.rule_owner 
          and   dbms_lob.substr(s.rule_condition) != dbms_lob.substr(r.rule_condition)
  ',
      'HC,CAPTURE_APPLY,RULES,CONFIG',
      'Check for Rule_conditions do not match between Streams and Rules',
      null,
      'NO',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.3.99',
      '0',
      'DBA_RULES,DBA_STREAMS_RULES',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.3.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,RULES,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'rule_match_check',
      null,
      null,
      ' select streams_type, streams_name, r.rule_owner||''.''||r.rule_name RULE 
          from dba_streams_rules r
          where source_database is not null 
          and source_database != (select global_name from global_name) and streams_type in (''CAPTURE'')
  ',
      'HC,CAPTURE,RULES,CONFIG',
      'Check for SOURCE DATABASE NAME DOES NOT MATCH FOR CAPTURE  RULES',
      null,
      'NO',
      'CAPTURE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.3.99',
      '0',
      'DBA_STREAMS_RULES,GLOBAL_NAME',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.3.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE_APPLY,RULES,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sch_rules_check',
      null,
      null,
      ' select s.streams_type, s.streams_name, s.rule_owner||''.''||s.rule_name RULE, s.schema_name
             , ac.nvn_name ACTION_CONTEXT_NAME, ac.nvn_value.accessvarchar2() ACTION_CONTEXT_VALUE
          from dba_streams_rules s , dba_rules r, dba_users u, table(r.rule_action_context.actx_list) ac
          where s.schema_name is null and u.username=s.schema_name 
          and r.rule_owner=s.rule_owner 
          and r.rule_name = s.rule_name 
          and ac.nvn_value.accessvarchar2() is null
  ',
      'HC,CAPTURE_APPLY,RULES,CONFIG',
      'Check for SCHEMA RULES FOR NON_EXISTANT SCHEMA',
      null,
      'NO',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.3.99',
      '0',
      'DBA_RULES,DBA_STREAMS_RULES,DBA_USERS,TABLE(R.RULE_ACTION',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'dict_info',
      null,
      null,
      ' select capture_name
             , status
             , purpose
             , checkpoint_retention_time
             , logminer_id
             , capture_type
             , required_checkpoint_scn 
          from dba_capture 
          order by capture_name
  ',
      'HC,CAPTURE,CONFIG',
      'Dictionary Information',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      'DBA_CAPTURE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_q',
      null,
      null,
      ' select capture_name
             , capture#
             , queue_owner||''.''||queue_name queue
             , version
             , first_scn
             , ruleset_owner||''.''||ruleset_name ruleset
             , negative_ruleset_owner||''.''||negative_ruleset_name ruleset2
          from sys.streams$_capture_process order by capture_name
  ',
      'HC,CAPTURE,CONFIG',
      'Capture - Queues and Rules',
      null,
      'NO',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'STREAMS$_CAPTURE_PROCESS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_ap_procs',
      null,
      null,
      ' select apply_name,status,purpose
             , apply_tag,apply_user,message_delivery_mode,error_number,error_message 
          from dba_apply order by apply_name
  ',
      'HC,APPLY,CONFIG',
      'Database Apply processes',
      null,
      'NO',
      'APPLY', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      'DBA_APPLY',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,RULES,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_q',
      null,
      null,
      ' select apply_name,apply#
             , queue_owner||''.''||queue_name queue
             , ruleset_owner||''.''||ruleset_name ruleset 
             , negative_ruleset_owner||''.''||negative_ruleset_name ruleset2
          from sys.streams$_apply_process 
          order by apply_name 
  ',
      'HC,APPLY,RULES,CONFIG',
      'Apply - Queues and Rules',
      null,
      'NO',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'STREAMS$_APPLY_PROCESS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,RULES,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_rules',
      null,
      null,
      ' select streams_name,streams_type,count(*) nbr
           from sys.streams$_rules 
           group by streams_name,streams_type
  ',
      'HC,DATABASE,RULES,CONFIG',
      'Database Rules',
      null,
      'NO',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'STREAMS$_RULES',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,SESSION,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'gg_sess',
      null,
      null,
      ' select inst_id, sid, serial#
             , module
             , action
             , process
             , program
             , status
             , decode(server,''DEDICATED'',''DED'',''SHR'') SVR
             , state
             , event 
             , logon_time
          from gv$session 
          where (module = ''GoldenGate'' or module like ''%tream%'' or module like ''OGG%'') 
          and (action not like ''%EMON%'' and action not like ''%QMON%'' and action not like ''%AQ%'' or action is null) 
          order by inst_id, module, action
  ',
      'HC,DATABASE,SESSION,PERF',
      'GoldenGate Sessions',
      null,
      'YES',
      'NONE', 
      'GoldenGate related Database Sessions.',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      'GV$SESSION',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,DOWNSTREAM,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_stby_logs',
      null,
      null,
      ' select * from v$standby_log order by first_change#,thread#,sequence#
  ',
      'HC,DATABASE,DOWNSTREAM,CONFIG',
      'Standby Redo Logs',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'V$STANDBY_LOG',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,LOGMINER,INTERNAL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'logmnr_dbmap',
      null,
      null,
      ' select global_name,logmnr_uid,flags,''MAP'' SRC 
          from system.logmnrc_dbname_uid_map
        union
        select s.global_db_name,u.logmnr_uid,null,''UID$'' SRC 
          from system.logmnr_uid$ u , system.logmnr_session$ s
          where u.session#=s.session# 
        order by 2
  ',
      'HC,CAPTURE,LOGMINER,INTERNAL',
      'LogMiner Dictionary: Logminer Database Map',
      null,
      'YES',
      'CAPTURE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '1',
      'LOGMNR_SESSION$,LOGMNR_UID$,LOGMNRC_DBNAME_UID_MAP',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,LOGMINER,INTERNAL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'logmnr_uid',
      null,
      null,
      ' select * from system.logmnr_uid$  order by 1, 2
  ',
      'HC,CAPTURE,LOGMINER,INTERNAL',
      'LogMiner Dictionary: Logmnr_uid$ Table',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      'LOGMNR_UID$',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,LOGMINER,INTERNAL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'logmnr_sess',
      null,
      null,
      ' select * from system.logmnr_session$
  ',
      'HC,CAPTURE,LOGMINER,INTERNAL',
      'LogMiner Dictionary: Logmnr_session$ Table',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      'LOGMNR_SESSION$',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,LOGMINER,INTERNAL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'logmnr_load',
      null,
      null,
      ' select l.*,s.session_name 
        from gv$logmnr_session s, gv$logmnr_dictionary_load l 
        where s.session_id = l.session_id 
        order by 1,2,3
  ',
      'HC,CAPTURE,LOGMINER,INTERNAL',
      'LogMiner Dictionary: Dictionary Loads',
      null,
      'YES',
      'CAPTURE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'GV$LOGMNR_DICTIONARY_LOAD',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,LOGMINER,INTERNAL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'logmnr_params',
      null,
      null,
      ' SELECT session#, type, scn, name, value
          FROM SYSTEM.logmnr_parameter$
          ORDER BY session#, name
  ',
      'HC,CAPTURE,LOGMINER,INTERNAL',
      'Logminer Parameters',
      null,
      'YES',
      'CAPTURE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'LOGMNR_PARAMETER$',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,LOGMINER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'logmnr_stats',
      null,
      null,
      ' select c.capture_name, name, value 
          from gv$goldengate_capture c, gv$logmnr_stats l
          where c.logminer_id = l.session_id 
          order by capture_name,name
  ',
      'HC,CAPTURE,LOGMINER,PERF',
      'Logminer Statistics',
      null,
      'YES',
      'CAPTURE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'GV$GOLDENGATE_CAPTURE,GV$LOGMNR_STATS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,INTERNAL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_logmnr_stats',
      null,
      null,
      ' select c.capture_name, x.name,x .value 
          from x$krvxsv x, dba_capture c 
          where value != ''0'' and c.logminer_id=x.session_id 
          order by capture_name, name
  ',
      'HC,DATABASE,INTERNAL',
      'Internal:',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,LOGMINER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'logmnr_sesstat',
      null,
      null,
      ' select * from  gv$logmnr_session 
          order by session_name
  ',
      'HC,CAPTURE,LOGMINER,PERF',
      'Logminer Session statistics',
      null,
      'YES',
      'CAPTURE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,LOGMINER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'logmnr_sesstat_specific',
      null,
      null,
      ' select sysdate, session_name, available_txn, delivered_txn
             , available_txn-delivered_txn as difference
             , builder_work_size, prepared_work_size
             , used_memory_size , max_memory_size
          FROM v$logmnr_session 
          order by session_name
  ',
      'HC,CAPTURE,LOGMINER,PERF',
      'Specific Logminer Session statistics',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,LOGMINER,INTERNAL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'logmnr_gtlo',
      null,
      null,
      ' select logmnr_uid, count(*) from system.logmnrc_gtlo group by logmnr_uid
  ',
      'HC,CAPTURE,LOGMINER,INTERNAL',
      'LogMiner Dictionary: Logminer Cache Objects',
      null,
      'YES',
      'CAPTURE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      'LOGMNRC_GTLO',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,LOGMINER,INTERNAL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'logmnr_gtcs',
      null,
      null,
      ' select logmnr_uid, obj#, objv#, intcol#
          from system.logmnrc_gtcs
          group by logmnr_uid, obj#, objv#, intcol#
          having count(1) > 1
          order by 1,2,3,4
  ',
      'HC,CAPTURE,LOGMINER,INTERNAL',
      'LogMiner Dictionary: Logminer Cache Objects - Details',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      'LOGMNRC_GTCS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,MEMORY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sp_db',
      null,
      null,
      ' select inst_id
             , dbms_goldengate_hcadm_int.display_bytes(total_memory_allocated) as "Total Memory Allocated"
             , dbms_goldengate_hcadm_int.display_bytes(current_size)           as "Current Size"
             , decode( current_size
                     , 0
                     , to_number(null)
                     , dbms_goldengate_hcadm_int.display_number(100*total_memory_allocated/current_size)
                     )                                 as "Streams Pool [Percentage]"
             , dbms_goldengate_hcadm_int.display_bytes(sga_target_value)         as "SGA Target Value"
             , shrink_phase
             , advice_disabled
         from gv$streams_pool_statistics
         order by inst_id
  ',
      'HC,DATABASE,MEMORY,PERF',
      'Streams Pool Statistics by Instance',
      null,
      'YES',
      'NONE', 
      'Information about the current Streams Pool usage Percentage',
      '- Check the Total memory allocated to the Streams pool. It should always be less than the current size of the Streams pools',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      'GV$STREAMS_POOL_STATISTICS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.3.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,MEMORY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sp_components',
      null,
      null,
      ' select inst_id,process_type,process_name
             , ltrim(dbms_goldengate_hcadm_int.display_bytes(max_sga_size)) MAX_SGA_SIZE 
             , dbms_goldengate_hcadm_int.display_bytes(sga_allocated) SGA_ALLOCATED
             , CASE WHEN max_sga_size = ''not set'' THEN ''n/a'' 
               ELSE  to_char(dbms_goldengate_hcadm_int.display_number(100*sga_allocated/max_sga_size))  
               END PCT_MAX_SGA 
             , dbms_goldengate_hcadm_int.display_bytes(sga_used) sga_used
             , dbms_goldengate_hcadm_int.display_number(100*sga_used/sga_allocated) PCT_SGA_MEMORY
             , dbms_goldengate_hcadm_int.display_bytes(streams_pool_size) MIN_STREAMS_POOL_SIZE
             , sp_derrived derrived_from
             , dbms_goldengate_hcadm_int.display_number(100*sga_allocated/streams_pool_size) PCT_STREAMS_POOL 
  from ( 
	  select c.inst_id
		 ,''Extract'' process_type
		 , c.capture_name process_name
		 , case cp.value when ''INFINITE'' THEN ''not set''
						 else to_char(cp.value*1024*1024)
						 end max_sga_size
		 , c.sga_used
		 , c.sga_allocated
		 , case cp.value when ''INFINITE'' THEN ''no MAX_SGA_SIZE set''
						 else to_char(round(100*c.sga_allocated/cp.value/(1024*1024),2))
						 end "PAM from MAX_SGA_SIZE"
		  , CASE WHEN p1.value = 0             -- missing streams_pool_size
			  THEN CASE WHEN p2.value = 0      -- missing sga_target
				THEN CASE WHEN p3.value = 0    -- missing memory_target
				  THEN to_char((select 0.1*bytes from v$sgainfo where name =''Shared Pool Size''))      
				  ELSE to_char((select 0.1*bytes from v$sgainfo where name =''Maximum SGA Size''))
				  END
				ELSE to_char(p2.value) 
				END
			   ELSE to_char(p1.value)    
			 END  streams_pool_size
		  , CASE WHEN p1.value = 0        
			  THEN CASE WHEN p2.value = 0     
				THEN CASE WHEN p3.value = 0
				  THEN ''__sga_target''          
				  ELSE ''memory_target'' 
				  END
				ELSE ''sga_target''
				END
			   ELSE ''streams_pool_size'' 
			 END  sp_derrived
	  from gv$goldengate_capture c, dba_capture_parameters cp
		 , gv$parameter p1, gv$parameter p2, gv$parameter p3
	  where c.capture_name = cp.capture_name
	  and c.inst_id = p1.inst_id
	  and c.inst_id = p2.inst_id
	  and c.inst_id = p3.inst_id
	  and p1.name = ''streams_pool_size''
	  and p2.name = ''sga_target''
	  and p3.name = ''memory_target''
	  and cp.parameter =''MAX_SGA_SIZE''
	  )
	  order by inst_id,process_type,process_name
  ',
      'HC,CAPTURE,MEMORY,PERF',
      'Streams Pool Usage for Extract',
      null,
      'YES',
      'CAPTURE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.3.99',
      '0',
      'GV$GOLDENGATE_CAPTURE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,LOGMINER,MEMORY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sp_logmnr',
      null,
      null,
      ' select session_name
              ,dbms_goldengate_hcadm_int.display_bytes(USED_MEMORY_SIZE) as "Used"
              ,dbms_goldengate_hcadm_int.display_bytes(MAX_MEMORY_SIZE)  as "Max"
              ,dbms_goldengate_hcadm_int.display_number((USED_MEMORY_SIZE/MAX_MEMORY_SIZE)*100) as "Pct LogMiner Memory Used"
              ,dbms_goldengate_hcadm_int.display_number(decode(s.current_size,0,to_number(null),(l.max_memory_size/s.current_size)*100)) as "Pct Streams Pool" 
           from gv$logmnr_session l, gv$streams_pool_statistics s 
           where l.inst_id=s.inst_id 
           order by session_name
  ',
      'HC,CAPTURE,LOGMINER,MEMORY,PERF',
      'Memory Used by Logminer Sessions',
      null,
      'YES',
      'CAPTURE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'GV$LOGMNR_SESSION,GV$STREAMS_POOL_STATISTICS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,MEMORY,INTERNAL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'intl_sp_mem',
      null,
      null,
      ' select * from x$knlasg
  ',
      'HC,DATABASE,MEMORY,INTERNAL',
      'Streams Pool Memory Allocation Information',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,INTERNAL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'intl_cache_sum',
      null,
      null,
      ' select CAPNAME_KNSTCAPCACHE as capture
              , CACHENAME_KNSTCAPCACHE as cache
              , NUM_LCRS_KNSTCAPCACHE as lcrs
              , NUM_COLS_KNSTCAPCACHE as cols
              , dbms_goldengate_hcadm_int.display_bytes(TOTAL_MEM_KNSTCAPCACHE) as mem 
          from x$knstcapcache order by 1,2
  ',
      'HC,DATABASE,INTERNAL',
      'Internal: Cache Statistics Summary',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,INTERNAL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'intl_cache',
      null,
      null,
      ' select * from x$knstcapcache
  ',
      'HC,DATABASE,INTERNAL',
      'Internal: Cache Statistics',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,INTERNAL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'intl_lcr_cache',
      null,
      null,
      ' select * from x$kngfl order by streams_name_kngfl,colcount_kngfl
  ',
      'HC,DATABASE,INTERNAL',
      'Internal: LCR Cache Information',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,INTERNAL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'intl_lcr_ext',
      null,
      null,
      ' select * from x$kngfle order by streams_name_kngfl,colcount_kngfl
  ',
      'HC,DATABASE,INTERNAL',
      'Internal: External LCRs',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,QUEUES,INTERNAL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'intl_q_fc',
      null,
      null,
      ' select * from x$kwqbpmt
  ',
      'HC,DATABASE,QUEUES,INTERNAL',
      'Queue Memory and Flow Control Values',
      null,
      'YES',
      'NONE', 
      'Streams Pool Information used for Support only',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,MEMORY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'pga_stat',
      null,
      null,
      ' select a.inst_id, a.name, a.xStatVal value  
          from
            (select 2 x,inst_id, name, value, dbms_goldengate_hcadm_int.display_bytes(value) xStatVal
               from gv$pgastat
               where unit = ''bytes''
             union
             select 1 x,inst_id, name, value,LPAD(value,6,'' '')||'' %'' xStatVal
               from gv$pgastat
               where unit = ''percent''
            ) a
          order by inst_id,a.x,a.value desc 
  ',
      'HC,DATABASE,MEMORY,PERF',
      'Database Memory - PGA',
      null,
      'YES',
      'NONE', 
      'Information about the PGA memory usage statistics and its statistics. <BR>Cumulative values are accumulated since instance startup.',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      'GV$PGASTAT',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_jobs1',
      null,
      null,
      ' select instance,job,what,log_user,priv_user,schema_user
             , total_time,broken,interval,failures
            , last_date,last_sec,this_date,this_sec,next_date,next_sec     
          from dba_jobs
   ',
      'HC,DATABASE,CONFIG',
      'Database Jobs',
      null,
      'NO',
      'DATABASE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_jobs2',
      null,
      null,
      ' select owner,job_name,repeat_interval,enabled 
          from dba_scheduler_jobs 
          where repeat_interval =''FREQ=SECONDLY'' 
          and enabled=''TRUE''
  ',
      'HC,DATABASE,CONFIG',
      'Scheduled Jobs run every Second',
      null,
      'NO',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_jobs3',
      null,
      null,
      ' select OWNER, JOB_NAME, JOB_SUBNAME, JOB_STYLE, JOB_CREATOR
             , PROGRAM_OWNER, PROGRAM_NAME, JOB_TYPE, JOB_ACTION
             , NUMBER_OF_ARGUMENTS, SCHEDULE_OWNER,SCHEDULE_NAME, SCHEDULE_TYPE
             , START_DATE,REPEAT_INTERVAL,END_DATE, JOB_CLASS
             , ENABLED, AUTO_DROP, RESTARTABLE, STATE, JOB_PRIORITY
             , RUN_COUNT, MAX_RUNS,FAILURE_COUNT, MAX_FAILURES, RETRY_COUNT
             , LAST_START_DATE, LAST_RUN_DURATION, NEXT_RUN_DATE, SCHEDULE_LIMIT, MAX_RUN_DURATION
             , LOGGING_LEVEL, STOP_ON_WINDOW_CLOSE, INSTANCE_STICKINESS, RAISE_EVENTS, SYSTEM
             , JOB_WEIGHT, SOURCE, NUMBER_OF_DESTINATIONS, DESTINATION_OWNER, DESTINATION
             , CREDENTIAL_OWNER, CREDENTIAL_NAME, INSTANCE_ID, DEFERRED_DROP, ALLOW_RUNS_IN_RESTRICTED_MODE
          from dba_scheduler_jobs
  ',
      'HC,DATABASE,CONFIG',
      'Database Scheduler Jobs',
      null,
      'NO',
      'DATABASE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'long_txns',
      null,
      null,
      ' select t.inst_id, sid||'',''||serial# sid
             , xidusn||''.''||xidslot||''.''||xidsqn xid
             , dbms_goldengate_hcadm_int.display_date((sysdate - start_date ) * 1440) runlength 
             , terminal, start_scn, program 
          from gv$transaction t, gv$session s 
          where t.addr=s.taddr 
          and (sysdate - start_date) * 1440 > 20
          order by runlength desc
  ',
      'HC,DATABASE,PERF',
      'Current Long Running Transactions',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      'GV$SESSION,GV$TRANSACTION',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,ALERTS,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_alert_gg',
      null,
      null,
      ' select message_Type
             , creation_time
             , reason,suggested_action
             , module_id
             , object_type
             , host_id
             , instance_name||''   ( ''||instance_number||'' )'' Instance
             , resolution,time_suggested
          from dba_alert_history 
          where message_group =''GoldenGate'' 
          and creation_time >= sysdate -10 
          and rownum < 11
          order by creation_time desc
  ',
      'HC,DATABASE,ALERTS,CONFIG',
      'Most recent GoldenGate alerts(max=10) occuring within last 10 days',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'DBA_ALERT_HISTORY',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'hc_stats',
      null,
      null,
      ' select ''Oracle GoldenGate Integrated Extract/Replicat Health Check (10) for ''||global_name||'' on Instance=''||instance_name||'' generated: ''||sysdate o  
          from global_name, v$instance
  ',
      'HC,CAPTURE,CONFIG',
      'Statistics',
      null,
      'YES',
      'CAPTURE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'GLOBAL_NAME,V$INSTANCE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,QUEUES,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'lcr_q',
      null,
      null,
      ' SELECT inst_id
             , queue_schema||''.''||queue_name Queue
             , startup_time
             , num_msgs "Message Count"
             , cnum_msgs "Total Messages" 
          FROM  gv$buffered_queues 
          order by inst_id, queue_schema||''.''||queue_name
  ',
      'HC,DATABASE,QUEUES,PERF',
      'LCRs in Buffer Queue',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'GV$BUFFERED_QUEUES',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_stats',
      null,
      null,
      ' SELECT sysdate "Current Time"
             , c.inst_id
             , c.SID
             , c.SERIAL#
             , c.CAPTURE_NAME
             , SUBSTR(s.PROGRAM,INSTR(S.PROGRAM,''('')+1,4) PROCESS_NAME
             , c.state_changed_time
             , c.STATE
             , c.TOTAL_MESSAGES_CAPTURED
             , c.TOTAL_MESSAGES_ENQUEUED
             , c.total_messages_sent
             , C.STARTUP_TIME
          FROM gV$GOLDENGATE_CAPTURE c, gV$SESSION s
          WHERE c.SID = s.SID 
          AND   c.SERIAL# = s.SERIAL#
          AND   c.inst_id = s.inst_id   
          order by c.inst_id, c.capture_name
  ',
      'HC,CAPTURE,PERF',
      'GoldenGate Capture Statistics',
      null,
      'YES',
      'CAPTURE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'GV$GOLDENGATE_CAPTURE,GV$SESSION',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.0.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_msgs',
      null,
      null,
      ' SELECT SYSDATE "Current Time"
             , inst_id
             , capture_name
             , capture_time "Capture Process TS"
             , capture_message_number
             , capture_message_create_time
             , enqueue_time
             , enqueue_message_number
             , enqueue_message_create_time
             , available_message_number
             , available_message_create_time
             , session_restart_scn
          FROM gV$GOLDENGATE_CAPTURE  
          order by inst_id, capture_name
  ',
      'HC,CAPTURE,PERF',
      'Capture Runtime Information',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.0.99',
      '0',
      'GV$GOLDENGATE_CAPTURE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_txn_logmnr',
      null,
      null,
      ' SELECT c.capture_name
             , l.processed_scn
             , c.available_message_number
          FROM gV$LOGMNR_SESSION l, gv$GOLDENGATE_CAPTURE c
          WHERE c.logminer_id = l.session_id 
          order by c.inst_id, c.capture_name
  ',
      'HC,CAPTURE,PERF',
      'Capture Transaction Processing',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'GV$LOGMNR_SESSION,GV$GOLDENGATE_CAPTURE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_eval',
      null,
      null,
      ' SELECT CAPTURE_NAME
             , TOTAL_PREFILTER_DISCARDED
             , TOTAL_PREFILTER_KEPT
             , TOTAL_PREFILTER_EVALUATIONS
             , (TOTAL_PREFILTER_EVALUATIONS - (TOTAL_PREFILTER_KEPT + TOTAL_PREFILTER_DISCARDED)) UNDECIDED
             , TOTAL_FULL_EVALUATIONS
          FROM gV$GOLDENGATE_CAPTURE
          order by capture_name
  ',
      'HC,CAPTURE,PERF',
      'Capture Filtering and Evaluation',
      null,
      'YES',
      'NONE', 
      'Information used for Support only',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'GV$GOLDENGATE_CAPTURE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_ela',
      null,
      null,
      ' SELECT CAPTURE_NAME
             , ELAPSED_CAPTURE_TIME elapsed_capture
             , elapsed_rule_time elapsed_rule      
             , ELAPSED_ENQUEUE_TIME 
             , ELAPSED_LCR_TIME elapsed_lcr
             , ELAPSED_REDO_WAIT_TIME elapsed_redo 
             , ELAPSED_PAUSE_TIME elapsed_pause      
             , total_messages_created
             , total_messages_enqueued
          from gv$GOLDENGATE_capture 
          order by capture_name
  ',
      'HC,CAPTURE,PERF',
      'Capture Runtime (2)',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,LOGMINER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_logmnr',
      null,
      null,
      ' select capture_name,capture#,sid,serial#,state,logminer_id 
          from gv$goldengate_capture',
      'HC,CAPTURE,LOGMINER,PERF',
      'Capture Runtime Information',
      null,
      'YES',
      'CAPTURE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'GV$GOLDENGATE_CAPTURE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,LOGMINER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_logmnr_comp',
      null,
      null,
      ' select replace(substr(program,instr(program,''('')+1),'')'','''') program,action,sid,serial#,status
          from gv$session 
          where module is not null and action like ''%Logminer%''
          order by action desc 
  ',
      'HC,CAPTURE,LOGMINER,PERF',
      'Capture Runtime Information of subcomponents',
      null,
      'YES',
      'CAPTURE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'gv$session',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,LOGMINER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'logmnr_stats_specific',
      null,
      null,
      ' select c.capture_name, name, value 
          from gv$goldengate_capture c, gv$logmnr_stats l
          where c.logminer_id = l.session_id 
          and c.inst_id = l.inst_id
          and name in (''bytes paged out'', ''pageout time (seconds)''
                      , ''bytes of redo mined'', ''bytes checkpointed''
                      , ''checkpoint time (seconds)'', ''resume from low memory''
                      , ''distinct txns in queue''
                      )
          order by c.capture_name, name
  ',
      'HC,CAPTURE,LOGMINER,PERF',
      'Capture Processing Information',
      null,
      'YES',
      'CAPTURE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'GV$GOLDENGATE_CAPTURE,GV$LOGMNR_STATS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,LOGMINER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'logmnr_chunks',
      null,
      null,
      ' select sysdate, session_name, available_txn, delivered_txn
             , available_txn-delivered_txn as DIFFERENCE
             , builder_work_size, prepared_work_size
             , used_memory_size , max_memory_size
          FROM v$logmnr_session order by session_name
  ',
      'HC,CAPTURE,LOGMINER,PERF',
      'Logminer Session Stats for logminer chunks available to be consumed and Memory',
      null,
      'YES',
      'CAPTURE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'V$LOGMNR_SESSION',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.3.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_server_stats',
      null,
      null,
      ' select inst_id,sid,serial#,spid,server_name
             , startup_time,state,total_messages_sent
             , last_sent_message_number,last_sent_message_create_time
             , send_time, elapsed_send_time
             , dbms_goldengate_hcadm_int.display_bytes(bytes_sent) bytes_sent 
          from gv$xstream_outbound_server 
          where committed_data_only=''NO'' 
          order by server_name
  ',
      'HC,CAPTURE,PERF',
      'Extract Capture Server Statistics',
      null,
      'YES',
      'CAPTURE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.3.99',
      '0',
      'GV$XSTREAM_OUTBOUND_SERVER',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.3.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ogg_out_pt',
      null,
      null,
      ' select server_name
             , source_database
             , processed_low_position
             , processed_low_time
             , oldest_position
          from dba_xstream_outbound_progress 
          order by server_name
  ',
      'HC,CAPTURE,PERF',
      'Outbound Progress Table',
      null,
      'YES',
      'APPLY', 
      'Information about the progress made by all XStream outbound servers in the database',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.3.99',
      '0',
      'DBA_XSTREAM_OUTBOUND_PROGRESS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_progress',
      null,
      null,
      ' select sysdate "Current Time"
             , ap.APPLY_NAME
        --   , ap.SOURCE_DATABASE
             , (SYSDATE - ap.APPLIED_MESSAGE_CREATE_TIME)*86400 "Apply_Lag [secs]"
             , ap.APPLIED_MESSAGE_CREATE_TIME
             , ap.APPLIED_MESSAGE_NUMBER
             , ap.OLDEST_MESSAGE_NUMBER
             , ap.OLDEST_TRANSACTION_ID
             , ap.APPLY_TIME 
          from dba_apply_progress ap, dba_apply a 
          where a.purpose like ''GoldenGate%'' 
	  and ap.apply_name=a.apply_name 
	  and a.purpose = ''GoldenGate Apply'' 
          order by ap.apply_name
  ',
      'HC,APPLY,PERF',
      'Apply Progress',
      null,
      'YES',
      'APPLY', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.4.99',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,QUEUES,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'buf_pubs',
      null,
      null,
      ' select * from gv$buffered_publishers
 ',
      'HC,DATABASE,QUEUES,PERF',
      'Buffered Publishers',
      null,
      'NO',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'GV$BUFFERED_PUBLISHERS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.0.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_txn_sum',
      null,
      null,
      ' select inst_id,  component_name
             , count(*)                      "Open Transactions"
             , sum(cumulative_message_count) "Total LCRs" 
          from gv$goldengate_transaction 
          where component_type=''CAPTURE'' 
          group by inst_id, component_name
  ',
      'HC,CAPTURE,PERF',
      'Open GoldenGate Capture Transactions',
      null,
      'YES',
      'CAPTURE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.0.99',
      '0',
      'GV$GOLDENGATE_TRANSACTION',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.0.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_txn_detail',
      null,
      null,
      ' select inst_id
              , component_name
              , transaction_id
              , cumulative_message_count
              , first_message_time
              , first_message_position
          from gv$goldengate_transaction 
          where component_type=''CAPTURE'' 
          order by component_name,first_message_number
  ',
      'HC,CAPTURE,PERF',
      'Open GoldenGate Capture Transactions - Details',
      null,
      'YES',
      'CAPTURE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.0.99',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,QUEUES,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'buf_subs',
      null,
      null,
      ' select * from gv$buffered_subscribers order by subscriber_name
  ',
      'HC,DATABASE,QUEUES,PERF',
      'Buffered Subscribers',
      null,
      'NO',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'GV$BUFFERED_SUBSCRIBERS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.0.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE_APPLY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'gg_track_lcr',
      null,
      null,
      ' select inst_id
             , component_name, component_type, action, action_details 
             , xid, object_owner||''.''||object_name object, command_type
             , message_creation_time, message_number,message_position
             , timestamp     
          from gv$goldengate_message_tracking
          order by inst_id, tracking_label, timestamp 
  ',
      'HC,CAPTURE_APPLY,PERF',
      'GoldenGate LCR Tracking',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '11.2.0.0.99',
      '0',
      'GV$GOLDENGATE_MESSAGE_TRACKING',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,RULES,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ruleset_stats',
      null,
      null,
      ' select * from gv$rule_set
  ',
      'HC,DATABASE,RULES,PERF',
      'RuleSet Statistics',
      null,
      'NO',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'GV$RULE_SET',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,RULES,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'rule_stats',
      null,
      null,
      ' select * from gv$rule
  ',
      'HC,DATABASE,RULES,PERF',
      'Rule Statistics',
      null,
      'NO',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '0',
      'GV$RULE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,L_READER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_reader_ash',
      null,
      null,
      ' SELECT c.inst_id, c.capture_name || '' - reader'' as logminer_reader_name
             , ash_capture.event_count
             , ash_total.total_count
             , round(ash_capture.event_count*100/NULLIF(ash_total.total_count,0),2) as Percentage
             , ''YES'' busy
             , nvl(ash_capture.event,''on CPU or wait on CPU'') event
          FROM (SELECT INST_ID, SESSION_ID, SESSION_SERIAL#, EVENT, COUNT(sample_time) AS EVENT_COUNT
                  FROM  gv$active_session_history
                  WHERE sample_time > sysdate - dbms_goldengate_hcadm_int.get_current(''minutes_to_analyze'')/24/60
                  GROUP BY inst_id, session_id, session_serial#, event
               ) ash_capture
             , (SELECT INST_ID, COUNT(DISTINCT sample_time) AS TOTAL_COUNT
                 FROM  gv$active_session_history
                 WHERE sample_time > sysdate - dbms_goldengate_hcadm_int.get_current(''minutes_to_analyze'')/24/60
                 group by inst_id
               ) ash_total
              , gv$logmnr_process lp
              , gv$goldengate_capture c
          WHERE lp.SID        = ash_capture.SESSION_ID
          AND   lp.serial#    = ash_capture.SESSION_SERIAL#
          AND   lp.role       = ''reader''
          AND   lp.session_id = c.logminer_id
		  AND   c.inst_id = ash_capture.inst_id
		  AND   c.inst_id = ash_total.inst_id
		  AND   c.inst_id = lp.inst_id
          ORDER BY c.inst_id, logminer_reader_name, Percentage 
  ',
      'HC,CAPTURE,L_READER,PERF',
      'Logminer Reader Processes',
      null,
      'YES',
      'CAPTURE', 
      'Ash Report Information about LogMiner Reader Session',
      '- Based on the ASH Information, general Performance Tuning attempts might be derived',
      '11.2.0.0.0',
      '',
      '0',
      'ASH_CAPTURE,ASH_TOTAL,V$ACTIVE_SESSION_HISTORY,V$GOLDENGATE_CAPTURE,V$LOGMNR_PROCESS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,L_PREPARER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_preparer_ash',
      null,
      null,
      ' SELECT c.inst_id, c.capture_name || '' - preparer'' || lp.spid as logminer_preparer_name
              , ash_capture.event_count, ash_total.total_count
              , round(ash_capture.event_count*100/NULLIF(ash_total.total_count,0),2) as Percentage 
              , ''YES'' busy
              , nvl(ash_capture.event,''on CPU or wait on CPU'') event
          FROM (SELECT INST_ID, SESSION_ID, SESSION_SERIAL#, EVENT, COUNT(sample_time) AS EVENT_COUNT
                  FROM  gv$active_session_history
                  WHERE sample_time > sysdate - dbms_goldengate_hcadm_int.get_current(''minutes_to_analyze'')/24/60
                  GROUP BY inst_id, session_id, session_serial#, event
               ) ash_capture
              , (SELECT INST_ID, COUNT(DISTINCT sample_time) AS TOTAL_COUNT
                   FROM  gv$active_session_history
                   WHERE sample_time > sysdate - dbms_goldengate_hcadm_int.get_current(''minutes_to_analyze'')/24/60
                   GROUP BY inst_id
               ) ash_total
              , gv$logmnr_process lp
              , gv$goldengate_capture c
          WHERE lp.SID        = ash_capture.SESSION_ID
          AND   lp.serial#    = ash_capture.SESSION_SERIAL#
          AND   lp.role       = ''preparer''
          AND   lp.session_id = c.logminer_id
          AND   c.inst_id = ash_capture.inst_id
          AND   c.inst_id = ash_total.inst_id
          AND   c.inst_id = lp.inst_id
          ORDER BY logminer_preparer_name, Percentage 
  ',
      'HC,CAPTURE,L_PREPARER,PERF',
      'Logminer Preparer Processes',
      null,
      'YES',
      'CAPTURE', 
      'Ash Report Information about LogMiner Preparers Session',
      '- Based on the ASH Information, general Performance Tuning attempts might be derived',
      '11.2.0.0.0',
      '',
      '0',
      'ASH_CAPTURE,ASH_TOTAL,V$ACTIVE_SESSION_HISTORY,V$GOLDENGATE_CAPTURE,V$LOGMNR_PROCESS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,L_BUILDER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_builder_ash',
      null,
      null,
      ' SELECT c.inst_id, c.capture_name || '' - builder'' as logminer_builder_name
             , ash_capture.event_count
             , ash_total.total_count
             , round(ash_capture.event_count*100/ash_total.total_count,2) as Percentage 
             , ''YES'' busy
             , nvl(ash_capture.event,''on CPU or wait on CPU'') event
          FROM (SELECT INST_ID, SESSION_ID, SESSION_SERIAL#, EVENT, COUNT(sample_time) AS EVENT_COUNT
                  FROM  gv$active_session_history
                  WHERE sample_time > sysdate - dbms_goldengate_hcadm_int.get_current(''minutes_to_analyze'')/24/60
                  GROUP BY inst_id, session_id, session_serial#, event
               ) ash_capture
             , (SELECT INST_ID, COUNT(DISTINCT sample_time) AS TOTAL_COUNT
                 FROM  gv$active_session_history
                 WHERE sample_time > sysdate - dbms_goldengate_hcadm_int.get_current(''minutes_to_analyze'')/24/60
                 GROUP BY INST_ID
               ) ash_total
             , gv$logmnr_process lp
             , gv$goldengate_capture c
          WHERE lp.SID        = ash_capture.SESSION_ID
          AND   lp.serial#    = ash_capture.SESSION_SERIAL#
          AND   lp.role       = ''builder''
          AND   lp.session_id = c.logminer_id
	  AND   c.inst_id = ash_capture.inst_id
	  AND   c.inst_id = ash_total.inst_id
	  AND   c.inst_id = lp.inst_id
          ORDER BY logminer_builder_name, Percentage 
  ',
      'HC,CAPTURE,L_BUILDER,PERF',
      'Logminer Builder Processes',
      null,
      'YES',
      'CAPTURE', 
      'Ash Report Information about LogMiner Builder Session',
      '- Based on the ASH Information, general Performance Tuning attempts might be derived',
      '11.2.0.0.0',
      '',
      '0',
      'ASH_CAPTURE,ASH_TOTAL,V$ACTIVE_SESSION_HISTORY,V$GOLDENGATE_CAPTURE,V$LOGMNR_PROCESS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,ASH,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_ash',
      null,
      null,
      ' SELECT c.inst_id, c.capture_name
             , ash_capture.event_count
             , ash_total.total_count
             , dbms_goldengate_hcadm_int.display_number(ash_capture.event_count*100/ash_total.total_count) as Percentage 
             , DECODE(ash_capture.event
                     ,''REPL Capture: subscribers to catch up'', ''NO''
                     ,''REPL Capture/Apply: memory'', ''NO''
                     ,''REPL Capture: archive log'', ''NO''
                     ,''YES'') busy
             , nvl(ash_capture.event,''on CPU or wait on CPU'') event
          FROM (SELECT INST_ID, SESSION_ID, SESSION_SERIAL#, EVENT, COUNT(sample_time) AS EVENT_COUNT
                 FROM  gv$active_session_history
                 WHERE sample_time > sysdate - dbms_goldengate_hcadm_int.get_current(''minutes_to_analyze'')/24/60
                 GROUP BY inst_id, session_id, session_serial#, event
               ) ash_capture
              , (SELECT INST_ID, COUNT(DISTINCT sample_time) AS TOTAL_COUNT
                  FROM  gv$active_session_history
                  WHERE sample_time > sysdate - dbms_goldengate_hcadm_int.get_current(''minutes_to_analyze'')/24/60
                  group by inst_id
                 ) ash_total
              , gv$goldengate_capture c
          WHERE c.SID     = ash_capture.SESSION_ID
          AND   c.serial# = ash_capture.SESSION_SERIAL#
          AND   c.inst_id = ash_capture.inst_id
          AND   c.inst_id = ash_total.inst_id
          ORDER BY capture_name, Percentage 
  ',
      'HC,CAPTURE,ASH,PERF',
      'Capture Processes',
      null,
      'YES',
      'CAPTURE', 
      'Ash Report Information about Capture Session',
      '- Based on the ASH Information, general Performance Tuning attempts might be derived',
      '11.2.0.0.0',
      '',
      '0',
      'DBA_CAPTURE, V$GOLDENGATE_CAPTURE, V$ACTIVE_SESSION_HISTORY',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ogg_out_srvr_ash',
      null,
      null,
      ' SELECT a.inst_id, a.server_name
             , ash.event_count
             , ash_total.total_count
             , dbms_goldengate_hcadm_int.display_number(ash.event_count*100/ash_total.total_count) as Percentage 
             , ''YES'' busy
             , nvl(ash.event,''on CPU or wait on CPU'') event
          FROM (SELECT INST_ID, SESSION_ID, SESSION_SERIAL#, EVENT, COUNT(sample_time) AS EVENT_COUNT
                 FROM  gv$active_session_history
                 WHERE sample_time > sysdate - dbms_goldengate_hcadm_int.get_current(''minutes_to_analyze'')/24/60
                 GROUP BY inst_id, session_id, session_serial#, event
               ) ash
             , (SELECT inst_id, COUNT(DISTINCT sample_time) AS TOTAL_COUNT
                  FROM  gv$active_session_history
                  WHERE sample_time > sysdate - dbms_goldengate_hcadm_int.get_current(''minutes_to_analyze'')/24/60
                  group by inst_id
               ) ash_total
             , gv$xstream_outbound_server a
          WHERE a.sid     = ash.SESSION_ID
          AND   a.serial# = ash.SESSION_SERIAL#
          AND   a.inst_id   = ash.inst_id
          AND   a.inst_id   = ash_total.inst_id
          ORDER BY a.inst_id, server_name, Percentage 
  ',
      'HC,CAPTURE,PERF',
      'Outbound Server Processes',
      null,
      'YES',
      'NONE', 
      'Ash Report Information about Outbound Server Process',
      '- Based on the ASH Information, general Performance Tuning attempts might be derived',
      '11.2.0.0.0',
      '',
      '0',
      'ASH_TOTAL,V$ACTIVE_SESSION_HISTORY,V$XSTREAM_OUTBOUND_SERVER',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_summary',
      null,
      null,
      ' select sysdate Current_time
             , ib.replicat_name
             , ib.server_name
             , ib.apply_user
             , ib.status
             , o.created registered
             , o.last_ddl_time
             , a.apply_tag
             , r.state ReceiverState
             , g.state
             , g.active_server_count
             , g.unassigned_complete_txns
             , g.lwm_message_create_time lwm
             , NVL(Round((g.hwm_message_create_time-g.lwm_message_create_time)*24*3600,2),0) SourceTSrange
             , g.lwm_time apply_time
             , NVL(Round((g.hwm_time-g.lwm_time)*24*3600,2),0) ApplyTSrange
             , g.startup_time
             , g.inst_id
          from dba_goldengate_inbound ib, dba_objects o, dba_apply a, gv$gg_apply_coordinator g, gv$gg_apply_receiver r
          where ib.server_name = g.apply_name
          and   ib.status      = ''ATTACHED'' 
          and   ib.server_name = o.object_name
          and   ib.server_name = g.apply_name
          and   ib.server_name = r.apply_name
          and   ib.server_name = a.apply_name
        union all
        select sysdate Current_time
             , ib.replicat_name
             , ib.server_name
             , ib.apply_user
             , ib.status
             , o.created registered
             , o.last_ddl_time
             , a.apply_tag
             , ''Unavailable''
             , null
             , null
             , null
             , pg.applied_message_create_time
             , null SourceTSrange
             , pg.applied_time
             , null ApplyTSrange
             , null
             , null
          from dba_goldengate_inbound ib, dba_objects o, dba_gg_inbound_progress pg, dba_apply a
          where ib.status     != ''ATTACHED'' 
          and   ib.server_name = o.object_name
          and   ib.server_name = a.apply_name
          and   ib.server_name = pg.server_name(+)
          order by replicat_name
  ',
      'HC,APPLY,PERF',
      'Integrated Replicats Summary',
      null,
      'YES',
      'APPLY', 
      'Runtime Information about the Replicat Processes',
      '- The Report is generated from this Database Instance',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_APPLY,DBA_GG_INBOUND_PROGRESS,DBA_GOLDENGATE_INBOUND,DBA_OBJECTS,GV$GG_APPLY_COORDINATOR,GV$GG_APPLY_RECEIVER',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_key_params',
      null,
      null,
      ' select apply_name,substr(apply_name,5,8) replicat_name
             , max(case when parameter=''PARALLELISM'' then value end) parallelism
             , max(case when parameter=''MAX_PARALLELISM'' then value end) max_parallelism
             , max(case when parameter=''COMMIT_SERIALIZATION'' then value end) commit_serialization
             , max(case when parameter=''EAGER_SIZE'' then value end) eager_size
             , max(case when parameter=''_DML_REORDER'' then value end) batchsql 
             , max(case when parameter=''_BATCHTRANSOPS'' then value end) batchtransops                           
             , max(case when parameter=''BATCHSQL_MODE'' then value end) batchsql_mode 
             , max(case when parameter=''MAX_SGA_SIZE'' then value end) max_sga_size  
             , max(case when parameter=''OPTIMIZE_PROGRESS_TABLE'' then value end) optimize_progress_table
          from dba_apply_parameters ap, dba_goldengate_inbound ib where ib.server_name=ap.apply_name
          group by apply_name
  ',
      'HC,APPLY,CONFIG',
      'Integrated Replicat key parameters',
      null,
      'YES',
      'APPLY', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_APPLY_PARAMETERS,DBA_GOLDENGATE_INBOUND',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE_APPLY,HEARTBEAT,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'heartbeat',
      null,
      null,
      ' select to_char(current_local_ts,''DD-MON-YYYY HH24:MI:SSxFF'') Current_TS
             , remote_database ||''=>''|| local_database DB_Routing, incoming_path
             , incoming_lag,incoming_heartbeat_age
             , local_database ||''=>''||remote_database DB_RRouting
             , outgoing_path
             , outgoing_lag
             , outgoing_heartbeat_age
          from table(dbms_goldengate_hc.heartbeat_tab_func)
          order by remote_database, incoming_path
  ',
      'HC,CAPTURE_APPLY,HEARTBEAT,PERF',
      'OGG Heartbeat Table',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '',
      '0',
      'TABLE(DBMS_GOLDENGA',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,ALERTS,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_alert_err',
      null,
      null,
      ' select inst_id
             , adr_home
             , process_id
             , originating_timestamp
             , substr(MESSAGE_TEXT, 1, 300) message_text
          from V$DIAG_ALERT_EXT d, v$database i
          where module_id in (''Streams'',''GoldenGate'',''XStream'')
          and (regexp_like(d.adr_home,''/''||i.name||''/'') or regexp_like(d.adr_home,''/''||lower(i.name)||''/'') )
          and (MESSAGE_TEXT like ''%ORA-%'' or upper(MESSAGE_TEXT) like ''%ERROR%'')
          and cast(ORIGINATING_TIMESTAMP as DATE) > sysdate - 1440/1440
          order by 1,2,3,4
  ',
      'HC,DATABASE,ALERTS,CONFIG',
      'Alert Log Errors',
      null,
      'YES',
      'NONE', 
      'Look for Errors reported in the Alert log for the last 24 hours',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'V$DIAG_ALERT_EXT,V$DATABASE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,PATCH,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_reg_hist',
      null,
      null,
      ' select distinct(obj.timestamp) hide
             , reg.ACTION Action
             , reg.ID ID
             , reg.COMMENTS Comments
             , to_char(reg.action_time,''YYYY-MM-DD:HH24:MI:SS'') latest_time
             , obj.timestamp as logmnr_compilation_time
             , case when reg.action_time - to_timestamp(obj.timestamp,''YYYY-MM-DD:HH24:MI:SS'') < interval ''1'' hour or reg.action != ''APPLY'' then ''OK''
               else ''Please make sure Logminer compilation is up to date.''
               end as "CHECK"
          from dba_registry_history reg,dba_objects obj
          where reg.action_time = (select max(action_time) from dba_registry_history) 
          and   obj.timestamp = (select max(timestamp) from dba_objects where object_type like ''PACKAGE%'' and owner=''SYS'' and object_name like ''DBMS_LOGMNR%'') 
          and   obj.object_type like''PACKAGE%'' 
          and  obj.owner=''SYS'' and obj.object_name like ''DBMS_LOGMNR%''
  ',
      'HC,DATABASE,PATCH,CONFIG',
      'Registry History',
      null,
      'YES',
      'NONE', 
      'Information about upgrades, downgrades, and critical patch updates that have been performed on the Database',
      '- Check the Database for the latest apllied Patches (PSU, OGG/RDBMS Bundle-Patch, Database Bundle-Patch',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_OBJECTS,DBA_REGISTRY_HISTORY',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ogg_cp_config',
      null,
      null,
      ' Select client_NAME
             , CAPTURE_USER
             , CAPTURE_NAME
             , SOURCE_DATABASE
             , START_SCN ||'' (''|| START_TIME||'')'' as "Start_SCN(Start_Time)"
             , queue_owner||''.''||queue_name QUEUE
          from dba_capture 
          where purpose like ''GoldenGate%'' or capture_name like ''OGG$%''
  ',
      'HC,CAPTURE,CONFIG',
      'GoldenGate CONFIGURATION',
      null,
      'NO',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_CAPTURE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_status_client',
      null,
      null,
      ' select c.client_name
             , c.applied_scn
             , c.client_status
             , c.status_change_time
             , c.error_number
             , case when c.error_number =1013 then ''STOP EXTRACT command performed ( ''||c.error_message||'' )''
                    when c.client_status=''DETACHED'' then ''Extract is not started''
                    else c.error_message
               end error_message
          from    dba_capture c 
          where c.purpose like ''GoldenGate%'' 
  ',
      'HC,CAPTURE,CONFIG',
      'Extract Client Status',
      null,
      'YES',
      'NONE', 
      'Information about the Attachment of the Extract client program to the Database Logmining Server',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_CAPTURE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ogg_out_pt',
      null,
      null,
      ' select capture_name
             , client_name
             , client_status
             , applied_scn processed_low_scn
             , oldest_scn 
          from dba_capture 
          where purpose like ''Golden%'' or capture_name like ''OGG%$%'' 
          order by capture_name
  ',
      'HC,CAPTURE,PERF',
      'OGG Integrated Capture Progress Table',
      null,
      'YES',
      'APPLY', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_CAPTURE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'gg_inbound',
      null,
      null,
      ' select REPLICAT_NAME
             , SERVER_NAME
             , APPLY_USER
         --  , USER_COMMENT
             , STATUS  
             , CREATE_DATE    
          from dba_goldengate_inbound
          order by REPLICAT_NAME
  ',
      'HC,APPLY,PERF',
      'GoldenGate Inbound Servers',
      null,
      'YES',
      'NONE', 
      'Information about the Attachment of the Replicat Client to the Inbound Server',
      '- Check that the status is attached',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_GOLDENGATE_INBOUND',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_info',
      null,
      null,
      ' Select apply_name
             , purpose
        --   , status
             , queue_owner||''.''||queue_name QUEUE
             , DECODE(APPLY_CAPTURED, ''YES'', ''Captured'', ''NO'', ''User-Enqueued'') APPLY_CAPTURED
             , apply_user
             , apply_tag
             , rule_set_owner||''.''||rule_set_name RSN
             , negative_rule_set_owner||''.''||negative_rule_set_name RSN2
             , message_delivery_mode
          from DBA_APPLY 
          where purpose = ''GoldenGate Apply''
  ',
      'HC,APPLY,CONFIG',
      'Apply Information',
      null,
      'YES',
      'APPLY', 
      'Information about the Database Apply Process of the Replicat',
      '- Check that the status is enabled',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_APPLY',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_status',
      null,
      null,
      ' select apply_name
             , max_applied_message_number
             , status
             , status_change_time
             , error_number
             , error_message 
          from dba_apply
          where purpose = ''GoldenGate Apply''
  ',
      'HC,APPLY,CONFIG',
      'Apply Process Information',
      null,
      'YES',
      'APPLY', 
      'NONE',
      '- If the Apply Process aborts, check for the time, Error Code and reason',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_APPLY',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_param_detail',
      null,
      null,
      ' select ap.* 
          from dba_apply_parameters ap, dba_apply a
          where a.purpose = ''GoldenGate Apply'' 
          and a.apply_name=ap.apply_name 
          and  (ap.set_by_user=''YES'' OR ap.parameter in (''PARALLELISM'',''MAX_PARALLELISM''))
          order by ap.apply_name, parameter
  ',
      'HC,APPLY,CONFIG',
      'Apply Process Parameters',
      null,
      'YES',
      'APPLY', 
      'Replicat Integrated DBOptions Parameter Setting',
      '- Parameter Changes can be done from the Replicat Parameter File with the DBOPTIONS INTEGRATEDPARAMS (<name><value>setting.',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_APPLY,DBA_APPLY_PARAMETERS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,HANDLER,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_handler',
      null,
      null,
      ' select apply_name
             , ddl_handler
             , precommit_handler 
          from dba_apply
          where purpose = ''GoldenGate Apply''
  ',
      'HC,APPLY,HANDLER,CONFIG',
      'Apply Handlers',
      null,
      'YES',
      'APPLY', 
      'Information about Apply Handlers',
      '- Apply Handlers are initiated during the runtime of the Replicat process',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_APPLY',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,HANDLER,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_dml_handler',
      null,
      null,
      ' select object_owner||''.''||object_name OBJECT
             , operation_name 
             , handler_type TYP
             , decode(assemble_lobs,''Y'',''Yes'',''N'',''No'',''UNKNOWN'') lob_assemble
             , apply_name
             , user_procedure
             , handler_name
          from dba_apply_dml_handlers 
          order by object_owner,object_name,apply_name
  ',
      'HC,APPLY,HANDLER,CONFIG',
      'Apply DML Handlers',
      null,
      'YES',
      'APPLY', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_APPLY_DML_HANDLERS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,HANDLER,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_hdml_status1',
      null,
      null,
      ' select * from dba_streams_stmt_handlers 
          order by 1
  ',
      'HC,APPLY,HANDLER,CONFIG',
      'DML Statement Handler Status (1)',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,HANDLER,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_hdml_status2',
      null,
      null,
      ' select * from dba_streams_stmts 
          order by 1,2
  ',
      'HC,APPLY,HANDLER,CONFIG',
      'DML Statement Handler Statements (2) **',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,HANDLER,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'dml_proc_h',
      null,
      null,
      ' select o.owner||''.''||o.object_name OBJECT
             , o.status
             , o.object_type
             , o.created
             , o.last_ddl_time 
          from dba_objects o
             , (select distinct user_procedure 
                  from dba_apply_dml_handlers 
                  where user_procedure is not null
               ) h
          where o.owner=replace(substr(h.user_procedure,1, instr(h.user_procedure,''.'',1,1)-1),''"'',null) 
          and   o.object_name = replace(substr(h.user_procedure,instr(h.user_procedure,''.'',-1,1)+1),''"'',null)  
          order by 1
  ',
      'HC,APPLY,HANDLER,CONFIG',
      'DML Procedure Handler Status',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_APPLY_DML_HANDLERS,DBA_OBJECTS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,CDR,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cdr',
      null,
      null,
      ' select * from dba_apply_table_columns 
          order by 1,2,3
  ',
      'HC,APPLY,CDR,CONFIG',
      'Conflict Detection Control',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_APPLY_TABLE_COLUMNS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,CDR,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cdr_cols',
      null,
      null,
      ' select object_owner||''.''||object_name object
             , method_name
             , resolution_column
             , column_name 
          from dba_apply_conflict_columns 
          order by object_owner,object_name
  ',
      'HC,APPLY,CDR,CONFIG',
      'Update Conflict Resolution Columns',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_APPLY_CONFLICT_COLUMNS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_keycols',
      null,
      null,
      ' select object_owner||''.''||object_name object
             , column_name
          from dba_apply_key_columns 
          order by 1,2
       -- select object_owner||''.''||object_name object
       --      , listagg(column_name,'','') column_name
       --   from dba_apply_key_columns
       --   group by apply_name,object_owner||''.''||object_name
  ',
      'HC,APPLY,CONFIG',
      'Key Columns set for Apply',
      null,
      'YES',
      'APPLY', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_APPLY_KEY_COLUMNS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,CDR,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cdr_confh_detail',
      null,
      null,
      ' select * from DBA_APPLY_DML_CONF_HANDLERS 
          order by 1,2,3,4,5,6
  ',
      'HC,APPLY,CDR,CONFIG',
      'OGG CDR - DML Conflict Handlers Details',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_APPLY_DML_CONF_HANDLERS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,CDR,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cdr_hcoll_detail',
      null,
      null,
      ' select * from DBA_APPLY_HANDLE_COLLISIONS 
          order by 1,2,3,4
  ',
      'HC,APPLY,CDR,CONFIG',
      'OGG Handle Collisions Details',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_APPLY_HANDLE_COLLISIONS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,ERROR,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cdr_errh',
      null,
      null,
      ' select * from DBA_APPLY_REPERROR_HANDLERS 
          order by 1,2,3,4,5,6
  ',
      'HC,APPLY,ERROR,CONFIG',
      'OGG Reperror  Handlers Details',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_APPLY_REPERROR_HANDLERS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_objdep',
      null,
      null,
      ' select * from dba_apply_object_dependencies
           order by 1, 2
  ',
      'HC,APPLY,CONFIG',
      'Object Dependencies set for Apply',
      null,
      'YES',
      'APPLY', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '',
      '0',
      'DBA_APPLY_OBJECT_DEPENDENCIES',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_valdep',
      null,
      null,
      ' select * from dba_apply_value_dependencies
  ',
      'HC,APPLY,CONFIG',
      'Value Dependencies set for Apply',
      null,
      'YES',
      'APPLY', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '',
      '0',
      'DBA_APPLY_VALUE_DEPENDENCIES',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,ERROR,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'err_q',
      null,
      null,
      ' select e.apply_name
             , e.local_transaction_id
             , e.message_number
             , e.message_count
             , e.error_type
             , e.error_message
             , e.error_creation_time
             , e.source_database
             , e.source_transaction_id
             , e.source_commit_position
             , utl_raw.cast_to_varchar2(e.source_commit_position) source_commit_scn
          from dba_APPLY_ERROR e, dba_apply a
          where a.apply_name = e.apply_name
          and   a.purpose = ''GoldenGate Apply''
          order by e.apply_name ,source_commit_scn
  ',
      'HC,APPLY,ERROR,PERF',
      'Error Queue',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_APPLY_ERROR',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,ERROR,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'err_q_info',
      null,
      null,
      ' select p.apply_name 
             , e.source_database
             , e.source_commit_scn
             , e.message_number
             , e.message_count
             , e.local_transaction_id
             , case when (bitand(e.flags, 1) = 1) then ''EAGER ERROR''
                     when (bitand(e.flags, 8) = 8) then
                    (case when (bitand(e.flags, 2) = 2)   then ''RECORD LCR''
                          when (bitand(e.flags, 16) = 16) then ''RECORD TXN NO LCRS''
                     else ''RECORD TXN WITH LCRS''
                     end)
                     when (bitand(e.flags, 16) = 16) then ''UNHANDLED ERROR NO LCRS''
                     else NULL
               end error_type
             , e.error_number
             , e.error_message
             , e.error_creation_time
             , e.error_seq#, error_rba
             , e.source_transaction_id
             , e.external_source_pos
             , e.start_seq#, e.start_rba
             , e.end_seq#, e.end_rba         
          from SYS."_DBA_APPLY_ERROR" e, sys.streams$_apply_process p
          where e.apply# = p.apply#(+)
          order by 1,3
  ',
      'HC,APPLY,ERROR,PERF',
      'Error Queue Information with Trailfile Reference (seq# and rba#)',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '',
      '0',
      '_DBA_APPLY_ERROR,STREAMS$_APPLY_PROCESS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,ERROR,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'err_q_type',
      null,
      null,
      ' select m.error_number
             , object_owner
             , object_name
             , operation
             , count(*) 
          from dba_apply_error_messages m 
          group by m.error_number, object_owner, object_name, operation 
          order by 1,2,3,4
  ',
      'HC,APPLY,ERROR,PERF',
      'Tables by Error Type',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_APPLY_ERROR_MESSAGES',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,INSTANTIATION,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_inst_tables',
      null,
      null,
      ' select source_database
             , source_object_owner||''.''||source_object_name OBJECT
             , ignore_scn
             ,  instantiation_scn
          from dba_apply_instantiated_objects 
          order by source_database, object
  ',
      'HC,APPLY,INSTANTIATION,CONFIG',
      'Instantiation SCNs for Apply Tables',
      null,
      'YES',
      'APPLY', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,INSTANTIATION,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_inst_all',
      null,
      null,
      ' select source_database
             , source_schema OBJECT
             , instantiation_Scn INST_SCN
             , ''SCHEMA'' DB_Level 
          from dba_apply_instantiated_schemas
        UNION
        select source_database
             , '''' OBJECT
             , instantiation_Scn INST_SCN
             , ''GLOBAL'' DB_Level
          from dba_apply_instantiated_global
        UNION
        select source_database
             , source_object_owner||''.''||source_object_name OBJECT
       --    , ignore_scn
             , instantiation_scn
             , ''TABLE'' DB_Level
          from dba_apply_instantiated_objects
          order by source_database, DB_Level, object
  ',
      'HC,APPLY,INSTANTIATION,CONFIG',
      'Instantiation SCNs for Apply Schema and Database (DDL)',
      null,
      'YES',
      'APPLY', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,RULES,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_rulesets',
      null,
      null,
      ' select owner||''.''||object_name OBJECT
              , object_id
              , object_type
              , created
              , last_ddl_time
              , status 
          from dba_objects 
          WHERE object_type in (''RULE'',''RULE SET'',''CAPTURE'',''APPLY'')
          order by object_type, object
  ',
      'HC,DATABASE,RULES,CONFIG',
      'Database Objetcs: RuleSets, Rules and Processes',
      null,
      'NO',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_OBJECTS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,RECO,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'reco_tabs',
      null,
      null,
      ' select sysdate,rs.creation_time
             , rs.invoking_package||''.''||rs.invoking_procedure PROCEDURE
             , rs.status
             , rs.done_block_num||'' of ''||rs.total_blocks||'' Steps Completed'' PROGRESS
             , to_number(sysdate-rs.creation_time)*86400 ELAPSED_SECONDS
             , rs.script_id
             , rsb.forward_block CURRENT_STEP
          from dba_recoverable_script rs, dba_recoverable_script_blocks rsb 
          where rs.script_id = rsb.script_id 
          and   rsb.block_num = rs.done_block_num + 1
  ',
      'HC,DATABASE,RECO,CONFIG',
      'Check Recoverable Tables',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_RECOVERABLE_SCRIPT,DBA_RECOVERABLE_SCRIPT_BLOCKS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,RECO,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'reco_errv',
      null,
      null,
      ' SELECT e.* 
          FROM DBA_RECOVERABLE_SCRIPT_ERRORS e, dba_recoverable_script s 
          where e.script_id = s.script_id order by e.script_id
  ',
      'HC,DATABASE,RECO,CONFIG',
      'Check Recoverable Error View',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_RECOVERABLE_SCRIPT_ERRORS,DBA_RECOVERABLE_SCRIPT',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,RECO,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'reco_blocks',
      null,
      null,
      ' select b.script_id, b.block_num
             , b.status
             , forward_block_dblink
             , forward_block 
          from dba_recoverable_script_blocks b, dba_recoverable_script s 
          where b.script_id =s.script_id 
          order by b.script_id, block_num 
  ',
      'HC,DATABASE,RECO,CONFIG',
      'Identify Current Script Blocks',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_RECOVERABLE_SCRIPT,DBA_RECOVERABLE_SCRIPT_BLOCKS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,RECO,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'reco_hist',
      null,
      null,
      ' select rs.creation_time
             , rs.invoking_package||''.''||rs.invoking_procedure PROCEDURE
             , rs.status
             , rs.done_block_num||'' of ''||rs.total_blocks||'' Steps Completed'' PROGRESS
             , rs.script_id
             , rs.script_comment
          from dba_recoverable_script_hist rs 
          where (sysdate-creation_time) < 30
          order by creation_time
  ',
      'HC,DATABASE,RECO,CONFIG',
      'History of Recoverable Scripts in last 30 days',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_RECOVERABLE_SCRIPT_HIST',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,RECO,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'reco_params',
      null,
      null,
      ' select * 
          from dba_recoverable_script_params 
          order by 1,2,3
  ',
      'HC,DATABASE,RECO,CONFIG',
      'Recoverable Script Parameters',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_RECOVERABLE_SCRIPT_PARAMS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,COMPARISON,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'compare',
      null,
      null,
      ' select * 
          from dba_comparison 
          order by owner,comparison_name,comparison_mode
  ',
      'HC,DATABASE,COMPARISON,CONFIG',
      'Defined Comparisons',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_COMPARISON',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,COMPARISON,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'compare_info',
      null,
      null,
      ' select * 
          from dba_comparison_scan 
          order by owner,comparison_name,parent_scan_id,scan_id
  ',
      'HC,DATABASE,COMPARISON,CONFIG',
      'Comparison Information',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_COMPARISON_SCAN',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_hist',
      null,
      null,
      ' select s.begin_interval_time,s.end_interval_time 
             , sa.instance_number
             , sa.apply_name
             , round(sa.reader_lag,2) ReaderLag  
             , round(sa.coord_lwm_lag,2) CoordinatorLag
             , sa.reader_total_messages_dequeued
             , sa.server_total_messages_applied
             , sa.coord_total_received
             , sa.coord_total_applied
             , sa.coord_total_rollbacks
             , sa.coord_total_wait_deps
             , sa.coord_total_wait_cmts
             , sa.server_elapsed_dequeue_time
             , sa.server_elapsed_apply_time
             , sa.startup_time
        --   , sa.dbid
          from dba_hist_streams_apply_sum sa, dba_hist_snapshot s 
          where sa.apply_name in (select apply_name from dba_apply where purpose like ''GoldenGate%'')  
          and   sa.snap_id=s.snap_id 
          and   s.end_interval_time >= systimestamp-1 
          and   sa.instance_number =s.instance_number
          order by sa.apply_name, s.end_interval_time
  ',
      'HC,APPLY,PERF',
      'Apply History for last day',
      null,
      'YES',
      'APPLY', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_APPLY,DBA_HIST_SNAPSHOT,DBA_HIST_STREAMS_APPLY_SUM',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONSTRAINTS,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'rep_object_const',
      null,
      null,
      ' select distinct object
             , constraint_name
             , constraint_type
             , status
             , LAST_CHANGE
             , rely
             , Ref_constraint 
          from(
            select c.owner||''.''||c.table_name object
                 , c.constraint_name
                 , c.constraint_type
                 , status
                 , LAST_CHANGE
                 , rely,r_owner||''.''||r_constraint_name Ref_constraint
              from dba_constraints c,dba_capture_prepared_tables p
              where c.owner=p.table_owner
              and c.table_name=p.table_name
              and  c.constraint_type in (''P'',''U'',''R'')
              and  constraint_name not like ''SYS_IOT%''
          UNION ALL
          select c.owner||''.''||c.table_name object
               , c.constraint_name,c.constraint_type
               , status
               , LAST_CHANGE
               , rely
               , r_owner||''.''||r_constraint_name Ref_constraint
            from dba_constraints c,dba_apply_instantiated_objects p 
            where c.owner      = p.source_object_owner 
            and   c.table_name = p.source_object_name 
            and   c.constraint_type in (''P'',''U'',''R'')
            and  constraint_name not like ''SYS_IOT%'' 
            )
          order by object
  ',
      'HC,DATABASE,CONSTRAINTS,CONFIG',
      'Check for Constraints on Tables configured for Database Objects',
      null,
      'YES',
      'NONE', 
      'Information about Constraints in regard to the replicated tables.',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_APPLY_INSTANTIATED_OBJECTS,DBA_CAPTURE_PREPARED_TABLES,DBA_CONSTRAINTS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'gg_no_support',
      null,
      null,
      ' select * from DBA_GOLDENGATE_SUPPORT_MODE
          where support_mode =''NONE'' 
          order by owner,object_name
  ',
      'HC,CAPTURE,CONFIG',
      'Tables Not Supported By Goldengate Integrated Capture',
      null,
      'YES',
      'CAPTURE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_GOLDENGATE_SUPPORT_MODE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,LOGMINER,INTERNAL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'logmnr_state',
      null,
      null,
      ' select * from system.logmnr_dictstate$
  ',
      'HC,CAPTURE,LOGMINER,INTERNAL',
      'LogMiner Dictionary: Logmnr_dictstate$',
      null,
      'YES',
      'NONE', 
      'LogMiner Dictionary Information used for Support only',
      'NONE',
      '11.2.0.4.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,LOGMINER,INTERNAL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'logmnr_dict',
      null,
      null,
      ' select * from system.logmnr_dictionary$
  ',
      'HC,CAPTURE,LOGMINER,INTERNAL',
      'LogMiner Dictionary: logmnr_dictionary$',
      null,
      'YES',
      'NONE', 
      'LogMiner Dictionary Information used for Support only',
      'NONE',
      '11.2.0.4.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,MEMORY,GENERAL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sp_components',
      null,
      null,
      ' select inst_id,process_type,process_name
	 , ltrim(dbms_goldengate_hcadm_int.display_bytes(max_sga_size)) MAX_SGA_SIZE 
	 , dbms_goldengate_hcadm_int.display_bytes(sga_allocated) SGA_ALLOCATED
	 , CASE WHEN max_sga_size = ''not set'' THEN ''n/a''
			ELSE  dbms_goldengate_hcadm_int.display_number(100*sga_allocated/max_sga_size)  
	   END PCT_MAX_SGA 
	 , dbms_goldengate_hcadm_int.display_bytes(sga_used) sga_used
	 , dbms_goldengate_hcadm_int.display_number(100*sga_used/sga_allocated) PCT_SGA_MEMORY
	 , dbms_goldengate_hcadm_int.display_bytes(streams_pool_size) MIN_STREAMS_POOL_SIZE
	 , sp_derrived derrived_from
	 , dbms_goldengate_hcadm_int.display_number(100*sga_allocated/streams_pool_size) PCT_STREAMS_POOL 
  from ( 
  select c.inst_id
 ,''Extract'' process_type
 , c.capture_name process_name
 , case cp.value when ''INFINITE'' THEN ''not set''
 else to_char(cp.value*1024*1024)
 end max_sga_size
 , c.sga_used
 , c.sga_allocated
 , case cp.value when ''INFINITE'' THEN ''no MAX_SGA_SIZE set''
 else dbms_goldengate_hcadm_int.display_number((100*c.sga_allocated/cp.value/(1024*1024)))
 end "PCT AllocMem of MAX_SGA_SIZE"
  , CASE WHEN p1.value = 0
  THEN CASE WHEN p2.value = 0
  THEN CASE WHEN p3.value = 0
  THEN to_char((select 0.1*bytes from v$sgainfo where name =''Shared Pool Size''))
  ELSE to_char((select 0.1*bytes from v$sgainfo where name =''Maximum SGA Size''))
  END
  ELSE to_char(p2.value) 
 END
   ELSE to_char(p1.value) 
 END  streams_pool_size
  , CASE WHEN p1.value = 0  
  THEN CASE WHEN p2.value = 0  
  THEN CASE WHEN p3.value = 0 
  THEN ''__sga_target''          
  ELSE ''memory_target'' 
  END
ELSE ''sga_target'' 
END
  ELSE ''streams_pool_size'' 
 END  sp_derrived
  from gv$goldengate_capture c, dba_capture_parameters cp
 , gv$parameter p1, gv$parameter p2, gv$parameter p3
  where c.capture_name = cp.capture_name
  and c.inst_id = p1.inst_id
  and c.inst_id = p2.inst_id
  and c.inst_id = p3.inst_id
  and p1.name = ''streams_pool_size''
  and p2.name = ''sga_target''
  and p3.name = ''memory_target''
  and cp.parameter =''MAX_SGA_SIZE''
  union all
  select apr.inst_id
 ,''Replicat'' process_type
 , apr.apply_name process_name
 , case ap.value when ''INFINITE'' THEN ''not set''
				 else to_char(ap.value*1024*1024)
				 end max_sga_size
 , apr.sga_used
 , apr.sga_allocated
 , case ap.value when ''INFINITE'' THEN ''no MAX_SGA_SIZE set''
 else dbms_goldengate_hcadm_int.display_number((100*apr.sga_allocated/ap.value/(1024*1024)))
 end "PCT AllocMem of MAX_SGA_SIZE"
  , CASE WHEN p1.value = 0             -- missing streams_pool_size
  THEN CASE WHEN p2.value = 0      -- missing sga_target
 THEN CASE WHEN p3.value = 0    -- missing memory_target
 THEN to_char((select 0.1*bytes from v$sgainfo where name =''Shared Pool Size''))      
 ELSE to_char((select 0.1*bytes from v$sgainfo where name =''Maximum SGA Size'')) 
 END
 ELSE to_char(p2.value) 
 END
 ELSE to_char(p1.value) 
 END  streams_pool_size
  , CASE WHEN p1.value = 0 
 THEN CASE WHEN p2.value = 0 
 THEN CASE WHEN p3.value = 0 
 THEN ''__sga_target'' 
 ELSE ''memory_target'' 
 END
 ELSE ''sga_target''
 END
 ELSE ''streams_pool_size''
 END  sp_derrived
  from gv$gg_apply_reader apr, dba_apply_parameters ap
 , gv$parameter p1, gv$parameter p2, gv$parameter p3
  where apr.apply_name = ap.apply_name
  and apr.inst_id = p1.inst_id
  and apr.inst_id = p2.inst_id
  and apr.inst_id = p3.inst_id
  and p1.name = ''streams_pool_size''
  and p2.name = ''sga_target''
  and p3.name = ''memory_target''
  and ap.parameter =''MAX_SGA_SIZE''
  )
  order by inst_id,process_type,process_name 
  ',
      'HC,DATABASE,MEMORY,GENERAL',
      'Streams Pool usage for Replication',
      null,
      'YES',
      'APPLY', 
      'Information about the Streams Pool Utilization for the Replication components',
      '- Check that there is enough headroom within the Streams Pool for Capture and Apply.',
      '11.2.0.4.0',
      '',
      '0',
      'GV$GOLDENGATE_CAPTURE,GV$GG_APPLY_READER',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,QUEUES,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'agents',
      null,
      null,
      ' select * from dba_aq_agents
  ',
      'HC,DATABASE,QUEUES,CONFIG',
      'Agents',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_AQ_AGENTS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,QUEUES,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'agents_priv',
      null,
      null,
      ' select * from dba_aq_agent_privs
  ',
      'HC,DATABASE,QUEUES,CONFIG',
      'Agent Privileges',
      null,
      'YES',
      'DATABASE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_AQ_AGENT_PRIVS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_server_stats',
      null,
      null,
      ' select server_sid
            , server_serial#
            , server_spid
            , extract_name
            , capture_name
            , startup_time
            , state
            , total_messages_sent
            , last_sent_message_number
            , last_sent_message_create_time
            , send_time
            , elapsed_send_time
            , dbms_goldengate_hcadm_int.display_bytes(bytes_sent) bytes_send 
          from gv$goldengate_capture   
          order by capture_name
  ',
      'HC,CAPTURE,PERF',
      'Extract Capture Server Statistics',
      null,
      'YES',
      'CAPTURE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '',
      '0',
      'GV$GOLDENGATE_CAPTURE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE_APPLY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'err_tab_stat_sum',
      null,
      null,
      ' select server_name
             , sum(total_inserts+total_updates+total_deletes) Total_Operations
             , sum(total_inserts) Total_Inserts
             , sum(total_updates) Total_Updates
             , sum(total_deletes) Total_Deletes
             , sum(wait_dependencies) Wait_Dependencies
             , sum(insert_collisions) Insert_Collisions
             , sum(update_collisions) Update_Collisions
             , sum(delete_collisions) Delete_Collisions
             , sum(reperror_records) Reperror_Discards
             , sum(reperror_ignores) Reperror_Ignores
             , sum(cdr_insert_row_exists)  CDR_Insert_Row_Exists
             , sum(cdr_update_row_exists)  CDR_Update_Row_Exists
             , sum(cdr_update_row_missing) CDR_Update_Row_Missing
             , sum(cdr_delete_row_exists)  CDR_Delete_Row_Exists
             , sum(cdr_delete_row_missing) CDR_Delete_Row_Missing
             , sum(cdr_successful_resolutions) CDR_Successful_Resolutions
             , sum(cdr_failed_resolutions) CDR_Failed_Resolutions
             , sum(cdr_successful_resolutions+cdr_failed_resolutions) cdr_total_resolutions
          from gv$goldengate_table_stats
          group by server_name
          order by 1 asc, 2 desc
  ',
      'HC,CAPTURE_APPLY,PERF',
      'GoldenGate Table Statistics Summary',
      null,
      'YES',
      'APPLY', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE_APPLY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'err_tab_stat_detail',
      null,
      null,
      ' select server_name
             , destination_table_owner||''.''||destination_table_name destination_object
             , source_table_owner||''.''||source_table_name           source_object
             , sum(total_inserts+total_updates+total_deletes)       Total_Operations
             , sum(total_inserts)                                   Total_Inserts
             , sum(total_updates)                                   Total_Updates
             , sum(total_deletes)                                   Total_Deletes
             , sum(wait_dependencies)                               Wait_Dependencies
             , sum(insert_collisions) Insert_Collisions
             , sum(update_collisions) Update_Collisions
             , sum(delete_collisions) Delete_Collisions
             , sum(reperror_records) Reperror_Discards
             , sum(reperror_ignores) Reperror_Ignores
             , sum(cdr_insert_row_exists)  CDR_Insert_Row_Exists
             , sum(cdr_update_row_exists)  CDR_Update_Row_Exists
             , sum(cdr_update_row_missing) CDR_Update_Row_Missing
             , sum(cdr_delete_row_exists)  CDR_Delete_Row_Exists
             , sum(cdr_delete_row_missing) CDR_Delete_Row_Missing
             , sum(cdr_successful_resolutions) CDR_Successful_Resolutions
             , sum(cdr_failed_resolutions)     CDR_Failed_Resolutions
             , sum(cdr_successful_resolutions+cdr_failed_resolutions) cdr_total_resolutions
          from gv$goldengate_table_stats
          group by server_name, destination_table_owner||''.''||destination_table_name, source_table_owner||''.''||source_table_name
          order by 1 asc, 2 asc, 3 asc ,4 desc
  ',
      'HC,CAPTURE_APPLY,PERF',
      'GoldenGate Table Statistics by Table',
      null,
      'YES',
      'APPLY', 
      'Information about the GoldenGate Table Statistics',
      '- Check the tables with the highest number of DML Operations <BR>- Check the tables where Conflict Detection and Resolution is most often done',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ogg_in_pt',
      null,
      null,
      ' select server_name                               
             , processed_low_position                           
             , applied_low_position                              
             , applied_high_position                            
             , oldest_position                                 
             , applied_low_scn                         
             , applied_time                                   
             , applied_message_create_time                                             
             , logbsn 
          from dba_gg_inbound_progress 
          order by server_name
  ',
      'HC,APPLY,PERF',
      'GoldenGate Inbound Progress Table',
      null,
      'YES',
      'APPLY', 
      'Information about the Inbound Progress',
      'Information is shown in Messages',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_GG_INBOUND_PROGRESS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_RECEIVER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_recv_stats',
      null,
      null,
      ' select inst_id, apply_name, sid, serial#
              , startup_time
              , source_database_name
              , total_messages_received
              , total_available_messages
              , state 
              , last_received_msg_position
              , acknowledgement_position 
          from gv$gg_apply_receiver 
          order by inst_id, apply_name
  ',
      'HC,APPLY,APPLY_RECEIVER,PERF',
      'Apply Network Receiver (ANR)',
      null,
      'YES',
      'APPLY', 
      'Information about Apply Receiver - Database Foregroundprocess of Replicat',
      'Information is shown in Messages',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'GV$GG_APPLY_RECEIVER',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_READER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_read_stats',
      null,
      null,
      ' SELECT ap.APPLY_NAME
             , s.sid,s.serial#
             , SUBSTR(s.PROGRAM,INSTR(S.PROGRAM,''('')+1,4) PROCESS_NAME
             , r.ELAPSED_DEQUEUE_TIME
             , r.ELAPSED_SCHEDULE_TIME
             , r.STATE
             , r.oldest_transaction_id
          FROM gV$GG_APPLY_READER r, gV$SESSION s, DBA_APPLY ap
          WHERE r.SID = s.SID AND
                r.SERIAL# = s.SERIAL# AND
                r.inst_id = s.inst_id AND
                r.APPLY_NAME = ap.APPLY_NAME  
          order by ap.apply_name
  ',
      'HC,APPLY,APPLY_READER,PERF',
      'Apply Reader',
      null,
      'YES',
      'APPLY', 
      'Information about Apply Reader Process',
      '- Check state of the Apply Reader Process. <BR>- Check for the size of Memory being used and allocated. <BR>- Check for watermark dependencies which should be  much smaller than row-level dependencies',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_READER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_reader',
      null,
      null,
      ' SELECT APPLY_NAME
              , dbms_goldengate_hcadm_int.display_number((DEQUEUE_TIME-DEQUEUED_MESSAGE_CREATE_TIME)*86400) "LATENCY [sec]"
              , TO_CHAR(DEQUEUED_MESSAGE_CREATE_TIME,''HH24:MI:SS MM/DD'') DEQUEUED_MESSAGE_CREATE_TIME
              , TO_CHAR(DEQUEUE_TIME,''HH24:MI:SS MM/DD'') LAST_DEQUEUE 
              , DEQUEUED_POSITION
          FROM gV$GG_APPLY_READER 
          order by apply_name
  ',
      'HC,APPLY,APPLY_READER,PERF',
      'Apply Reader - Dequeue Information',
      null,
      'YES',
      'NONE', 
      'Information about Apply Reader Process',
      'Check for the DEQUEUED_MESSAGE_CREATE_TIME (creation time at the source database of the last message received) and the latency.',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'GV$GG_APPLY_READER',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_READER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_read_dep',
      null,
      null,
      ' select r.apply_name
             , r.total_messages_dequeued
             , r.total_lcrs_with_dep
             , r.total_lcrs_with_WMdep
             , c.total_assigned
             , c.total_wait_deps
             , c.total_wait_commits
             , dbms_goldengate_hcadm_int.display_number(100*(r.total_lcrs_with_dep)/nullif((r.total_messages_dequeued-c.total_assigned),0)) "WaitDependency % msgs"
             , dbms_goldengate_hcadm_int.display_number(100*(r.total_lcrs_with_WMdep)/nullif((c.total_received),0)) "WM WaitDependency % msgs"
          from gv$gg_apply_reader r , gv$gg_apply_coordinator c
          where r.apply_name = c.apply_name
          and r.inst_id = c.inst_id
          order by r.apply_name
  ',
      'HC,APPLY,APPLY_READER,PERF',
      'Apply Reader - LCR Dependencies',
      null,
      'YES',
      'NONE', 
      'Information about Apply Reader Process - Dependency',
      'A high percentage of Dependency, reduces the parallelism',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'GV$GG_APPLY_READER',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_COORDINATOR,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_coord_dep',
      null,
      null,
      ' select apply_name
             , total_applied
             , total_wait_deps
             , total_wait_commits
             , dbms_goldengate_hcadm_int.display_number((100*total_wait_deps/NULLIF(total_applied,0)))    as "WAITDEP [Percentage]"
             , dbms_goldengate_hcadm_int.display_number((100*total_wait_commits/NULLIF(total_applied,0))) as "COMMITDEP [Percentage]"
          from gv$gg_apply_coordinator
          order by apply_name
  ',
      'HC,APPLY,APPLY_COORDINATOR,PERF',
      'Apply Coordinator - Commit Dependencies',
      null,
      'YES',
      'NONE', 
      'Information about Apply Coordinator Process - Dependency',
      'A high percentage of Dependency, reduces the parallelism',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'GV$GG_APPLY_COORDINATOR',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_COORDINATOR,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_coord_stats',
      null,
      null,
      ' SELECT ap.APPLY_NAME,s.sid,s.serial#
             , SUBSTR(s.PROGRAM,INSTR(S.PROGRAM,''('')+1,4) PROCESS
             , c.STARTUP_TIME
             , c.ELAPSED_SCHEDULE_TIME
             , c.STATE
             , c.TOTAL_RECEIVED RECEIVED
             , c.TOTAL_ASSIGNED ASSIGNED
             , c.unassigned_complete_txns unassigned 
             , c.TOTAL_APPLIED APPLIED
             , c.TOTAL_ERRORS ERRORS
             , c.total_ignored
             , c.total_rollbacks
          FROM gV$GG_APPLY_COORDINATOR  c, gV$SESSION s, dba_APPLY ap
          WHERE c.SID = s.SID 
          AND   c.SERIAL# = s.SERIAL# 
          AND   c.APPLY_NAME = ap.APPLY_NAME  
          order by ap.apply_name
  ',
      'HC,APPLY,APPLY_COORDINATOR,PERF',
      'Apply Coordinator',
      null,
      'YES',
      'APPLY', 
      'Information about Apply Coordinator Process',
      '- Check the State of the Coordinatar Process. <BR>The State should be IDLE or APPLYING, but INITIALIZING, SHUTTING DOWN or ABORTING shows maintainance or incident issues. <BR>- Total number of transactions RECEIVED, ASSIGNED and APPLIED by the apply process since the apply process was last started. <BR>A high difference betwwen Received and Assigned transactions indicates high activity. <BR>- Rollback activity indicates rollbacks related unexpected contention. <BR>- Unassigned completed transaction sshould be 0 or small number.',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_APPLY,GV$GG_APPLY_COORDINATOR,GV$SESSION',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_COORDINATOR,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_coord_stats_wm',
      null,
      null,
      ' SELECT APPLY_NAME
             , LWM_MESSAGE_CREATE_TIME LWM_MSG_TS
             , LWM_MESSAGE_NUMBER      LWM_MSG_NBR
             , LWM_TIME LWM_UPDATED
             , HWM_MESSAGE_CREATE_TIME HWM_MSG_TS
             , HWM_MESSAGE_NUMBER      HWM_MSG_NBR
             , HWM_TIME HWM_UPDATED
             , LWM_POSITION
             , HWM_POSITION
             , PROCESSED_MESSAGE_NUMBER
          from gV$GG_APPLY_COORDINATOR 
          order by apply_name
  ',
      'HC,APPLY,APPLY_COORDINATOR,PERF',
      'Apply Coordinator Watermarks',
      null,
      'YES',
      'NONE', 
      'Information about Apply Coordinator Process',
      '- Check the Low and High Watermark Message Create time. <BR>- All transactions below the Low Watermark Message Create time have already been applied. <BR>- The newest transaction beeing applied is at the High Water Mark. <BR>- The time between the Low and High Watermark Message Create time shows the range in which transactions are applied by the Apply Server Processes. <BR>- The LWM and HWM Update Timestamps are indicating the internal (maintainance) Updates by The Coordinator itself. <BR>This time should be within a short period of time.',
      '11.2.0.4.0',
      '',
      '0',
      'GV$GG_APPLY_COORDINATOR',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_flow',
      null,
      null,
      ' SELECT TO_CHAR(sysdate,''YYYY-MM-DD HH24:MI:SS'') mtime
             , rcv.inst_id
             , rcv.APPLY_NAME
             , rcv.STATE receiver_state
             , r.STATE reader_state
             , ROUND(r.SGA_USED/1024/1024,2) SGA_USED
             , ROUND(r.SGA_ALLOCATED/1024/1024,2) SGA_ALLOCATED
             , rcv.TOTAL_available_messages
             , rcv.TOTAL_MESSAGES_RECEIVED
             , r.TOTAL_MESSAGES_DEQUEUED
             , c.UNASSIGNED_COMPLETE_TXNS
             , (select count(*)
                  from gv$goldengate_transaction t
                  where t.component_name = c.apply_name
                  and t.inst_id = c.inst_id) open_txn
            , c.active_server_count
            , (select count(1)
                 from gv$gg_apply_server s
                 where s.state=''EXECUTE TRANSACTION''
                 and s.apply_name = c.apply_name
                 and s.inst_id    = c.inst_id) active_executing_count
          from gv$gg_apply_reader r,  gv$gg_apply_receiver rcv, gv$gg_apply_coordinator c
          where c.apply_name=rcv.apply_name
          and   c.apply_name=r.apply_name
          and   c.inst_id=rcv.inst_id
          and   c.inst_id=r.inst_id
          order by r.SGA_USED desc
  ',
      'HC,APPLY,PERF',
      'Apply Flow within the Sub Components',
      null,
      'YES',
      'NONE', 
      'n/a',
      'n/a',
      '11.2.0.4.0',
      '',
      '0',
      'GV$GG_APPLY_RECEIVER,GV$APPLY_READER,GV$GG_APPLY_COORDINATOR,GV$GG_APPLY_SERVER',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_txn_sum',
      null,
      null,
      ' select inst_id, component_name
             , count(*)                      "Open Transactions"
             , sum(cumulative_message_count) "Total LCRs" 
          from gv$Goldengate_transaction 
          where component_type=''APPLY'' 
          group by inst_id, component_name
  ',
      'HC,APPLY,PERF',
      'Open GoldenGate Apply Transactions',
      null,
      'YES',
      'APPLY', 
      'Summary Information about open Apply Transactions',
      '-Check the number of open Transactions',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_txn_detail',
      null,
      null,
      ' select  inst_id       
              , component_name                                     
              , transaction_id    
              , cumulative_message_count                
              , first_message_time                              
              , first_message_position                             
          from gv$goldengate_transaction 
          where component_type=''APPLY'' 
          order by component_name, first_message_position
  ',
      'HC,APPLY,PERF',
      'Open GoldenGate Apply Transactions -Details',
      null,
      'YES',
      'NONE', 
      'Detail Information about open Apply Transactions',
      '- Check the Size (Number of Operations) of the individual Transactions to identify large transactions',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_SERVER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_srvr_sum',
      null,
      null,
      ' select apply_name, count(*) "Number of Apply Server"
             , sum(a.total_messages_applied) total_messages_applied
             , sum(a.total_assigned) total_assigned
             , sum(a.total_lcrs_retried) total_lcrs_retried
             , sum(a.total_txns_retried) total_txns_retried
             , sum(a.total_txns_recorded) total_txns_recorded
          from gV$GG_APPLY_SERVER a
          group by apply_name  
          order by apply_name
  ',
      'HC,APPLY,APPLY_SERVER,PERF',
      'Apply Server Statstics - Summary',
      null,
      'YES',
      'APPLY', 
      'The sum of the LCRs and Transactions for all Apply Server processes is displayed.',
      'Check for the Number of Apply Server Processes, the messages and transactions being applied. <BR>- TOTAL_TXNs_RETRIED is the number of retries transactions with ine Apply Server. <BR>- TOTAL_TXNs_RECORDED are the recorded transactions in the error queue.',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'GV$GG_APPLY_SERVER',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_SERVER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_srvr_stats',
      null,
      null,
      ' SELECT a.inst_id
             , a.apply_name
             , a.server_id
             , substr(s.PROGRAM,INSTR(S.PROGRAM,''('')+1,4) PROCESS_NAME
             , a.sid, a.serial#
             , a.STATE
             , a.xidusn||''.''||a.xidslt||''.''||a.xidsqn CURRENT_TXN
             , a.TOTAL_ASSIGNED ASSIGNED
             , a.TOTAL_MESSAGES_APPLIED msg_APPLIED
             , a.MESSAGE_SEQUENCE
             , a.lcr_retry_iteration
             , a.txn_retry_iteration
             , a.total_lcrs_retried
             , a.total_txns_retried
             , a.total_txns_recorded
             , a.elapsed_apply_time, a.apply_time
             , s.logon_time
          FROM gV$GG_APPLY_SERVER a, gV$SESSION s
          WHERE a.SID = s.SID 
          AND   a.SERIAL# = s.SERIAL# 
          AND   a.inst_id = s.inst_id 
          order by a.apply_name, a.server_id
  ',
      'HC,APPLY,APPLY_SERVER,PERF',
      'Apply Server Statistics - Details',
      null,
      'YES',
      'APPLY', 
      'LCRs and Transactions for the individual Apply Server processes are displayed.',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'GV$GG_APPLY_SERVER,GV$SESSION',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_SERVER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_srvr_stats_auto',
      null,
      null,
      ' select a.inst_id
             , a.APPLY_NAME
             , a.server_id
             , a.STATE
             , a.TOTAL_ASSIGNED ASSIGNED
             , a.TOTAL_MESSAGES_APPLIED msg_APPLIED
             , a.MESSAGE_SEQUENCE
             , a.lcr_retry_iteration
             , a.txn_retry_iteration
             , a.total_lcrs_retried
             , a.total_txns_retried
             , a.total_txns_recorded
             , a.elapsed_apply_time
             , a.apply_time
          from gV$GG_APPLY_SERVER a,  DBA_APPLY ap
          where  a.server_id = 0
          and a.APPLY_NAME = ap.APPLY_NAME
          order by a.inst_id, a.apply_name, a.server_id
  ',
      'HC,APPLY,APPLY_SERVER,PERF',
      'Apply Server Statistics - Auto Tuning',
      null,
      'YES',
      'APPLY', 
      'Autotuned Apply Server Statistics (aggregated stats for apply servers)',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_APPLY,GV$GG_APPLY_SERVER',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_SERVER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_srvr_sql',
      null,
      null,
      ' select a.inst_id
             , a.apply_name
             , a.server_id
             , a.state
             , a.total_messages_applied
             , q.sql_id
             , q.sql_fulltext sqltext
             , q.executions
             , q.rows_processed
             , q.rows_processed/decode(q.executions,0,1,executions) rows_per_exec
             , q.optimizer_mode,optimizer_cost 
          from gv$GG_apply_server a, gv$sql q, gv$session s
          where a.sid = s.sid and a.serial#=s.serial#
          and   a.inst_id = s.inst_id 
          and   s.sql_hash_value = q.hash_value 
          and   s.sql_address = q.address 
          and   s.sql_id = q.sql_id 
          and   s.inst_id = q.inst_id
          and   a.inst_id = q.inst_id
          order by a.apply_name, a.server_id
  ',
      'HC,APPLY,APPLY_SERVER,PERF',
      'Apply Server SQL Statements',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'GV$GG_APPLY_SERVER,GV$SESSION,GV$SQL',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_SERVER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_srvr_stats_we',
      null,
      null,
      ' select a.inst_id
             , a.apply_name
             , a.server_id
             , w.event
             , w.seconds_in_wait secs
          from gv$GG_apply_server a, gv$session_wait w 
          where a.sid = w.sid  
          and a.inst_id = w.inst_id
          order by a.apply_name, a.server_id
  ',
      'HC,APPLY,APPLY_SERVER,PERF',
      'Apply Server Wait Events',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'GV$GG_APPLY_SERVER,GV$SESSION_WAIT',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_SERVER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_srvr_sess',
      null,
      null,
      ' select a.inst_id
             , a.apply_name
             , a.server_id
             , e.event
             , e.total_waits
             , e.total_timeouts
             , e.time_waited
             , e.average_wait
             , e.max_wait 
          from gv$GG_apply_server a, gv$session_event e
          where a.sid = e.sid  
          and a.inst_id = e.inst_id
          order by a.apply_name, a.server_id, e.time_waited desc
  ',
      'HC,APPLY,APPLY_SERVER,PERF',
      'Apply Server Session Events',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'GV$GG_APPLY_SERVER,GV$SESSION_EVENT',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_SERVER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_srvr_stats_txns',
      null,
      null,
      ' select a.inst_id
             , a.APPLY_NAME
             , SUBSTR(s.PROGRAM,INSTR(S.PROGRAM,''('')+1,4) PROCESS_NAME
             , server_id
             , a.state
             , a.sid, a.serial#
             , a.TOTAL_ASSIGNED ASSIGNED
             , a.TOTAL_MESSAGES_APPLIED msg_APPLIED
             , xidusn||''.''||xidslt||''.''||xidsqn CURRENT_TXN
             , commit_position
             , dep_xidusn||''.''||dep_xidslt||''.''||dep_xidsqn DEPENDENT_TXN
             , dep_commit_position
             , message_sequence
             , apply_time
          FROM gV$GG_APPLY_SERVER a, gV$SESSION s
          WHERE a.SID = s.SID 
          AND a.SERIAL# = s.SERIAL#  
          AND a.inst_id = s.inst_id 
          order by a.apply_name,a.state
  ',
      'HC,APPLY,APPLY_SERVER,PERF',
      'Apply Server Transactions',
      null,
      'YES',
      'APPLY', 
      'Information about current transactions being applied by the Apply Server Processes',
      'Information might be ordered by COMMIT SCN and Dependant COMMIT Position',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'GV$GG_APPLY_SERVER,GV$SESSION',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE_APPYL,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'topo_rep_stats',
      ' declare              pragma autonomous_transaction;              begin    for i in 1..dbms_goldengate_hcadm_int.advisor_run_count loop      dbms_streams_advisor_adm.ANALYZE_CURRENT_PERFORMANCE ;      dbms_lock.sleep(dbms_goldengate_hcadm_int.advisor_interval);    end loop;    end ;  ',
      null,
      ' select statistic_time
             , component_db, component_name, component_type, sub_component_type
             , statistic_name
             , case when STATISTIC_UNIT = ''PERCENTAGE'' then dbms_goldengate_hcadm_int.display_number(statistic_value)
                 else 
                 case when statistic_name =''STATUS'' then
                   case when statistic_value = ''0'' then ''enabled''
                        when statistic_value = ''1'' then ''aborted''
                        when statistic_value = ''2'' then ''disabled''
                        when statistic_value = ''3'' then ''flow_control''
                        else ''UNKNOWN''
                   end 
                 else to_char(statistic_value)
                 end  
               end STATISTIC_VALUE
             , case when STATISTIC_UNIT = ''PERCENT'' then ''%''
                    when STATISTIC_UNIT in (''TEXT'',''NUMBER'') then ''n/a''
                    else STATISTIC_UNIT
               end STATISTIC_UNIT
          from dba_streams_tp_component_stat
          where COMPONENT_TYPE != ''QUEUE''
          order by statistic_time
                 , component_id
                 , decode(SUB_COMPONENT_TYPE
                         , ''LOGMINER READER'',11
                         , ''LOGMINER PREPARER'',12
                         , ''LOGMINER BUILDER'',13
                         , ''CAPTURE SESSION'',14              
                         , ''PROPAGATION SENDER+RECEIVER'',41
                         , ''APPLY READER'',42
                         , ''APPLY COORDINATOR'',43
                         , ''APPLY SERVER'',44
                         , NULL
                         )
  ',
      'HC,CAPTURE_APPYL,PERF',
      'Topology: Replication Component Statistics',
      null,
      'YES',
      'APPLY', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '',
      '0',
      'DBA_STREAMS_TP_COMPONENT_STAT',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE_APPLY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'topo_necks',
      null,
      null,
      ' select component_name
             , component_db
             , component_type
             , top_session_id
             , top_session_serial#
             , action_name
             , bottleneck_identified
             , advisor_run_time
             , advisor_run_reason
           from dba_streams_tp_path_bottleneck 
           where bottleneck_identified=''YES'' 
           and advisor_run_id =(select  max(advisor_run_id) from dba_streams_tp_path_bottleneck) 
           order by advisor_run_id,path_id
  ',
      'HC,CAPTURE_APPLY,PERF',
      'Topology Potential Bottlenecks',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '',
      '0',
      'DBA_STREAMS_TP_PATH_BOTTLENECK',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE_APPLY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'topo_stats',
      null,
      null,
      ' select advisor_run_time
             , max(case when statistic_name=''LATENCY'' then statistic_value||'' ''||statistic_unit end) latency
             , max(case when statistic_name=''CAPTURE RATE'' then statistic_value||'' ''||statistic_unit end) capture_rate
             , max(case when statistic_name=''ENQUEUE RATE'' then statistic_value||'' ''||statistic_unit end) enqueue_rate
             , max(case when statistic_name=''SEND RATE'' then statistic_value||'' ''||statistic_unit end) send_rate
             , max(case when statistic_name=''BYTES SEND RATE'' then statistic_value||'' ''||statistic_unit end) bytes_send_rate
             , max(case when statistic_name=''TRANSACTION APPLY RATE'' then statistic_value||'' ''||statistic_unit end) transaction_rate
             , max(case when statistic_name=''MESSAGE APPLY RATE'' then statistic_value||'' ''||statistic_unit end) message_rate
          from dba_streams_tp_path_stat
          group by path_id,advisor_run_id,advisor_run_time
          order by path_id,advisor_run_id,advisor_run_time
  ',
      'HC,CAPTURE_APPLY,PERF',
      'Topology Statistics',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '',
      '0',
      'DBA_STREAMS_TP_PATH_STAT',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_RECEIVER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_recv_ash',
      null,
      null,
      ' SELECT a.inst_id, a.apply_name
             , ash.event_count
             , ash_total.total_count
             , dbms_goldengate_hcadm_int.display_number(ash.event_count*100/NULLIF(ash_total.total_count,0)) as Percentage 
             , DECODE(ash.event, ''Streams AQ: enqueue blocked on low memory'', ''NO''
                               , ''Streams AQ: enqueue blocked due to flow control'', ''NO''
                               , ''REPL Capture/Apply: flow control'', ''NO''
                               , ''REPL Capture/Apply: memory'',''NO''
                               , ''YES'') busy
                               , nvl(ash.event,''on CPU or wait on CPU'') event
          FROM (SELECT inst_id, SESSION_ID
                     , SESSION_SERIAL#
                     , EVENT
                     , COUNT(sample_time) AS EVENT_COUNT
                  FROM  gv$active_session_history
                  WHERE sample_time >  sysdate - dbms_goldengate_hcadm_int.get_current(''minutes_to_analyze'')/24/60
                  GROUP BY inst_id, session_id, session_serial#, event
               ) ash
             , (SELECT inst_id, COUNT(DISTINCT sample_time) AS TOTAL_COUNT
                  FROM   gv$active_session_history
                  WHERE  sample_time > sysdate - dbms_goldengate_hcadm_int.get_current(''minutes_to_analyze'')/24/60
	          group by inst_id
               ) ash_total
             , gv$gg_apply_receiver a
          WHERE a.sid                  = ash.SESSION_ID 
          and   a.serial#              = ash.SESSION_SERIAL#
          and   a.source_database_name = ''replicat''
          and   a.inst_id = ash.inst_id
          and   a.inst_id = ash_total.inst_id
          order by a.inst_id, a.apply_name, to_number(Percentage)	  
  ',
      'HC,APPLY,APPLY_RECEIVER,PERF',
      'Apply Receiver Processes',
      null,
      'YES',
      'APPLY', 
      'Ash Report Information about Apply Network Receiver Session',
      '- Based on the ASH Information, general Performance Tuning attempts might be derived',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'ASH_TOTAL,GLOBAL_NAME,V$ACTIVE_SESSION_HISTORY,V$PROPAGATION_RECEIVER,X$KWQPD',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_READER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_read_ash',
      null,
      null,
      ' SELECT a.inst_id, a.apply_name
            , ash.event_count
            , ash_total.total_count
            , dbms_goldengate_hcadm_int.display_number(ash.event_count*100/NULLIF(ash_total.total_count,0)) as Percentage 
            , DECODE(ash.event,''rdbms ipc message'', ''NO'', ''YES'') busy
            , NVL(ash.event,''on CPU or wait on CPU'') event
          FROM (SELECT inst_id
                     , SESSION_ID
                     , SESSION_SERIAL#
                     , EVENT
                     , COUNT(sample_time) AS EVENT_COUNT
                  FROM  gv$active_session_history
                  WHERE sample_time > sysdate -dbms_goldengate_hcadm_int.get_current(''minutes_to_analyze'')/24/60
                  GROUP BY inst_id, session_id, session_serial#, event
               ) ash
            , (SELECT inst_id, COUNT(DISTINCT sample_time) AS TOTAL_COUNT
                FROM  gv$active_session_history
                WHERE sample_time > sysdate -dbms_goldengate_hcadm_int.get_current(''minutes_to_analyze'')/24/60
                GROUP BY inst_id
              ) ash_total
            , gv$gg_apply_reader a
          WHERE a.sid    = ash.SESSION_ID 
          AND  a.serial# = ash.SESSION_SERIAL#
          AND  a.inst_id = ash.inst_id
          AND  a.inst_id = ash_total.inst_id
          ORDER BY a.inst_id, apply_name, to_number(Percentage) 
 ',
      'HC,APPLY,APPLY_READER,PERF',
      'Apply Reader Processes',
      null,
      'YES',
      'APPLY', 
      'Ash Report Information about Apply Reader Sessions',
      '- Based on the ASH Information, general Performance Tuning attempts might be derived',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'ASH_TOTAL,V$ACTIVE_SESSION_HISTORY,V$GG_APPLY_READER',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_COORDINATOR,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_coord_ash',
      null,
      null,
      ' SELECT a.inst_id, a.apply_name
             , ash.event_count
             , ash_total.total_count
             , dbms_goldengate_hcadm_int.display_number(ash.event_count*100/NULLIF(ash_total.total_count,0)) as Percentage 
             , ''YES'' busy
             , NVL(ash.event,''on CPU or wait on CPU'') event
          FROM (SELECT inst_id
                     , SESSION_ID
                     , SESSION_SERIAL#
                     , EVENT
                     , COUNT(sample_time) AS EVENT_COUNT
                  FROM  gv$active_session_history
                  WHERE sample_time > sysdate - dbms_goldengate_hcadm_int.get_current(''minutes_to_analyze'')/24/60
                  GROUP BY inst_id, session_id, session_serial#, event
               ) ash
            , (SELECT inst_id, COUNT(DISTINCT sample_time) AS TOTAL_COUNT
                FROM  gv$active_session_history
                WHERE sample_time > sysdate - dbms_goldengate_hcadm_int.get_current(''minutes_to_analyze'')/24/60
                GROUP BY inst_id
              ) ash_total
            , gv$gg_apply_coordinator a
          WHERE a.sid = ash.SESSION_ID
          AND   a.serial# = ash.SESSION_SERIAL#
          AND   a.inst_id = ash.inst_id
          AND   a.inst_id = ash_total.inst_id
          ORDER BY a.inst_id, apply_name, to_number(Percentage) 
  ',
      'HC,APPLY,APPLY_COORDINATOR,PERF',
      'Apply Coordinator Processes',
      null,
      'YES',
      'APPLY', 
      'Ash Report Information about Apply Coordinator Session',
      '- Based on the ASH Information, general Performance Tuning attempts might be derived',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'ASH_TOTAL,V$ACTIVE_SESSION_HISTORY,V$GG_APPLY_COORDINATOR',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_SERVER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_srvr_ash',
      null,
      null,
      ' SELECT a.inst_id, a.apply_name|| '' - '' || a.server_id as apply_name
             , ash.event_count
             , ash_total.total_count
             , dbms_goldengate_hcadm_int.display_number(ash.event_count*100/NULLIF(ash_total.total_count,0)) as Percentage 
             , ''YES'' busy
             , NVL(ash.event,''on CPU or wait on CPU'') event
          FROM (SELECT inst_id
                     , SESSION_ID
                     , SESSION_SERIAL#
                     , EVENT
                     , COUNT(sample_time) AS EVENT_COUNT
                  FROM  gv$active_session_history
                  WHERE sample_time > sysdate - dbms_goldengate_hcadm_int.get_current(''minutes_to_analyze'')/24/60
                  GROUP BY inst_id, session_id, session_serial#, event
               ) ash
            , (SELECT inst_id, COUNT(DISTINCT sample_time) AS TOTAL_COUNT
                FROM  gv$active_session_history
                WHERE sample_time > sysdate - dbms_goldengate_hcadm_int.get_current(''minutes_to_analyze'')/24/60
                GROUP BY inst_id
              ) ash_total
            , gv$gg_apply_server a
          WHERE a.sid = ash.SESSION_ID
          AND   a.serial# = ash.SESSION_SERIAL#
          AND   a.inst_id = ash.inst_id
          AND   a.inst_id = ash_total.inst_id
          ORDER BY a.inst_id, apply_name, to_number(Percentage) 
  ',
      'HC,APPLY,APPLY_SERVER,PERF',
      'Apply Server Processes',
      null,
      'YES',
      'APPLY', 
      'Ash Report Information about Apply Server Process Session',
      '- Based on the ASH Information, general Performance Tuning attempts might be derived',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'ASH_TOTAL,V$ACTIVE_SESSION_HISTORY,V$GG_APPLY_SERVER',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,ALERTS,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_alert_details',
      null,
      null,
      ' select inst_id
             , adr_home
             , process_id
             , substr(originating_timestamp,1,31) origin_timestamp
             , substr(MESSAGE_TEXT, 1, 300) message_text
          from V$DIAG_ALERT_EXT d, v$database i 
          where (regexp_like(d.adr_home,''/''||i.name||''/'') or regexp_like(d.adr_home,''/''||lower(i.name)||''/'') )
          and   module_id in (''Streams'',''GoldenGate'',''XStream'')
          and   (substr(message_text,1,22) != ''LOGMINER: Begin mining'' and  substr(message_text,1,22) != ''LOGMINER: End   mining'')
          and   cast(ORIGINATING_TIMESTAMP as DATE) > sysdate - 1440/1440
          order by inst_id,adr_home,process_id,originating_timestamp
  ',
      'HC,DATABASE,ALERTS,CONFIG',
      'Alert Log Details',
      null,
      'YES',
      'NONE', 
      'Alert Log Details for last 24 hours for GoldenGate module ordered by process_id and timestamp',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'V$DIAG_ALERT_EXT,V$DATABASE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_dictstat',
      null,
      null,
      ' with endpoints as (select min(to_char(last_analyzed,''YYYY-MM-DD'')) min
                         ,max(to_char(last_analyzed,''YYYY-MM-DD'')) max
                      from dba_tab_statistics 
                      where owner = ''SYS'' 
		      and last_analyzed is not null)
select StatGathDate,StatCount from (
  select nvl(to_char(t.last_analyzed,''YYYY-MM-DD''),''No Statistics'') StatGathDate
       , count(*) StatCount
    from dba_tab_statistics t
    where t.owner = ''SYS''
    group by nvl(to_char(t.last_analyzed,''YYYY-MM-DD''),''No Statistics'')
    ) tg, endpoints e
  where (tg.StatGathDate = ''No Statistics'' 
    or tg.StatGathDate = e.min
    or tg.StatGathDate = e.max
	  )
order by tg.StatGathDate 
  ',
      'HC,DATABASE,CONFIG',
      'Database Dictionary Statistics',
      null,
      'YES',
      'DATABASE', 
      '- Dictionary Statistics of the Database',
      '- From database tuning aspects, it''s a best practice to have statistics on Dictionary objects',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_fixtabstat',
      null,
      null,
      ' with endpoints as (select min(to_char(s.last_analyzed,''YYYY-MM-DD'')) min
                         ,max(to_char(s.last_analyzed,''YYYY-MM-DD'')) max
                      from dba_tab_statistics s
                      where (s.table_name) in (SELECT name FROM v$fixed_table WHERE  type = ''TABLE'')
					  and s.last_analyzed is not null)
select distinct StatGathDate,StatCount from (
  select nvl(to_char(t.last_analyzed,''YYYY-MM-DD''),''No Statistics'') StatGathDate
       , count(*) StatCount
    from dba_tab_statistics t
    where t.table_name in (SELECT name FROM v$fixed_table WHERE  type = ''TABLE'')
    group by nvl(to_char(t.last_analyzed,''YYYY-MM-DD''),''No Statistics'')
    ) tg, endpoints e
  where (tg.StatGathDate = ''No Statistics'' 
    or tg.StatGathDate = e.min
    or tg.StatGathDate = e.max
	  )
order by tg.StatGathDate 
  ',
      'HC,DATABASE,CONFIG',
      'Database Fixed Table Statistics',
      null,
      'YES',
      'DATABASE', 
      '- Fixed table Statistics of the Database',
      '- From database tuning aspects, it''s a best practice to have fixed table statistics',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_progtab_count',
      null,
      null,
      ' select owner||''.''||segment_name object
             , tablespace_name
             , dbms_goldengate_hcadm_int.display_bytes(bytes) "Size"
             , (select count(*) from sys.streams$_apply_progress) Count
             , extents
             , blocks
          from dba_segments
          where owner =''SYS''
          and segment_name = ''STREAMS$_APPLY_PROGRESS'' 
          and exists (select 1 from dba_apply where purpose =''GoldenGate Apply'') 
  ',
      'HC,APPLY,PERF',
      'Apply Progress table - Segment',
      null,
      'YES',
      'APPLY', 
      'Segment Size and Count on sys.streams$_apply_progress table',
      'If the size of the segment or the count becomes too large, the table might be reorganized (Contact Oracle Support)',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_APPLY,DBA_SEGMENTS,STREAMS$_APPLY_PROGRESS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'logmnr_ckpt_count',
      null,
      null,
      ' select owner||''.''||segment_name object
             , tablespace_name
             , dbms_goldengate_hcadm_int.display_bytes(bytes) "Size"
             , (select count(*) from system.logmnr_restart_ckpt$) Count
             , extents
             , blocks
          from dba_segments
          where owner =''SYSTEM''
          and segment_name = ''LOGMNR_RESTART_CKPT$''
          and exists (select 1 from dba_capture where purpose =''GoldenGate Capture'')
  ',
      'HC,CAPTURE,PERF',
      'Information about LogMiner Restart Checkpoint table',
      null,
      'YES',
      'CAPTURE', 
      'Segment Size and Count on system.logmnr_restart_ckpt$ table',
      'If the size of the segment or the count becomes too large, the table might be reorganized (Contact Oracle Support)',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'DBA_CAPTURE,DBA_SEGMENTS,LOGMNR_RESTART_CKPT$',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,SQL,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sql_fts',
      null,
      null,
      ' select sp1.object_owner||''.''||sp1.object_name table_name
          from gv$sqlarea  sa, gv$sql_plan sp1
          where sa.sql_id = sp1.sql_id 
          and sa.inst_id = sp1.inst_id
          and sp1.depth < 2
          and (sp1.object_owner,sp1.object_name,sp1.inst_id) in (select destination_table_owner,destination_table_name,inst_id from gv$goldengate_table_stats )
          and sa.parsing_schema_name in (select username from DBA_GOLDENGATE_PRIVILEGES)
          and (sa.action LIKE ''OGG%'' or sa.module like ''OGG%'' or sa.module like ''GoldenGate%'')
          and sa.command_type in (3,6,7)
          and 0 = (select count(*) from gv$sql_plan sp2 where sp2.object_owner in (''SYS'',''SYSTEM'') and sp2.sql_id =sa.sql_id and sp2.inst_id = sa.inst_id)
          and 0 = (select count(*) from gv$sql_plan sp2 where sp2.options in (''UNIQUE SCAN'')       and sp2.sql_id =sa.sql_id and sp2.inst_id = sa.inst_id ) 
  ',
      'HC,DATABASE,SQL,PERF',
      'Full table scans done by Replicat',
      null,
      'YES',
      'APPLY', 
      'Full table scans done by Replicat',
      'In case of Performance degraduation due to FTS, check indexing (PK,UI) table',
      '11.2.0.4.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,SQL,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sql_ddl',
      null,
      null,
      'select session_id
            , module
            , action 
            , sql_opname
            , count(*) "Count"
            , max(sample_time) last
          from gv$active_session_history
          where sql_opname in (''CREATE TABLE'',''DROP TABLE'',''ALTER TABLE'',''CREATE INDEX'',''DROP INDEX'',''ALTER INDEX'')
          and action like ''%Receiver%''
          group by session_id,module,action,sql_opname
  ',
      'HC,DATABASE,SQL,PERF',
      'DDL performed by Replicat',
      null,
      'YES',
      'APPLY', 
      'DDL performed by Replicat [CREATE|ALTER|DROP][INDEX|TABLE] (Sample based on ASH)',
      'DDL serialized the Replicat',
      '11.2.0.4.0',
      '',
      '0',
      'V$ACTIVE_SESSION_HISTORY',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,MEMORY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sga_info',
      null,
      null,
      ' select inst_id
              ,name
              ,dbms_goldengate_hcadm_int.display_bytes(bytes) "Size"
              ,nvl(resizeable,''n/a'') resizeable
          from gv$sgainfo order by bytes desc
  ',
      'HC,DATABASE,MEMORY,PERF',
      'Database Memory - SGA',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'GV$SGAINFO',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,MEMORY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sga_resize',
      null,
      null,
      ' select inst_id,component
		  ,oper_type,oper_mode,parameter
		  ,dbms_goldengate_hcadm_int.display_bytes(initial_size) initial_size
		  ,dbms_goldengate_hcadm_int.display_bytes(target_size) target_size
		  ,dbms_goldengate_hcadm_int.display_bytes(final_size) final_size
		  ,dbms_goldengate_hcadm_int.display_bytes(final_size-initial_size) delta_size
		  ,start_time,end_time,dbms_goldengate_hcadm_int.display_number((end_time-start_time)*24*60*60) time_window
		  ,status
	  from GV$SGA_RESIZE_OPS
	  where component =''streams pool''
	  order by inst_id asc, start_time desc
  ',
      'HC,DATABASE,MEMORY,PERF',
      'Database Memory Resize - SGA',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'GV$SGA_RESIZE_OPS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,MEMORY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sga_stat',
      null,
      null,
      ' select inst_id, pool,name
              ,dbms_goldengate_hcadm_int.display_bytes(bytes) "Size"
          from gv$sgastat
          where pool=''streams pool''
          order by inst_id asc,bytes desc
  ',
      'HC,DATABASE,MEMORY,PERF',
      'Streams Pool Statistics',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'V$SGASTAT',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,SESSION,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'gg_proc',
      null,
      null,
      ' SELECT s.inst_id, s.sid, s.serial#
             , s.module, s.action
             , s.BLOCKING_SESSION_STATUS 
             , s.BLOCKING_INSTANCE
             , s.BLOCKING_SESSION 
             , s.EVENT#
             , s.EVENT
             , s.WAIT_CLASS
             , s.WAIT_TIME
             , s.SECONDS_IN_WAIT 
             , p.LATCHWAIT
             , p.LATCHSPIN 
          FROM gv$session s, gv$process p
          WHERE s.inst_id = p.inst_id 
          AND   s.paddr = p.addr
          AND   s.wait_class != ''Idle''
          AND   s.action like ''OGG$%''
          ORDER BY s.inst_id, s.module, s.action
  ',
      'HC,DATABASE,SESSION,PERF',
      'GG related Process Analysis',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'V$PROCESS,V$SESSION',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,SQL,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sql_ela',
      null,
      null,
      ' SELECT action
          ,sql_id
          ,elapsed_time
          ,executions
		  ,round(elapsed_time/NULLIF(executions,0),2) "elapsed per Exec"
          ,cpu_time 
          ,dbms_goldengate_hcadm_int.display_number(100*cpu_time/NULLIF(elapsed_time,0)) "CPU [Percentage]"
          ,dbms_goldengate_hcadm_int.display_number(100*user_io_wait_time/NULLIF(elapsed_time,0)) "IO [Percentage]"
          ,rank
        FROM
          (SELECT ash.SESSION_ID ,
            ash.SESSION_SERIAL# ,
            ash.action ,
            sa.SQL_ID ,
            sa.FETCHES,
            sa.EXECUTIONS,
            sa.LOADS ,
            sa.INVAliDATIONS,
            sa.PARSE_CALLS ,
            sa.DISK_READS,
            sa.DIRECT_WRITES,
            sa.BUFFER_GETS ,
            sa.APPliCATION_WAIT_TIME,
            sa.CONCURRENCY_WAIT_TIME ,
            sa.CLUSTER_WAIT_TIME,
            sa.USER_IO_WAIT_TIME ,
            sa.ROWS_PROCESSED ,
            sa.COMMAND_TYPE,
            sa.OPTIMIZER_MODE,
            sa.OPTIMIZER_COST ,
            sa.PARSING_SCHEMA_NAME ,
            sa.HASH_VALUE,
            sa.PLAN_HASH_VALUE ,
            sa.CPU_TIME,
            sa.ELAPSED_TIME ,
            sa.OBJECT_STATUS,
            sa.LAST_LOAD_TIME ,
            sa.IS_OBSOLETE,
            sa.CHILD_LATCH ,
            sa.LAST_ACTIVE_TIME ,
            MAX(ash.sample_time) ,
            RANK() OVER (PARTITION BY ash.action ORDER BY sa.elapsed_time DESC) RANK
          FROM v$sqlarea sa,
            v$active_session_history ash
          WHERE ash.sql_id = sa.sql_id
          AND (ash.action LIKE ''OGG%'' or ash.module like ''OGG%'' or ash.module like ''GoldenGate%'')
          GROUP BY ash.SESSION_ID ,
            ash.SESSION_SERIAL# ,
            ash.action ,
            sa.SQL_ID ,
            sa.FETCHES,
            sa.EXECUTIONS,
            sa.LOADS ,
            sa.INVAliDATIONS,
            sa.PARSE_CALLS ,
            sa.DISK_READS,
            sa.DIRECT_WRITES,
            sa.BUFFER_GETS ,
            sa.APPliCATION_WAIT_TIME,
            sa.CONCURRENCY_WAIT_TIME ,
            sa.CLUSTER_WAIT_TIME,
            sa.USER_IO_WAIT_TIME ,
            sa.ROWS_PROCESSED ,
            sa.COMMAND_TYPE,
            sa.OPTIMIZER_MODE,
            sa.OPTIMIZER_COST ,
            sa.PARSING_SCHEMA_NAME ,
            sa.HASH_VALUE,
            sa.PLAN_HASH_VALUE ,
            sa.CPU_TIME,
            sa.ELAPSED_TIME ,
            sa.OBJECT_STATUS,
            sa.LAST_LOAD_TIME ,
            sa.IS_OBSOLETE,
            sa.CHILD_LATCH ,
            sa.LAST_ACTIVE_TIME
          )
      WHERE rank < 4
  ',
      'HC,DATABASE,SQL,PERF',
      'GG related SQL: Elapsed Time',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '',
      '0',
      'V$ACTIVE_SESSION_HISTORY,V$SQLAREA',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,SQL,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sql_cpu',
      null,
      null,
      '  SELECT action
          ,sql_id
          ,cpu_time 
          ,executions
          ,round(cpu_time/NULLIF(executions,0),2) "elapsed per Exec"
          ,elapsed_time
          ,dbms_goldengate_hcadm_int.display_number(100*cpu_time/NULLIF(elapsed_time,0)) "CPU [Percentage]"
          ,dbms_goldengate_hcadm_int.display_number(100*user_io_wait_time/NULLIF(elapsed_time,0)) "IO [Percentage]"
          ,rank
        FROM
          (SELECT ash.SESSION_ID ,
            ash.SESSION_SERIAL# ,
            ash.action ,
            sa.SQL_ID ,
            sa.FETCHES,
            sa.EXECUTIONS,
            sa.LOADS ,
            sa.INVAliDATIONS,
            sa.PARSE_CALLS ,
            sa.DISK_READS,
            sa.DIRECT_WRITES,
            sa.BUFFER_GETS ,
            sa.APPliCATION_WAIT_TIME,
            sa.CONCURRENCY_WAIT_TIME ,
            sa.CLUSTER_WAIT_TIME,
            sa.USER_IO_WAIT_TIME ,
            sa.ROWS_PROCESSED ,
            sa.COMMAND_TYPE,
            sa.OPTIMIZER_MODE,
            sa.OPTIMIZER_COST ,
            sa.PARSING_SCHEMA_NAME ,
            sa.HASH_VALUE,
            sa.PLAN_HASH_VALUE ,
            sa.CPU_TIME,
            sa.ELAPSED_TIME ,
            sa.OBJECT_STATUS,
            sa.LAST_LOAD_TIME ,
            sa.IS_OBSOLETE,
            sa.CHILD_LATCH ,
            sa.LAST_ACTIVE_TIME ,
            MAX(ash.sample_time) ,
            RANK() OVER (PARTITION BY ash.action ORDER BY sa.disk_reads DESC) RANK
          FROM v$sqlarea sa,
            v$active_session_history ash
          WHERE ash.sql_id = sa.sql_id
          AND (ash.action LIKE ''OGG%'' or ash.module like ''OGG%'' or ash.module like ''GoldenGate%'') 
          GROUP BY ash.SESSION_ID ,
            ash.SESSION_SERIAL# ,
            ash.action ,
            sa.SQL_ID ,
            sa.FETCHES,
            sa.EXECUTIONS,
            sa.LOADS ,
            sa.INVAliDATIONS,
            sa.PARSE_CALLS ,
            sa.DISK_READS,
            sa.DIRECT_WRITES,
            sa.BUFFER_GETS ,
            sa.APPliCATION_WAIT_TIME,
            sa.CONCURRENCY_WAIT_TIME ,
            sa.CLUSTER_WAIT_TIME,
            sa.USER_IO_WAIT_TIME ,
            sa.ROWS_PROCESSED ,
            sa.COMMAND_TYPE,
            sa.OPTIMIZER_MODE,
            sa.OPTIMIZER_COST ,
            sa.PARSING_SCHEMA_NAME ,
            sa.HASH_VALUE,
            sa.PLAN_HASH_VALUE ,
            sa.CPU_TIME,
            sa.ELAPSED_TIME ,
            sa.OBJECT_STATUS,
            sa.LAST_LOAD_TIME ,
            sa.IS_OBSOLETE,
            sa.CHILD_LATCH ,
            sa.LAST_ACTIVE_TIME
          )
      WHERE rank < 4
  ',
      'HC,DATABASE,SQL,PERF',
      'GG related SQL: CPU Time',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '',
      '0',
      'V$ACTIVE_SESSION_HISTORY,V$SQLAREA',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,SQL,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sql_io',
      null,
      null,
      '  SELECT action
         ,sql_id
         ,user_io_wait_time
         ,executions
         ,round(user_io_wait_time/NULLIF(executions,0),2) "IO per Excec"
         ,elapsed_time
         ,dbms_goldengate_hcadm_int.display_number(100*cpu_time/NULLIF(elapsed_time,0)) "CPU [Percentage]"
         ,dbms_goldengate_hcadm_int.display_number(100*user_io_wait_time/NULLIF(elapsed_time,0)) "IO [Percentage]"
         ,rank
        FROM
          (SELECT ash.SESSION_ID ,
            ash.SESSION_SERIAL# ,
            ash.action ,
            sa.SQL_ID ,
            sa.EXECUTIONS,
            sa.USER_IO_WAIT_TIME ,
            sa.CPU_TIME,
            sa.ELAPSED_TIME ,
            MAX(ash.sample_time) ,
            RANK() OVER (PARTITION BY ash.action ORDER BY sa.USER_IO_WAIT_TIME DESC) RANK
          FROM v$sqlarea sa,
            v$active_session_history ash
          WHERE ash.sql_id = sa.sql_id
          AND (ash.action LIKE ''OGG%'' or ash.module like ''OGG%'' or ash.module like ''GoldenGate%'')
          GROUP BY ash.SESSION_ID ,
            ash.SESSION_SERIAL# ,
            ash.action ,
            sa.SQL_ID ,
            sa.EXECUTIONS,
            sa.CPU_TIME,
            sa.USER_IO_WAIT_TIME,
            sa.ELAPSED_TIME
          )
      WHERE rank < 4
  ',
      'HC,DATABASE,SQL,PERF',
      'GG related SQL: IO Time',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '',
      '0',
      'V$ACTIVE_SESSION_HISTORY,V$SQLAREA',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,SQL,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sql_exe',
      null,
      null,
      '  SELECT action
         ,sql_id
         ,executions
		 ,ROWS_PROCESSED
		 ,dbms_goldengate_hcadm_int.display_number(100*ROWS_PROCESSED/NULLIF(executions,0)) "Rows per Exec"
         ,elapsed_time
         ,dbms_goldengate_hcadm_int.display_number(100*cpu_time/NULLIF(elapsed_time,0)) "CPU [Percentage]"
         ,dbms_goldengate_hcadm_int.display_number(100*user_io_wait_time/NULLIF(elapsed_time,0)) "IO [Percentage]"
         ,rank
        FROM
          (SELECT ash.SESSION_ID ,
            ash.SESSION_SERIAL# ,
            ash.action ,
            sa.SQL_ID ,
            sa.FETCHES,
            sa.EXECUTIONS,
            sa.LOADS ,
            sa.INVAliDATIONS,
            sa.PARSE_CALLS ,
            sa.DISK_READS,
            sa.DIRECT_WRITES,
            sa.BUFFER_GETS ,
            sa.APPliCATION_WAIT_TIME,
            sa.CONCURRENCY_WAIT_TIME ,
            sa.CLUSTER_WAIT_TIME,
            sa.USER_IO_WAIT_TIME ,
            sa.ROWS_PROCESSED ,
            sa.COMMAND_TYPE,
            sa.OPTIMIZER_MODE,
            sa.OPTIMIZER_COST ,
            sa.PARSING_SCHEMA_NAME ,
            sa.HASH_VALUE,
            sa.PLAN_HASH_VALUE ,
            sa.CPU_TIME,
            sa.ELAPSED_TIME ,
            sa.OBJECT_STATUS,
            sa.LAST_LOAD_TIME ,
            sa.IS_OBSOLETE,
            sa.CHILD_LATCH ,
            sa.LAST_ACTIVE_TIME ,
            MAX(ash.sample_time) ,
            RANK() OVER (PARTITION BY ash.action ORDER BY sa.executions DESC) RANK
          FROM v$sqlarea sa,
            v$active_session_history ash
          WHERE ash.sql_id = sa.sql_id
          AND (ash.action LIKE ''OGG%'' or ash.module like ''OGG%'' or ash.module like ''GoldenGate%'')
          GROUP BY ash.SESSION_ID ,
            ash.SESSION_SERIAL# ,
            ash.action ,
            sa.SQL_ID ,
            sa.FETCHES,
            sa.EXECUTIONS,
            sa.LOADS ,
            sa.INVAliDATIONS,
            sa.PARSE_CALLS ,
            sa.DISK_READS,
            sa.DIRECT_WRITES,
            sa.BUFFER_GETS ,
            sa.APPliCATION_WAIT_TIME,
            sa.CONCURRENCY_WAIT_TIME ,
            sa.CLUSTER_WAIT_TIME,
            sa.USER_IO_WAIT_TIME ,
            sa.ROWS_PROCESSED ,
            sa.COMMAND_TYPE,
            sa.OPTIMIZER_MODE,
            sa.OPTIMIZER_COST ,
            sa.PARSING_SCHEMA_NAME ,
            sa.HASH_VALUE,
            sa.PLAN_HASH_VALUE ,
            sa.CPU_TIME,
            sa.ELAPSED_TIME ,
            sa.OBJECT_STATUS,
            sa.LAST_LOAD_TIME ,
            sa.IS_OBSOLETE,
            sa.CHILD_LATCH ,
            sa.LAST_ACTIVE_TIME
          )
      WHERE rank < 4
  ',
      'HC,DATABASE,SQL,PERF',
      'GG related SQL:Executions',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '',
      '0',
      'V$ACTIVE_SESSION_HISTORY,V$SQLAREA',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,SQL,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sql_stmt',
      null,
      null,
      ' SELECT s.action ,
        sa.sql_id ,
        sa.FETCHES,
        sa.EXECUTIONS,
        sa.LOADS ,
        sa.INVALIDATIONS,
        sa.PARSE_CALLS ,
        sa.DISK_READS,
        sa.DIRECT_WRITES,
        sa.BUFFER_GETS ,
        sa.APPLICATION_WAIT_TIME,
        sa.CONCURRENCY_WAIT_TIME ,
        sa.CLUSTER_WAIT_TIME,
        sa.USER_IO_WAIT_TIME ,
        sa.ROWS_PROCESSED ,
        sa.COMMAND_TYPE,
        sa.OPTIMIZER_MODE,
        sa.OPTIMIZER_COST ,
        sa.PARSING_SCHEMA_NAME ,
        sa.HASH_VALUE,
        sa.PLAN_HASH_VALUE ,
        sa.CPU_TIME,
        sa.ELAPSED_TIME ,
        sa.OBJECT_STATUS,
        sa.LAST_LOAD_TIME ,
        sa.IS_OBSOLETE,
        sa.CHILD_LATCH ,
        sa.LAST_ACTIVE_TIME
      FROM v$sqlarea sa,
        v$session s
      WHERE s.sql_address  = sa.address
      AND s.sql_hash_value = sa.hash_value
      AND (s.action LIKE ''OGG%'' or s.module like ''OGG%'' or s.module like ''GoldenGate%'')
  ',
      'HC,DATABASE,SQL,PERF',
      'GG related SQL: Statement',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,SQL,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sql_ash_stmt',
      null,
      null,
      ' SELECT ash.sql_id,
        sa.sql_text,
        MAX(ash.sample_time)
      FROM v$sqlarea sa,
        v$active_session_history ash
      WHERE ash.sql_id = sa.sql_id
      AND (ash.action LIKE ''OGG%'' or ash.module like ''OGG%'' or ash.module like ''GoldenGate%'')
      GROUP BY ash.sql_id,
        sa.sql_text
  ',
      'HC,DATABASE,SQL,PERF',
      'GG related SQL: Statement (ASH)',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '',
      '0',
      'V$ACTIVE_SESSION_HISTORY,V$SQLAREA',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,SQL,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sql_cursor',
      null,
      null,
      ' SELECT sql_id ,
          MAX(sql_child_number) MaxCursors
        FROM v$active_session_history
        WHERE sample_time > sysdate -15/(24*60)
        AND (module LIKE ''OGG%'' OR module = ''GoldenGate'')
        GROUP BY sql_id
        HAVING MAX(sql_child_number) > 1
        ORDER BY MAX(sql_child_number) DESC
  ',
      'HC,DATABASE,SQL,PERF',
      'GG related SQL: Cursor',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '',
      '0',
      'V$ACTIVE_SESSION_HISTORY',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,SQL,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sql_inv',
      null,
      null,
      ' SELECT sql_id ,
          child_number ,
          cursor_name ,
          cursor_value
        FROM v$sql_shared_cursor unpivot( cursor_value FOR cursor_name IN ("UNBOUND_CURSOR" AS ''UNBOUND_CURSOR'' ,"SQL_TYPE_MISMATCH" AS ''SQL_TYPE_MISMATCH'' ,"OPTIMIZER_MISMATCH" AS ''OPTIMIZER_MISMATCH'' ,"OUTLINE_MISMATCH" AS ''OUTLINE_MISMATCH'' ,"STATS_ROW_MISMATCH" AS ''STATS_ROW_MISMATCH'' ,"LITERAL_MISMATCH" AS ''LITERAL_MISMATCH'' ,"FORCE_HARD_PARSE" AS ''FORCE_HARD_PARSE'' ,"EXPLAIN_PLAN_CURSOR" AS ''EXPLAIN_PLAN_CURSOR'' ,"BUFFERED_DML_MISMATCH" AS ''BUFFERED_DML_MISMATCH'' ,"PDML_ENV_MISMATCH" AS ''PDML_ENV_MISMATCH'' ,"INST_DRTLD_MISMATCH" AS ''INST_DRTLD_MISMATCH'' ,"SLAVE_QC_MISMATCH" AS ''SLAVE_QC_MISMATCH'' ,"TYPECHECK_MISMATCH" AS ''TYPECHECK_MISMATCH'' ,"AUTH_CHECK_MISMATCH" AS ''AUTH_CHECK_MISMATCH'' ,"BIND_MISMATCH" AS ''BIND_MISMATCH'' ,"DESCRIBE_MISMATCH" AS ''DESCRIBE_MISMATCH'' ,"LANGUAGE_MISMATCH" AS ''LANGUAGE_MISMATCH'' ,"TRANSLATION_MISMATCH" AS ''TRANSLATION_MISMATCH'' ,"BIND_EQUIV_FAILURE" AS ''BIND_EQUIV_FAILURE'' ,"INSUFF_PRIVS" AS ''INSUFF_PRIVS'' ,"INSUFF_PRIVS_REM" AS
          ''INSUFF_PRIVS_REM'' ,"REMOTE_TRANS_MISMATCH"                                       AS ''REMOTE_TRANS_MISMATCH'' ,"LOGMINER_SESSION_MISMATCH" AS ''LOGMINER_SESSION_MISMATCH'' ,"INCOMP_LTRL_MISMATCH" AS ''INCOMP_LTRL_MISMATCH'' ,"OVERLAP_TIME_MISMATCH" AS ''OVERLAP_TIME_MISMATCH'' ,"EDITION_MISMATCH" AS ''EDITION_MISMATCH'' ,"MV_QUERY_GEN_MISMATCH" AS ''MV_QUERY_GEN_MISMATCH'' ,"USER_BIND_PEEK_MISMATCH" AS ''USER_BIND_PEEK_MISMATCH'' ,"TYPCHK_DEP_MISMATCH" AS ''TYPCHK_DEP_MISMATCH'' ,"NO_TRIGGER_MISMATCH" AS ''NO_TRIGGER_MISMATCH'' ,"FLASHBACK_CURSOR" AS ''FLASHBACK_CURSOR'' ,"ANYDATA_TRANSFORMATION" AS ''ANYDATA_TRANSFORMATION'' ,"PDDL_ENV_MISMATCH" AS ''PDDL_ENV_MISMATCH'' ,"TOP_LEVEL_RPI_CURSOR" AS ''TOP_LEVEL_RPI_CURSOR'' ,"DIFFERENT_LONG_LENGTH" AS ''DIFFERENT_LONG_LENGTH'' ,"LOGICAL_STANDBY_APPLY" AS ''LOGICAL_STANDBY_APPLY'' ,"DIFF_CALL_DURN" AS ''DIFF_CALL_DURN'' ,"BIND_UACS_DIFF" AS ''BIND_UACS_DIFF'' ,"PLSQL_CMP_SWITCHS_DIFF" AS ''PLSQL_CMP_SWITCHS_DIFF'' ,"CURSOR_PARTS_MISMATCH" AS
          ''CURSOR_PARTS_MISMATCH'' ,"STB_OBJECT_MISMATCH"                                    AS ''STB_OBJECT_MISMATCH'' ,"CROSSEDITION_TRIGGER_MISMATCH" AS ''CROSSEDITION_TRIGGER_MISMATCH'' ,"PQ_SLAVE_MISMATCH" AS ''PQ_SLAVE_MISMATCH'' ,"TOP_LEVEL_DDL_MISMATCH" AS ''TOP_LEVEL_DDL_MISMATCH'' ,"MULTI_PX_MISMATCH" AS ''MULTI_PX_MISMATCH'' ,"BIND_PEEKED_PQ_MISMATCH" AS ''BIND_PEEKED_PQ_MISMATCH'' ,"MV_REWRITE_MISMATCH" AS ''MV_REWRITE_MISMATCH'' ,"ROLL_INVALID_MISMATCH" AS ''ROLL_INVALID_MISMATCH'' ,"OPTIMIZER_MODE_MISMATCH" AS ''OPTIMIZER_MODE_MISMATCH'' ,"PX_MISMATCH" AS ''PX_MISMATCH'' ,"MV_STALEOBJ_MISMATCH" AS ''MV_STALEOBJ_MISMATCH'' ,"FLASHBACK_TABLE_MISMATCH" AS ''FLASHBACK_TABLE_MISMATCH'' ,"LITREP_COMP_MISMATCH" AS ''LITREP_COMP_MISMATCH'' ,"PLSQL_DEBUG" AS ''PLSQL_DEBUG'' ,"LOAD_OPTIMIZER_STATS" AS ''LOAD_OPTIMIZER_STATS'' ,"ACL_MISMATCH" AS ''ACL_MISMATCH'' ,"FLASHBACK_ARCHIVE_MISMATCH" AS ''FLASHBACK_ARCHIVE_MISMATCH'' ,"LOCK_USER_SCHEMA_FAILED" AS ''LOCK_USER_SCHEMA_FAILED'' ,"REMOTE_MAPPING_MISMATCH" AS
          ''REMOTE_MAPPING_MISMATCH'' ,"LOAD_RUNTIME_HEAP_FAILED"                             AS ''LOAD_RUNTIME_HEAP_FAILED'' ,"HASH_MATCH_FAILED" AS ''HASH_MATCH_FAILED'' ,"PURGED_CURSOR" AS ''PURGED_CURSOR'' ,"BIND_LENGTH_UPGRADEABLE" AS ''BIND_LENGTH_UPGRADEABLE'' ,"USE_FEEDBACK_STATS" AS ''USE_FEEDBACK_STATS'' ))
        WHERE cursor_value = ''Y''
        AND sql_id        IN
          (SELECT /*+unnest*/ DISTINCT ash.SQL_ID
          FROM v$active_session_history ash
          WHERE (ash.action LIKE ''OGG%'' or ash.module like ''OGG%'' or ash.module like ''GoldenGate%'')
          )
      ORDER BY 1 ASC,
        2 DESC
  ',
      'HC,DATABASE,SQL,PERF',
      'GG related SQL: Cursor Invalidation',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,SESSION,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sesstat_io',
      null,
      null,
      ' select s.sid, s.action, n.name, ss.value 
          from gv$sesstat ss, gv$statname n, gv$session s
          where ss.statistic# = n.statistic#
          and   ss.inst_id    = s.inst_id
          and   ss.inst_id    = n.inst_id
          and   ss.sid        = s.sid
          and   s.action like ''OGG$%''
          and   ss.value > 0
          and   UPPER(n.name) like ''% IO %''
          order by s.sid, s.action, ss.value desc
  ',
      'HC,DATABASE,SESSION,PERF',
      'GG related Session File IO',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'GV$SESSION,GV$SESSTAT,GV$STATNAME',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,SESSION,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sesstat_net',
      null,
      null,
      ' select s.sid, s.action, n.name, ss.value 
          from gv$sesstat ss, gv$statname n, gv$session s
          where ss.statistic# = n.statistic#
          and   ss.inst_id    = n.inst_id
          and   ss.inst_id    = s.inst_id
          and   ss.sid        = s.sid
          and   s.action like ''OGG$%''
          and   ss.value > 0
          and   UPPER(name) like ''%NET%''
          order by s.sid, s.action, ss.value desc
  ',
      'HC,DATABASE,SESSION,PERF',
      'GG related Session Network IO',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'GV$SESSION,GV$SESSTAT,GV$STATNAME',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,SESSION,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sesstat',
      null,
      null,
      ' SELECT s.sid, s.action
             , CASE n.class WHEN 1 then ''User''
                     when 2 then ''Redo''
                     when 4 then ''Enqueue''
                     when 8 then ''Cache''
                     when 16 then ''OS''
                     when 32 then ''RAC''
                     when 64 then ''SQL''
                     when 128 then ''Debug''
               END class
             , sum(ss.value)
          FROM gv$sesstat ss, gv$session s, gv$statname n
          WHERE ss.sid        = s.sid
          AND   ss.statistic# = n.statistic#
          AND   s.action like ''OGG%''
          AND   ss.value > 0
          AND   n.class != 128
          GROUP BY s.sid, s.action, class
          ORDER BY s.sid, s.action, sum(ss.value) desc
  ',
      'HC,DATABASE,SESSION,PERF',
      'GG related Session Statistics',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'V$SESSION,V$SESSTAT,V$STATNAME',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,ASH,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ash_io',
      null,
      null,
      ' SELECT action
             , dbms_goldengate_hcadm_int.display_number(1000000*SUM(DELTA_READ_IO_REQUESTS)/SUM(DELTA_TIME)) read_req 
             , dbms_goldengate_hcadm_int.display_number(1000000*SUM(DELTA_WRITE_IO_REQUESTS)/SUM(DELTA_TIME)) write_req 
             , dbms_goldengate_hcadm_int.display_number(1000000/(1024)*SUM(DELTA_READ_IO_BYTES)/SUM(DELTA_TIME)) read_kbyte 
             , dbms_goldengate_hcadm_int.display_number(1000000/(1024)*SUM(DELTA_WRITE_IO_BYTES)/SUM(DELTA_TIME)) write_kbyte 
             , dbms_goldengate_hcadm_int.display_number(1000000/(1024)*SUM(DELTA_INTERCONNECT_IO_BYTES)/SUM(DELTA_TIME)) interconnect_kbyte
          FROM v$active_session_history
          WHERE sample_time > sysdate -15/(24*60)
          AND action like ''OGG$%''
          GROUP BY  action
  ',
      'HC,DATABASE,ASH,PERF',
      'GG related Session Statistics',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '',
      '0',
      'V$ACTIVE_SESSION_HISTORY',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,ASH,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'wait_ash_obj',
      null,
      null,
      ' SELECT owner||''.''||object_name object_name
      ,object_type
      ,Wait_Number
      ,Total_Time_Waited
      ,rank
  FROM
    (SELECT o.owner
           ,o.object_name
           ,o.object_type 
           ,COUNT(*) Wait_Number 
           ,SUM(ash.time_waited) Total_Time_Waited 
           ,RANK() OVER (PARTITION BY object_type ORDER BY SUM(ash.time_waited) DESC) RANK
       FROM v$active_session_history ash, dba_objects o
         WHERE ash.current_obj# = o.object_id
         AND ash.sample_time    > sysdate -15/(24*60)
         AND action like ''OGG$%''
         GROUP BY o.owner, o.object_name, o.object_type
     )
  WHERE rank < 6
  ',
      'HC,DATABASE,ASH,PERF',
      'GG related Object Wait time (ASH)',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '',
      '0',
      'DBA_OBJECTS,V$ACTIVE_SESSION_HISTORY',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,ASH,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ash_io_tbs',
      null,
      null,
      ' SELECT f.tablespace_name tablespace_name
             , COUNT(*) wait_number 
             , SUM(h.time_waited) total_time_waited
          FROM v$active_session_history h,
          dba_data_files f
          WHERE h.current_file# = f.file_id
          AND h.sample_time  > sysdate -15/(24*60)
          AND (h.program LIKE ''replicat%''
          OR h.program LIKE ''extract%'')
          GROUP BY f.tablespace_name
          ORDER BY 3 DESC
  ',
      'HC,DATABASE,ASH,PERF',
      'GG related Tablespace IO',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '',
      '0',
      'DBA_DATA_FILES,V$ACTIVE_SESSION_HISTORY',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,SESSION,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sql_lock',
      null,
      null,
      ' SELECT action
      ,s.sid
      ,s.serial#
      ,s.username
      ,s.process
      ,p.pid
      ,p.spid
      ,a.owner||''.''||a.object object
  FROM v$process p, v$session s, v$access a
  WHERE a.sid      = s.sid
  AND p.addr       = s.paddr
  AND a.owner NOT IN (''SYS'',''PUBLIC'')
  AND a.type       = ''TABLE''
  AND s.sid IN
   (SELECT l.sid
      FROM v$lock l
      WHERE (id1,id2) IN
        (SELECT b.id1, b.id2
           FROM v$lock b
           WHERE b.id1  =l.id1
           AND b.id2    =l.id2
           AND b.request > 0
        )
    )
  AND action like ''OGG$%''
  ',
      'HC,DATABASE,SESSION,PERF',
      'GG related Locking',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '',
      '0',
      'V$ACCESS,V$LOCK,V$PROCESS,V$SESSION',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,ASH,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ash_lock',
      null,
      null,
      ' SELECT action
      ,session_id,session_serial# 
      ,sql_opname
      ,event
      ,wait_class 
      ,seq#
      ,p1text, p1
      ,p2text, p2
      ,p3text, p3 
      ,blocking_session,blocking_session_serial#
      ,xid
  FROM v$active_session_history
  WHERE sample_time > sysdate -15/(24*60)
  AND action like ''OGG%''
  AND blocking_session IS NOT NULL
  ORDER BY action
  ',
      'HC,DATABASE,ASH,PERF',
      'GG related Blocking (ASH)',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '',
      '0',
      'V$ACTIVE_SESSION_HISTORY',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,ASH,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'waittime',
      null,
      null,
      ' SELECT action 
      ,stm.stat_name
     ,stm.value
FROM v$sess_time_model stm, v$session s
  WHERE stm.sid = s.sid
  AND (s.action LIKE ''OGG%'' or s.module like ''OGG%'' or s.module like ''GoldenGate%'')
  AND value > 0
  ORDER BY module asc, value desc
  ',
      'HC,DATABASE,ASH,PERF',
      'GG related Session Time',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '',
      '0',
      'V$SESS_TIME_MODEL,V$SESSION',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,ASH,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ash_waittime',
      null,
      null,
      ' SELECT ash.wait_class WaitClass 
      ,SUM(ash.wait_time +ash.time_waited) WaitTime 
      ,COUNT(*) COUNT
  FROM v$active_session_history ash
  WHERE ash.sample_time > sysdate -15/(24*60)
  AND (ash.action LIKE ''OGG%'' or ash.module like ''OGG%'' or ash.module like ''GoldenGate%'')
  GROUP BY ash.wait_class
  ORDER BY 2 DESC
  ',
      'HC,DATABASE,ASH,PERF',
      'GG related Wait Time  (ASH)',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '',
      '0',
      'V$ACTIVE_SESSION_HISTORY',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,ASH,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ash_waitstat',
      null,
      null,
      ' SELECT action
      ,s.process , s.sid||'',''||s.serial# Session_ID
      ,NVL(ash_capture.EVENT,''Running on/Waiting for CPU'') event
      ,ash_capture.event_count , ash_total.total_count 
      ,dbms_goldengate_hcadm_int.display_number(ash_capture.event_count*100/NULLIF(ash_total.total_count,0)) percentage 
FROM
   (SELECT SESSION_ID, SESSION_SERIAL#
          ,EVENT
          ,COUNT(sample_time) AS EVENT_COUNT
      FROM v$active_session_history
      WHERE sample_time > sysdate - 15/24/60
      GROUP BY session_id, session_serial#, event) ash_capture
  ,(SELECT COUNT(DISTINCT sample_time) AS TOTAL_COUNT
      FROM v$active_session_history
      WHERE sample_time > sysdate - 15/24/60) ash_total
  , v$session s
  WHERE s.SID   = ash_capture.SESSION_ID
  AND s.serial# = ash_capture.SESSION_SERIAL#
  AND (s.action LIKE ''OGG%'' or s.module like ''OGG%'' or s.module like ''GoldenGate%'')
  ORDER BY action ASC , percentage DESC
  ',
      'HC,DATABASE,ASH,PERF',
      'GG related Wait Statistics (ASH)',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '',
      '0',
      'ASH_CAPTURE,ASH_TOTAL,V$ACTIVE_SESSION_HISTORY,V$SESSION',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,ASH,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sql_ash_wait',
      null,
      null,
      ' SELECT ash.action 
      ,sa.sql_id
      ,SUM(ash.wait_time + ash.time_waited) "Wait Time"
  FROM v$active_session_history ash, v$sqlarea sa, dba_users u
  WHERE ash.sample_time > sysdate -15/(24*60)
  AND (ash.action LIKE ''OGG%'' or ash.module like ''OGG%'' or ash.module like ''GoldenGate%'')
  AND ash.sql_id  = sa.sql_id
  GROUP BY ash.action, sa.sql_id
  ORDER BY ash.action asc , SUM(ash.wait_time + ash.time_waited) desc
  ',
      'HC,DATABASE,ASH,PERF',
      'GG related SQL Wait Time',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '',
      '0',
      'DBA_USERS,V$ACTIVE_SESSION_HISTORY,V$SQLAREA',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,ASH,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'waitstat',
      null,
      null,
      ' SELECT action
      ,sw.EVENT 
      ,sw.P1TEXT, sw.P1, sw.P1RAW
      ,sw.P2TEXT, sw.P2, sw.P2RAW
      ,sw.P3TEXT, sw.P3, sw.P3RAW
      ,sw.WAIT_CLASS,sw.WAIT_TIME, sw.SECONDS_IN_WAIT
      ,sw.STATE 
      ,sw.WAIT_TIME_MICRO, sw.TIME_REMAINING_MICRO,sw.TIME_SINCE_LAST_WAIT_MICRO
  FROM v$session s, v$session_wait sw
  WHERE sw.sid = s.sid
  AND sw.wait_class !=''Idle''
  AND action like ''OGG$%''
  ',
      'HC,DATABASE,ASH,PERF',
      'GG related Wait Statistics',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '',
      '0',
      'V$SESSION,V$SESSION_WAIT',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,SESSION,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sess_event',
      null,
      null,
      ' SELECT action 
      ,se.WAIT_CLASS, se.EVENT 
      ,se.TOTAL_WAITS, se.TOTAL_TIMEOUTS
      ,se.TIME_WAITED, se.AVERAGE_WAIT, se.MAX_WAIT 
  FROM v$session s, v$session_event se
  WHERE se.sid = s.sid
  AND (s.action LIKE ''OGG%'' or s.module like ''OGG%'' or 
       s.module like ''GoldenGate%'')
  AND se.wait_class != ''Idle''
  and se.TIME_WAITED > 0
UNION ALL
SELECT action
      ,''CPU'' wait_class,sn.name
      ,0 total_waits
      ,0 total_timeouts
      ,st.value TIME_WAITED
      ,0 average_wait
      ,0 max_wait
  FROM v$session s, v$sesstat st, v$statname sn
  WHERE st.sid = s.sid
  AND st.statistic# = sn.statistic#
  AND sn.name  = ''CPU used when call started''
  AND (s.action LIKE ''OGG%'' or s.module like ''OGG%'' or s.module like ''GoldenGate%'')
  order by action asc,time_waited desc
  ',
      'HC,DATABASE,SESSION,PERF',
      'GG related Session Events',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.4.0','11.2.0.4.99') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,MEMORY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'pga_mem',
      null,
      null,
      ' SELECT s.action
              ,s.SID, s.SERIAL#
              ,s.process, p.spid
              ,s.PROGRAM
              ,dbms_goldengate_hcadm_int.display_bytes(p.PGA_USED_MEM)     "PGA_USED_MEM"
              ,dbms_goldengate_hcadm_int.display_bytes(p.PGA_ALLOC_MEM)    "PGA_ALLOC_MEM"
              ,dbms_goldengate_hcadm_int.display_bytes(p.PGA_FREEABLE_MEM) "PGA_FREEABLE_MEM"
              ,dbms_goldengate_hcadm_int.display_bytes(p.PGA_MAX_MEM)      "PGA_MAX_MEM"
          FROM gv$session s,gv$process p
          WHERE s.paddr = p.addr
          AND s.inst_id = p.inst_id
          AND (s.action LIKE ''OGG%'' or s.module like ''OGG%'' or s.module like ''GoldenGate%'')
          ORDER BY s.inst_id, s.action
  ',
      'HC,DATABASE,MEMORY,PERF',
      'GG Processes - PGA',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.4.0',
      '11.2.0.4.99',
      '0',
      'V$PROCESS,V$SESSION',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,SESSION,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'gg_proc',
      null,
      null,
      ' SELECT s.con_id, s.inst_id, s.sid, s.serial#
             , s.module, s.action
             , s.BLOCKING_SESSION_STATUS
             , s.BLOCKING_INSTANCE
             , s.BLOCKING_SESSION
             , s.EVENT#
             , s.EVENT
             , s.WAIT_CLASS
             , s.WAIT_TIME
             , s.SECONDS_IN_WAIT
             , p.LATCHWAIT
             , p.LATCHSPIN
          FROM gv$session s, gv$process p
          WHERE s.inst_id = p.inst_id
          AND   s.con_id  = p.con_id
          AND   s.paddr   = p.addr
          AND   s.wait_class != ''Idle''
          AND   s.action like ''OGG$%''
          ORDER BY s.con_id, s.inst_id, s.module, s.action
  ',
      'HC,DATABASE,SESSION,PERF',
      'GG related Process Analysis',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'V$PROCESS,V$SESSION',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE_APPLY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'gg_track_lcr',
      null,
      null,
      ' select con_id, inst_id
             , component_name, component_type, action, action_details
             , xid, object_owner||''.''||object_name object, command_type
             , message_creation_time, message_number,message_position
             , timestamp
          from gv$goldengate_message_tracking
          order by con_id, inst_id, tracking_label, timestamp        
  ',
      'HC,CAPTURE_APPLY,PERF',
      'GoldenGate LCR Tracking',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'GV$GOLDENGATE_MESSAGE_TRACKING',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_SERVER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_srvr_ash',
      null,
      null,
      ' SELECT a.con_id,  a.inst_id, a.apply_name|| '' - '' || a.server_id as apply_name
             , ash.event_count
             , ash_total.total_count
             , dbms_goldengate_hcadm_int.display_number(ash.event_count*100/NULLIF(ash_total.total_count,0)) as Percentage 
             , ''YES'' busy
             , NVL(ash.event,''on CPU or wait on CPU'') event
          FROM (SELECT con_id,  inst_id
                     , SESSION_ID
                     , SESSION_SERIAL#
                     , EVENT
                     , COUNT(sample_time) AS EVENT_COUNT
                  FROM  gv$active_session_history
                  WHERE sample_time > sysdate - dbms_goldengate_hcadm_int.get_current(''minutes_to_analyze'')/24/60
                  GROUP BY con_id, inst_id, session_id, session_serial#, event
               ) ash
            , (SELECT con_id, inst_id, COUNT(DISTINCT sample_time) AS TOTAL_COUNT
                FROM  gv$active_session_history
                WHERE sample_time > sysdate - dbms_goldengate_hcadm_int.get_current(''minutes_to_analyze'')/24/60
                GROUP BY con_id, inst_id
              ) ash_total
            , gv$gg_apply_server a
          WHERE a.sid     = ash.SESSION_ID
          AND   a.serial# = ash.SESSION_SERIAL#
          AND   a.inst_id = ash.inst_id
          AND   a.inst_id = ash_total.inst_id
          AND   a.con_id  = ash.con_id
          AND   a.con_id  = ash_total.con_id
          ORDER BY a.con_id, a.inst_id, apply_name, to_number(Percentage)
  ',
      'HC,APPLY,APPLY_SERVER,PERF',
      'Apply Server Processes',
      null,
      'YES',
      'APPLY', 
      'Ash Report Information about Apply Server Process Session',
      '- Based on the ASH Information, general Performance Tuning attempts might be derived',
      '12.1.0.0.0',
      '',
      '0',
      'ASH_TOTAL,V$ACTIVE_SESSION_HISTORY,V$GG_APPLY_SERVER',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_RECEIVER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_recv_ash',
      null,
      null,
      ' SELECT a.con_id, a.inst_id, a.apply_name
             , ash.event_count
             , ash_total.total_count
             , dbms_goldengate_hcadm_int.display_number(ash.event_count*100/NULLIF(ash_total.total_count,0)) as Percentage 
             , DECODE(ash.event, ''Streams AQ: enqueue blocked on low memory'', ''NO''
                               , ''Streams AQ: enqueue blocked due to flow control'', ''NO''
                               , ''REPL Capture/Apply: flow control'', ''NO''
                               , ''REPL Capture/Apply: memory'',''NO''
                               , ''YES'') busy
                               , nvl(ash.event,''on CPU or wait on CPU'') event
          FROM (SELECT con_id, inst_id, SESSION_ID
                     , SESSION_SERIAL#
                     , EVENT
                     , COUNT(sample_time) AS EVENT_COUNT
                  FROM  gv$active_session_history
                  WHERE sample_time >  sysdate - dbms_goldengate_hcadm_int.get_current(''minutes_to_analyze'')/24/60
                  GROUP BY con_id, inst_id, session_id, session_serial#, event
               ) ash
             , (SELECT con_id, inst_id, COUNT(DISTINCT sample_time) AS TOTAL_COUNT
                  FROM   gv$active_session_history
                  WHERE  sample_time > sysdate - dbms_goldengate_hcadm_int.get_current(''minutes_to_analyze'')/24/60
                  group by con_id,  inst_id
               ) ash_total
             , gv$gg_apply_receiver a
          WHERE a.sid                  = ash.SESSION_ID
          and   a.serial#              = ash.SESSION_SERIAL#
          and   a.source_database_name = ''replicat''
          and   a.inst_id              = ash.inst_id
          and   a.inst_id              = ash_total.inst_id
          and   a.con_id               = ash.con_id
          and   a.con_id               = ash_total.con_id
          order by a.con_id, a.inst_id, a.apply_name, to_number(Percentage)
  ',
      'HC,APPLY,APPLY_RECEIVER,PERF',
      'Apply Receiver Processes',
      null,
      'YES',
      'APPLY', 
      'Ash Report Information about Apply Network Receiver Session',
      '- Based on the ASH Information, general Performance Tuning attempts might be derived',
      '12.1.0.0.0',
      '',
      '0',
      'ASH_TOTAL,GLOBAL_NAME,V$ACTIVE_SESSION_HISTORY,V$PROPAGATION_RECEIVER,X$KWQPD',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_COORDINATOR,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_coord_ash',
      null,
      null,
      ' SELECT a.con_id, a.inst_id, a.apply_name
             , ash.event_count
             , ash_total.total_count
             , dbms_goldengate_hcadm_int.display_number(ash.event_count*100/NULLIF(ash_total.total_count,0)) as Percentage 
             , ''YES'' busy
             , NVL(ash.event,''on CPU or wait on CPU'') event
          FROM (SELECT con_id, inst_id
                     , SESSION_ID
                     , SESSION_SERIAL#
                     , EVENT
                     , COUNT(sample_time) AS EVENT_COUNT
                  FROM  gv$active_session_history
                  WHERE sample_time > sysdate - dbms_goldengate_hcadm_int.get_current(''minutes_to_analyze'')/24/60
                  GROUP BY con_id, inst_id, session_id, session_serial#, event
               ) ash
            , (SELECT con_id, inst_id, COUNT(DISTINCT sample_time) AS TOTAL_COUNT
                FROM  gv$active_session_history
                WHERE sample_time > sysdate - dbms_goldengate_hcadm_int.get_current(''minutes_to_analyze'')/24/60
                GROUP BY con_id, inst_id
              ) ash_total
            , gv$gg_apply_coordinator a
          WHERE a.sid = ash.SESSION_ID
          AND   a.serial# = ash.SESSION_SERIAL#
          AND   a.inst_id = ash.inst_id
          AND   a.inst_id = ash_total.inst_id
          AND   a.con_id  = ash.con_id
          AND   a.con_id  = ash_total.con_id
          ORDER BY a.con_id, a.inst_id, apply_name, Percentage  
  ',
      'HC,APPLY,APPLY_COORDINATOR,PERF',
      'Apply Coordinator Processes',
      null,
      'YES',
      'APPLY', 
      'Ash Report Information about Apply Coordinator Session',
      '- Based on the ASH Information, general Performance Tuning attempts might be derived',
      '12.1.0.0.0',
      '',
      '0',
      'ASH_TOTAL,V$ACTIVE_SESSION_HISTORY,V$GG_APPLY_COORDINATOR',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_READER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_read_ash',
      null,
      null,
      ' SELECT a.con_id, a.inst_id, a.apply_name
            , ash.event_count
            , ash_total.total_count
            , dbms_goldengate_hcadm_int.display_number(ash.event_count*100/NULLIF(ash_total.total_count,0)) as Percentage 
            , DECODE(ash.event,''rdbms ipc message'', ''NO'', ''YES'') busy
            , NVL(ash.event,''on CPU or wait on CPU'') event
          FROM (SELECT con_id, inst_id
                     , SESSION_ID
                     , SESSION_SERIAL#
                     , EVENT
                     , COUNT(sample_time) AS EVENT_COUNT
                  FROM  gv$active_session_history
                  WHERE sample_time > sysdate - dbms_goldengate_hcadm_int.get_current(''minutes_to_analyze'')/24/60
                  GROUP BY con_id, inst_id, session_id, session_serial#, event
               ) ash
            , (SELECT con_id, inst_id, COUNT(DISTINCT sample_time) AS TOTAL_COUNT
                FROM  gv$active_session_history
                WHERE sample_time > sysdate -dbms_goldengate_hcadm_int.get_current(''minutes_to_analyze'')/24/60
                GROUP BY con_id, inst_id
              ) ash_total
            , gv$gg_apply_reader a
          WHERE a.sid = ash.SESSION_ID
          AND   a.serial# = ash.SESSION_SERIAL#
          AND   a.inst_id = ash.inst_id
          AND   a.inst_id = ash_total.inst_id
          AND   a.con_id  = ash.con_id
          AND   a.con_id  = ash_total.con_id
          ORDER BY a.con_id, a.inst_id, apply_name, Percentage 
 ',
      'HC,APPLY,APPLY_READER,PERF',
      'Apply Reader Processes',
      null,
      'YES',
      'APPLY', 
      'Ash Report Information about Apply Reader Session',
      '- Based on the ASH Information, general Performance Tuning attempts might be derived',
      '12.1.0.0.0',
      '',
      '0',
      'ASH_TOTAL,V$ACTIVE_SESSION_HISTORY,V$GG_APPLY_READER',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_SERVER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_srvr_stats',
      null,
      null,
      ' SELECT a.con_id, a.inst_id
             , a.apply_name
             , a.server_id
             , substr(s.PROGRAM,INSTR(S.PROGRAM,''('')+1,4) PROCESS_NAME
             , a.sid, a.serial#
             , a.STATE
             , a.xidusn||''.''||a.xidslt||''.''||a.xidsqn CURRENT_TXN
             , a.TOTAL_ASSIGNED ASSIGNED
             , a.TOTAL_MESSAGES_APPLIED msg_APPLIED
             , a.MESSAGE_SEQUENCE
             , a.lcr_retry_iteration
             , a.txn_retry_iteration
             , a.total_lcrs_retried
             , a.total_txns_retried
             , a.total_txns_recorded
             , a.elapsed_apply_time, a.apply_time
             , s.logon_time
          FROM gV$GG_APPLY_SERVER a, gV$SESSION s
          WHERE a.SID = s.SID
          AND   a.con_id = s.con_id
          AND   a.SERIAL# = s.SERIAL#
          AND   a.inst_id = s.inst_id
          order by a.con_id, a.inst_id, a.apply_name, a.server_id
  ',
      'HC,APPLY,APPLY_SERVER,PERF',
      'Apply Server Statistics - Details',
      null,
      'YES',
      'APPLY', 
      'LCRs and Transactions for the individual Apply Server processes are displayed.',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'GV$GG_APPLY_SERVER,GV$SESSION',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_SERVER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_srvr_stats_auto',
      null,
      null,
      ' select a.con_id, a.inst_id
             , a.APPLY_NAME
             , a.server_id
             , a.STATE
             , a.TOTAL_ASSIGNED ASSIGNED
             , a.TOTAL_MESSAGES_APPLIED msg_APPLIED
             , a.MESSAGE_SEQUENCE
             , a.lcr_retry_iteration
             , a.txn_retry_iteration
             , a.total_lcrs_retried
             , a.total_txns_retried
             , a.total_txns_recorded
             , a.elapsed_apply_time
             , a.apply_time
          from gV$GG_APPLY_SERVER a,  CDB_APPLY ap
          where  a.server_id = 0
          and a.APPLY_NAME = ap.APPLY_NAME
          and a.con_id = ap.con_id
          order by a.con_id, a.inst_id, a.apply_name, a.server_id
  ',
      'HC,APPLY,APPLY_SERVER,PERF',
      'Apply Server Statistics - Auto Tuning',
      null,
      'YES',
      'APPLY', 
      'Autotuned Apply Server Statistics (aggregated stats for apply servers)',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'DBA_APPLY,GV$GG_APPLY_SERVER',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_SERVER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_srvr_sum',
      null,
      null,
      ' select con_id, apply_name, count(*) "Number of Apply Server"
             , sum(total_messages_applied) total_messages_applied
             , sum(total_assigned) total_assigned
             , sum(total_lcrs_retried) total_lcrs_retried
             , sum(total_txns_retried) total_txns_retried
             , sum(total_txns_recorded) total_txns_recorded
          from gv$gg_apply_server
          group by con_id, apply_name
          order by con_id, apply_name
  ',
      'HC,APPLY,APPLY_SERVER,PERF',
      'Apply Server Statstics - Summary',
      null,
      'YES',
      'APPLY', 
      'The sum of the LCRs and Transactions for all Apply Server processes is displayed.',
      'Check for the Number of Apply Server Processes, the messages and transactions being applied. <BR>- TOTAL_TXNs_RETRIED is the number of retries transactions with ine Apply Server. <BR>- TOTAL_TXNs_RECORDED are the recorded transactions in the error queue.',
      '12.1.0.0.0',
      '',
      '0',
      'GV$GG_APPLY_SERVER',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_SERVER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_srvr_stats_we',
      null,
      null,
      ' select a.con_id, a.inst_id
             , a.apply_name
             , a.server_id
             , w.event
             , w.seconds_in_wait secs
          from gv$gg_apply_server a, gv$session_wait w
          where a.sid = w.sid
          and   a.con_id = w.con_id
          and   a.inst_id = w.inst_id
          order by a.con_id, a.apply_name, a.server_id
  ',
      'HC,APPLY,APPLY_SERVER,PERF',
      'Apply Server Wait Events',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'GV$GG_APPLY_SERVER,GV$SESSION_WAIT',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_SERVER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_srvr_stats_txns',
      null,
      null,
      ' select a.con_id, a.inst_id
             , a.APPLY_NAME
             , SUBSTR(s.PROGRAM,INSTR(S.PROGRAM,''('')+1,4) PROCESS_NAME
             , server_id
             , a.state
             , a.sid, a.serial#
             , a.TOTAL_ASSIGNED ASSIGNED
             , a.TOTAL_MESSAGES_APPLIED msg_APPLIED
             , xidusn||''.''||xidslt||''.''||xidsqn CURRENT_TXN
             , commit_position
             , dep_xidusn||''.''||dep_xidslt||''.''||dep_xidsqn DEPENDENT_TXN
             , dep_commit_position
             , message_sequence
             , apply_time
          FROM gV$GG_APPLY_SERVER a, gV$SESSION s
          WHERE a.SID = s.SID
          AND   a.con_id = s.con_id
          AND a.SERIAL# = s.SERIAL#
          AND a.inst_id = s.inst_id
          order by a.con_id, a.apply_name,a.state
  ',
      'HC,APPLY,APPLY_SERVER,PERF',
      'Apply Server Transactions',
      null,
      'YES',
      'APPLY', 
      'Information about current transactions being applied by the Apply Server Processes',
      'Information might be ordered by COMMIT SCN and Dependant COMMIT Position',
      '12.1.0.0.0',
      '',
      '0',
      'GV$GG_APPLY_SERVER,GV$SESSION',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_READER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_reader',
      null,
      null,
      ' SELECT con_id, APPLY_NAME
              , dbms_goldengate_hcadm_int.display_number((DEQUEUE_TIME-DEQUEUED_MESSAGE_CREATE_TIME)*86400) "LATENCY [sec]"
              , TO_CHAR(DEQUEUED_MESSAGE_CREATE_TIME,''HH24:MI:SS MM/DD'') DEQUEUED_MESSAGE_CREATE_TIME
              , TO_CHAR(DEQUEUE_TIME,''HH24:MI:SS MM/DD'') LAST_DEQUEUE
              , DEQUEUED_POSITION
          FROM gV$GG_APPLY_READER
          order by con_id, apply_name
  ',
      'HC,APPLY,APPLY_READER,PERF',
      'Apply Reader - Dequeue Information',
      null,
      'YES',
      'NONE', 
      'Information about Apply Reader Process',
      'Check for the DEQUEUED_MESSAGE_CREATE_TIME (creation time at the source database of the last message received) and the latency.',
      '12.1.0.0.0',
      '',
      '0',
      'GV$GG_APPLY_READER',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_SERVER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_srvr_sess',
      null,
      null,
      ' select a.con_id, a.inst_id
             , a.apply_name
             , a.server_id
             , e.event
             , e.total_waits
             , e.total_timeouts
             , e.time_waited
             , e.average_wait
             , e.max_wait
          from gv$GG_apply_server a, gv$session_event e
          where a.sid   = e.sid
          and a.inst_id = e.inst_id
          and a.con_id  = e.con_id
          order by a.con_id, a.apply_name, a.server_id, e.time_waited desc
  ',
      'HC,APPLY,APPLY_SERVER,PERF',
      'Apply Server Session Events',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'GV$GG_APPLY_SERVER,GV$SESSION_EVENT',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_COORDINATOR,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_coord_dep',
      null,
      null,
      ' select con_id, apply_name
             , total_applied
             , total_wait_deps
             , total_wait_commits
             , dbms_goldengate_hcadm_int.display_number((100*total_wait_deps/NULLIF(total_applied,0)))    as "WAITDEP [Percentage]"
             , dbms_goldengate_hcadm_int.display_number((100*total_wait_commits/NULLIF(total_applied,0))) as "COMMITDEP [Percentage]"
          from gv$gg_apply_coordinator
          order by con_id, apply_name
  ',
      'HC,APPLY,APPLY_COORDINATOR,PERF',
      'Apply Coordinator - Commit Dependencies',
      null,
      'YES',
      'NONE', 
      'Information about Apply Coordinator Process - Dependency',
      'A high percentage of Dependency, reduces the parallelism',
      '12.1.0.0.0',
      '',
      '0',
      'GV$GG_APPLY_COORDINATOR',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_READER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_read_dep',
      null,
      null,
      ' select r.con_id, r.apply_name
             , r.total_messages_dequeued
             , r.total_lcrs_with_dep
             , r.total_lcrs_with_WMdep
             , c.total_assigned
             , c.total_wait_deps
             , c.total_wait_commits
             , dbms_goldengate_hcadm_int.display_number(100*(r.total_lcrs_with_dep)/nullif((r.total_messages_dequeued-c.total_assigned),0)) "WaitDependency % msgs"
             , dbms_goldengate_hcadm_int.display_number(100*(r.total_lcrs_with_WMdep)/nullif((c.total_received),0)) "WM WaitDependency % msgs"
          from gv$gg_apply_reader r , gv$gg_apply_coordinator c
          where r.apply_name = c.apply_name
          and r.con_id = c.con_id
          and r.inst_id = c.inst_id
          order by r.con_id,r.apply_name
  ',
      'HC,APPLY,APPLY_READER,PERF',
      'Apply Reader - LCR Dependencies',
      null,
      'YES',
      'NONE', 
      'Information about Apply Reader Process - Dependency',
      'A high percentage of Dependency, reduces the parallelism',
      '12.1.0.0.0',
      '',
      '0',
      'GV$GG_APPLY_READER',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,SESSION,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sesstat_io',
      null,
      null,
      ' select s.con_id, s.sid, s.action, n.name, ss.value
          from gv$sesstat ss, gv$statname n, gv$session s
          where ss.statistic# = n.statistic#
          and   ss.inst_id    = s.inst_id
          and   ss.inst_id    = n.inst_id
	  and   ss.con_id     = s.con_id
          and   ss.con_id     = n.con_id
          and   ss.sid        = s.sid
          and   s.action like ''OGG$%''
          and   ss.value > 0
          and   UPPER(n.name) like ''% IO %''
          order by s.con_id, s.sid, s.action, ss.value desc
  ',
      'HC,DATABASE,SESSION,PERF',
      'GG related Session File IO',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'GV$SESSION,GV$SESSTAT,GV$STATNAME',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,SESSION,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sesstat_net',
      null,
      null,
      ' select s.con_id, s.sid, s.action, n.name, ss.value
          from gv$sesstat ss, gv$statname n, gv$session s
          where ss.statistic# = n.statistic#
          and   ss.inst_id    = n.inst_id
          and   ss.inst_id    = s.inst_id
          and   ss.sid        = s.sid
          and   s.action like ''OGG$%''
          and   ss.value > 0
          and   UPPER(name) like ''%NET%''
          order by s.con_id, s.sid, s.action, ss.value desc
  ',
      'HC,DATABASE,SESSION,PERF',
      'GG related Session Network IO',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'GV$SESSION,GV$SESSTAT,GV$STATNAME',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,SESSION,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sesstat',
      null,
      null,
      ' SELECT s.con_id, s.sid, s.action
             , CASE n.class WHEN 1 then ''User''
                     when 2 then ''Redo''
                     when 4 then ''Enqueue''
                     when 8 then ''Cache''
                     when 16 then ''OS''
                     when 32 then ''RAC''
                     when 64 then ''SQL''
                     when 128 then ''Debug''
               END class
             , sum(ss.value) 
          FROM gv$sesstat ss, gv$session s, gv$statname n
          WHERE ss.sid        = s.sid
          AND   ss.con_id     = s.con_id
          AND   ss.con_id     = n.con_id
          AND   ss.statistic# = n.statistic#
          AND   s.action like ''OGG%''
          AND   ss.value > 0
          AND   n.class != 128
          GROUP BY s.con_id, s.sid, s.action, class
          ORDER BY s.con_id, s.sid, s.action, sum(ss.value) desc
  ',
      'HC,DATABASE,SESSION,PERF',
      'GG related Session Statistics',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'V$SESSION,V$SESSTAT,V$STATNAME',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ogg_in_pt',
      null,
      null,
      ' select con_id, server_name
             , processed_low_position
             , applied_low_position
             , applied_high_position
             , oldest_position
             , applied_low_scn
             , applied_time
             , applied_message_create_time
             , logbsn
          from cdb_gg_inbound_progress
          order by server_name
  ',
      'HC,APPLY,PERF',
      'GoldenGate Inbound Progress Table',
      null,
      'YES',
      'APPLY', 
      'Information about the Inbound Progress',
      'Information is shown in Messages',
      '12.1.0.0.0',
      '',
      '0',
      'DBA_GG_INBOUND_PROGRESS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_txn_sum',
      null,
      null,
      ' select con_id, inst_id,  component_name
             , count(*)                      "Open Transactions"
             , sum(cumulative_message_count) "Total LCRs"
          from gv$goldengate_transaction
          where component_type=''CAPTURE''
          group by con_id, inst_id, component_name
  ',
      'HC,CAPTURE,PERF',
      'Open GoldenGate Capture Transactions',
      null,
      'YES',
      'CAPTURE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'GV$GOLDENGATE_TRANSACTION',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_txn_detail',
      null,
      null,
      ' select con_id, inst_id
              , component_name
              , transaction_id
              , cumulative_message_count
              , first_message_time
              , first_message_position
          from gv$goldengate_transaction
          where component_type=''CAPTURE''
          order by con_id, inst_id, component_name,first_message_number
  ',
      'HC,CAPTURE,PERF',
      'Open GoldenGate Capture Transactions - Details',
      null,
      'YES',
      'CAPTURE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_txn_sum',
      null,
      null,
      ' select con_id, inst_id, component_name
             , count(*)                      "Open Transactions"
             , sum(cumulative_message_count) "Total LCRs"
          from gv$Goldengate_transaction
          where component_type=''APPLY''
          group by con_id, inst_id, component_name
  ',
      'HC,APPLY,PERF',
      'Open GoldenGate Apply Transactions',
      null,
      'YES',
      'APPLY', 
      'Summary Information about open Apply Transactions',
      '-Check the number of open Transactions',
      '12.1.0.0.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_txn_detail',
      null,
      null,
      ' select  con_id, inst_id
              , component_name          
              , transaction_id
              , case when  BATCH_XIDUSN||''.''||BATCH_XIDSLT||''.''||BATCH_XIDSQN  like ''0.0.0%'' then ''n/a''
                else BATCH_XIDUSN||''.''||BATCH_XIDSLT||''.''||BATCH_XIDSQN
                end "BATCH_TRANSACTION_ID"
              , cumulative_message_count  
              , first_message_time 
              , first_message_position
          from gv$goldengate_transaction
          where component_type=''APPLY'' 
          order by con_id, component_name, first_message_position
  ',
      'HC,APPLY,PERF',
      'Open GoldenGate Apply Transactions -Details',
      null,
      'YES',
      'NONE', 
      'Detail Information about open Apply Transactions',
      '- Check the Size (Number of Operations) of the individual Transactions to identify large transactions',
      '12.1.0.0.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,MEMORY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'pga_mem',
      null,
      null,
      ' SELECT s.con_id
             , s.SID, s.SERIAL#
             , s.process, p.spid
             , s.PROGRAM
             , s.action
             , dbms_goldengate_hcadm_int.display_bytes(p.PGA_USED_MEM)     "PGA_USED_MEM"
             , dbms_goldengate_hcadm_int.display_bytes(p.PGA_ALLOC_MEM)    "PGA_ALLOC_MEM"
             , dbms_goldengate_hcadm_int.display_bytes(p.PGA_FREEABLE_MEM) "PGA_FREEABLE_MEM"
             , dbms_goldengate_hcadm_int.display_bytes(p.PGA_MAX_MEM)      "PGA_MAX_MEM"
          FROM gv$session s,gv$process p
          WHERE s.paddr = p.addr
          AND s.inst_id = p.inst_id
          AND s.con_id = p.con_id
          AND (s.action LIKE ''OGG%'' or s.module like ''OGG%'' or s.module like ''GoldenGate%'')
          ORDER BY s.con_id,s.inst_id, s.action 
  ',
      'HC,DATABASE,MEMORY,PERF',
      'GG Processes - PGA',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'V$PROCESS,V$SESSION',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,MEMORY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'pga_stat',
      null,
      null,
      ' select a.con_id, a.inst_id, a.name, a.xStatVal value  from
           (select 2 x,con_id,inst_id, name, value, dbms_goldengate_hcadm_int.display_bytes(value) xStatVal
              from gv$pgastat
              where unit = ''bytes''
            union
            select 1 x,con_id,inst_id, name, value,LPAD(value,6,'' '')||'' %'' xStatVal
              from gv$pgastat
              where unit = ''percent''
           ) a
           order by con_id,inst_id,a.x,a.value desc
  ',
      'HC,DATABASE,MEMORY,PERF',
      'Database Memory - PGA',
      null,
      'YES',
      'NONE', 
      'Information about the PGA memory usage statistics and its statistics. <BR>Cumulative values are accumulated since instance startup.',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'GV$PGASTAT',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,MEMORY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sga_info',
      null,
      null,
      ' select con_id,inst_id
              ,name
              ,dbms_goldengate_hcadm_int.display_bytes(bytes) "Size"
              ,nvl(resizeable,''n/a'') resizeable
          from gv$sgainfo 
          order by con_id,bytes desc
  ',
      'HC,DATABASE,MEMORY,PERF',
      'Database Memory - SGA',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'GV$SGAINFO',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,MEMORY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sga_resize',
      null,
      null,
      ' select con_id, inst_id
             , component
             , oper_type,oper_mode,parameter
             , dbms_goldengate_hcadm_int.display_bytes(initial_size) initial_size
             , dbms_goldengate_hcadm_int.display_bytes(target_size) target_size
             , dbms_goldengate_hcadm_int.display_bytes(final_size) final_size
             , dbms_goldengate_hcadm_int.display_bytes(final_size-initial_size) delta_size
             , start_time,end_time,dbms_goldengate_hcadm_int.display_number((end_time-start_time)*24*60*60) time_window
             , status
          from GV$SGA_RESIZE_OPS
          where component =''streams pool''
          order by con_id, inst_id, start_time desc
  ',
      'HC,DATABASE,MEMORY,PERF',
      'Database Memory Resize - SGA',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'GV$SGA_RESIZE_OPS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,MEMORY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sga_stat',
      null,
      null,
      ' select con_id, inst_id, pool,name
             , dbms_goldengate_hcadm_int.display_bytes(bytes) "Size"
          from gv$sgastat
          where pool=''streams pool''
          order by con_id asc, inst_id asc,bytes desc
  ',
      'HC,DATABASE,MEMORY,PERF',
      'Streams Pool Statistics',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'V$SGASTAT',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_version',
      null,
      null,
      ' SELECT i.host_name Host 
             , db.platform_name
             , (select dbms_utility.port_string as VALUE from dual) Operating_System
             , (select value as VALUE from v$parameter where name = ''cpu_count'') CPU_COUNT
             , db.name Database_name
             , i.version
             , DECODE(regexp_substr(v.banner, ''[^ ]+'', 1, 4)
                     , ''Edition'', ''Standard''
                     , regexp_substr(v.banner, ''[^ ]+'', 1, 4)) DB_Edition
             , (select decode(value,''FALSE'',''No'',''TRUE'',''YES'') RAC 
                  from v$parameter 
                  where name = ''cluster_database'')|| 
               (select '' (''||value||'')'' 
                  from v$parameter where name =''cluster_database_instances'') RAC
             , db.cdb
          FROM v$database db,v$instance i, v$version v
          WHERE banner LIKE ''Oracle%''
  ',
      'HC,DATABASE,CONFIG',
      'General System Information',
      null,
      'YES',
      'NONE', 
      '- Information about the current Database Instance',
      '- The Report is generated from this Database Instance. In a RAC environment, there are multiple instances and GoldenGate processes might run on different instances. <BR> In a DownStream environment, Min_required_capture_change# is not populated.',
      '12.1.0.0.0',
      '',
      '0',
      'V$DATABASE,V$INSTANCE,V$VERSION',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_summary',
      null,
      null,
      ' select SYSDATE Current_time
             , c.client_name extract_name
             , c.capture_name
             , c.capture_user
             , c.capture_type 
             , c.logminer_id
             , o.created registered
             , o.last_ddl_time
             , c.status
             , g.state
             , (SYSDATE- g.capture_message_create_time)*86400 capture_lag
             , dbms_goldengate_hcadm_int.display_bytes(g.bytes_of_redo_mined) redo_mined
             , dbms_goldengate_hcadm_int.display_bytes(g.bytes_sent) sent_bytes
             , g.startup_time
             , g.inst_id
             , c.source_database
        from cdb_capture c, cdb_objects o, gv$goldengate_capture g
        where c.capture_name=g.capture_name
        and   c.status=''ENABLED''
        and   c.capture_name=o.object_name
        union all
        select SYSDATE Current_time
             , c.client_name extract_name
             , c.capture_name
             , c.capture_user
             , c.capture_type 
             , c.logminer_id
             , o.created registered
             , o.last_ddl_time
             , c.status
             , ''Unavailable''
             , NULL
             , NULL
             , NULL
             , NULL
             , NULL
             , c.source_database
          from cdb_capture c, cdb_objects o, cdb_capture_parameters cp
          where c.status in (''DISABLED'',''ABORTED'')
          and   c.purpose=''GoldenGate Capture''
          and   c.capture_name=cp.capture_name
          and   cp.parameter=''DOWNSTREAM_REAL_TIME_MINE''
          and   c.capture_name = o.object_name
          order by extract_name 
  ',
      'HC,CAPTURE,PERF',
      'Integrated Extracts Summary',
      null,
      'YES',
      'CAPTURE', 
      'Runtime Information about the Extract Processes',
      '- The Report is generated from this Database Instance',
      '12.1.0.0.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_key_params',
      null,
      null,
      ' select cp.capture_name,substr(cp.capture_name,9,8) extract_name
             , max(case when parameter=''PARALLELISM'' then value end) parallelism
             , max(case when parameter=''MAX_SGA_SIZE'' then value end) max_sga_size
             , max(case when parameter=''EXCLUDETAG'' then value end) excludetag
             , max(case when parameter=''EXCLUDEUSER'' then value end) excludeuser
             , max(case when parameter=''GETAPPLOPS'' then value end) getapplops
             , max(case when parameter=''GETREPLICATES'' then value end) getreplicates 
             , max(case when parameter=''_CHECKPOINT_FREQUENCY'' then value end) checkpoint_frequency                  
          from cdb_capture_parameters cp, cdb_capture c 
          where c.capture_name=cp.capture_name
          and c.purpose=''GoldenGate Capture''
          group by cp.capture_name
  ',
      'HC,CAPTURE,CONFIG',
      'Integrated Extract key parameters',
      null,
      'NO',
      'CAPTURE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_CAPTURE,CDB_CAPTURE_PARAMETERS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_summary',
      null,
      null,
      ' select sysdate Current_time
            , o.con_id
            , ib.replicat_name
            , ib.server_name
            , ib.apply_user
            , ib.status
            , o.created registered
            , o.last_ddl_time
            , a.apply_tag
            , r.state ReceiverState
            , g.state state
            , g.active_server_count
            , g.unassigned_complete_txns
            , g.lwm_message_create_time lwm
            , NVL(Round((g.hwm_message_create_time-g.lwm_message_create_time)*24*3600,2),0) SourceTSrange
            , g.lwm_time apply_time
            , NVL(Round((g.hwm_time-g.lwm_time)*24*3600,2),0) ApplyTSrange
            , g.startup_time
            , g.inst_id
          from cdb_goldengate_inbound ib, cdb_objects o, cdb_apply a, gv$gg_apply_coordinator g, gv$gg_apply_receiver r
          where ib.server_name=g.apply_name
          and   ib.status=''ATTACHED'' 
          and   ib.server_name=o.object_name
          and   ib.server_name = g.apply_name
          and   ib.server_name = r.apply_name
          and   ib.server_name = a.apply_name
        union all
        select sysdate Current_time
            , o.con_id
            , ib.replicat_name
            , ib.server_name 
            , ib.apply_user
            , ib.status
            , o.created registered
            , o.last_ddl_time
            , a.apply_tag
            , ''Unavailable'' ReceiverState
            , null State
            , null server_count
            , null unassigned_complete_txns
            , pg.applied_message_create_time
            , null SourceTSrange
            , pg.applied_time
            , null ApplyTSrange
            , null startup_time
            , null inst_id
        from cdb_goldengate_inbound ib,cdb_objects o, cdb_apply a, cdb_gg_inbound_progress pg
        where ib.status !=''ATTACHED'' 
        and   ib.server_name=a.apply_name
        and   ib.server_name=o.object_name
        and   ib.server_name=pg.server_name(+)
       order by replicat_name
  ',
      'HC,APPLY,PERF',
      'Integrated Replicats Summary',
      null,
      'YES',
      'APPLY', 
      'Runtime Information about the Replicat Processes',
      '- The Report is generated from this Database Instance',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_APPLY,CDB_GG_INBOUND_PROGRESS,CDB_GOLDENGATE_INBOUND,CDB_OBJECTS,GV$GG_APPLY_COORDINATOR,GV$GG_APPLY_RECEIVER',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_key_params',
      null,
      null,
      ' select apply_name
             , substr(apply_name,5,8) replicat_name
             , max(case when parameter=''PARALLELISM'' then value end) parallelism
             , max(case when parameter=''MAX_PARALLELISM'' then value end) max_parallelism
             , max(case when parameter=''COMMIT_SERIALIZATION'' then value end) commit_serialization
             , max(case when parameter=''EAGER_SIZE'' then value end) eager_size
             , max(case when parameter=''_DML_REORDER'' then value end) batchsql              
             , max(case when parameter=''BATCHSQL_MODE'' then value end) batch_sql_mode  
             , max(case when parameter=''MAX_SGA_SIZE'' then value end) max_sga_size   
             , max(case when parameter=''OPTIMIZE_PROGRESS_TABLE'' then value end) optimize_progress_table             
          from cdb_apply_parameters ap, cdb_goldengate_inbound ib where ib.server_name=ap.apply_name
          group by apply_name
  ',
      'HC,APPLY,CONFIG',
      'Integrated Replicat key parameters',
      null,
      'NO',
      'APPLY', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_APPLY_PARAMETERS,CDB_GOLDENGATE_INBOUND',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE_APPLY,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'rep_count',
      null,
      null,
      ' select purpose,count(*) nmbr, ''CAPTURE'' type from cdb_capture group by purpose
        union all
        select purpose, count(*) nmbr, ''APPLY'' type from cdb_apply group by purpose 
        order by purpose
  ',
      'HC,CAPTURE_APPLY,CONFIG',
      'Count of Capture and Apply processes configured in database by purpose',
      null,
      'NO',
      'APPLY,GENERAL', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_APPLY,CDB_CAPTURE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cdb_info',
      null,
      null,
      ' SELECT con_id, dbid, name, db_unique_name, cdb, con_dbid 
          from v$database 
          where cdb = ''YES'' 
  ',
      'HC,DATABASE,CONFIG',
      'Multitenant Database Information',
      null,
      'YES',
      'DATABASE', 
      'Information about Database Instances running in a multitenant environment',
      '- If CDB = YES, the database is running in a Multitenant environment.',
      '12.1.0.0.0',
      '',
      '0',
      'V$DATABASE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONTAINERS,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_containers',
      null,
      null,
      ' select c.con_id
             , c.name
             , c.open_mode
             , c.restricted 
          from v$containers c
          where exists (select 1 from v$database where cdb=''YES'' )
          order by c.con_id
  ',
      'HC,DATABASE,CONTAINERS,CONFIG',
      'Containers',
      null,
      'YES',
      'DATABASE', 
      'Detailed information about Pluggable Databases in a multitenant environment.',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'V$CONTAINERS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,PATCH,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_reg_hist',
      null,
      null,
      ' select * 
          from cdb_registry_history
  ',
      'HC,DATABASE,PATCH,CONFIG',
      'Registry History',
      null,
      'YES',
      'NONE', 
      'Information about upgrades, downgrades, and critical patch updates that have been performed on the Database',
      '- Check the Database for the latest apllied Patches (PSU, OGG/RDBMS Bundle-Patch, Database Bundle-Patch',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_REGISTRY_HISTORY',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'gg_admin',
      null,
      null,
      ' select con_id
             , username
             , privilege_type 
             , grant_select_privileges
             , create_time  
          from cdb_goldengate_privileges
          order by 1,2,3
  ',
      'HC,DATABASE,CONFIG',
      'GoldenGate Administrator Users',
      null,
      'YES',
      'DATABASE', 
      'Information about the OGG Administartion User',
      '- The OGG Admin user needs privileges from dbms_goldengate_auth.grant_admin_privilege call.',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_GOLDENGATE_PRIVILEGES',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'strm_admin',
      null,
      null,
      ' select * from cdb_streams_administrator
  ',
      'HC,DATABASE,CONFIG',
      'Streams Administrator',
      null,
      'YES',
      'DATABASE', 
      'Information about the Streams Admin User',
      '- Check for sufficient resources, if Streams and GoldenGate are maintained in parallel.',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_STREAMS_ADMINISTRATOR',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'gg_admin_info',
      null,
      null,
      ' select con_id 
             , username 
             , user_id
             , account_status
             , created
             , lock_date
             , expiry_date
             , default_tablespace
             , profile
             , initial_rsrc_consumer_group
             , password_versions
             , editions_enabled
             , authentication_type
             , external_name
          from cdb_users 
          where username in (select capture_user from cdb_capture where purpose like ''GoldenGate%'' 
                             union 
                             select apply_name from cdb_apply where purpose like ''GoldenGate%'' 
                             union 
                             select username from cdb_goldengate_privileges
                            )  
          order by 1
  ',
      'HC,DATABASE,CONFIG',
      'Database User Information for GoldenGate Administrators',
      null,
      'YES',
      'DATABASE', 
      'Information about the OGG Admin User Profile',
      '- Check the Profile from the OGG Admin User (Expiry Date).',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_APPLY,CDB_CAPTURE,CDB_GOLDENGATE_PRIVILEGES,CDB_USERS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,QUEUES,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_q',
      null,
      null,
      ' SELECT q.con_id
             , q.OWNER||''.''|| q.NAME queue
             , t.QUEUE_TABLE
             , q.enqueue_enabled
             , q.dequeue_enabled
             , t.primary_instance, t.secondary_instance
             , t.owner_instance
             , network_name
             , q.USER_COMMENT
  FROM cdb_QUEUES q, cdb_QUEUE_TABLES t
  WHERE t.OBJECT_TYPE = ''SYS.ANYDATA'' AND
        q.QUEUE_TABLE = t.QUEUE_TABLE AND
        q.OWNER       = t.OWNER
        AND t.con_id = q.con_id
    order by q.con_id,q.owner,q.name,t.queue_table
  ',
      'HC,DATABASE,QUEUES,CONFIG',
      'Database Queues',
      null,
      'NO',
      'DATABASE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_QUEUES,CDB_QUEUE_TABLES',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,QUEUES,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_q_sub',
      null,
      null,
      ' SELECT qs.con_id
             , qs.owner||''.''||qs.queue_name qeue
             , qs.queue_table
             , NVL2(qs.consumer_name,''CONSUMER: '',''ADDRESS : '') ||
               NVL(qs.consumer_name,qs.address) Subscriber
             , qs.delivery_mode,qs.queue_to_queue,qs.protocol
          FROM cdb_queue_subscribers qs, cdb_queue_tables qt
          WHERE qt.OBJECT_TYPE = ''SYS.ANYDATA''  
          AND   qs.QUEUE_TABLE = qt.QUEUE_TABLE 
          AND   qs.OWNER = qt.OWNER
          AND  qt.con_id = qs.con_id
          ORDER BY qs.con_id,qs.owner,qs.queue_name
  ',
      'HC,DATABASE,QUEUES,CONFIG',
      'Queue Subscribers',
      null,
      'NO',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_QUEUE_SUBSCRIBERS,CDB_QUEUE_TABLES',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_status_client',
      null,
      null,
      ' SELECT client_name  
             , DECODE(client_status,''ATTACHED'',client_status,client_status) client_status
             , capture_name
             , status
             , decode(purpose, ''GoldenGate Capture'',''Integrated Capture'',''Streams'', ''Classic Capture'',''*'',NULL) extract_mode 
             , error_number
             , status_change_time
             , error_message 
           FROM cdb_CAPTURE 
           where purpose like ''GoldenGate%'' or capture_name like ''OGG%$%'' 
           order by capture_name
  ',
      'HC,CAPTURE,PERF',
      'Extract Client Status',
      null,
      'YES',
      'CAPTURE', 
      'Information about the Attachment of the Extract client program to the Database Logmining Server',
      '- Check that the Client Status is attached.',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_CAPTURE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_version',
      null,
      null,
      ' select c.CAPTURE_NAME
             , c.Capture_type
             , decode(cp.value,''N'',''NO'', ''YES'') Real_time_mine
             , c.SOURCE_DATABASE
             , c.SOURCE_DBID
             , c.CON_ID
             , c.SOURCE_RESETLOGS_SCN 
             , c.SOURCE_RESETLOGS_TIME
          from cdb_capture c,cdb_capture_parameters cp
          where c.capture_name=cp.capture_name 
          and cp.parameter=''DOWNSTREAM_REAL_TIME_MINE''
          order by c.capture_name  
  ',
      'HC,CAPTURE,CONFIG',
      'Extract Database',
      null,
      'YES',
      'CAPTURE', 
      'Basic Information about the Extract process',
      '- Check if Extract uses a Local or DownStream Capture. <BR>- If DownStream Capture is in use, check for the Source Database. <BR>- If DownStream Capture is in use, check if RealTimeMine is activated.<BR>- SOURCE_RESETLOGS_TIME is represented as Number by purpose.',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_CAPTURE,CDB_CAPTURE_PARAMETERS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_info_scn',
      null,
      null,
      ' SELECT capture_name
           -- ,capture_type
              ,source_database
              ,captured_scn
              ,applied_scn
              ,oldest_scn
              ,last_enqueued_scn
              ,required_checkpoint_scn
              ,max_checkpoint_scn
              ,filtered_scn
              ,first_scn
               ,start_scn ||'' (''||start_time||'') '' start_scn
         --   ,source_dbid
         --   ,source_resetlogs_scn
         --   ,source_resetlogs_time
         --   ,logminer_id
          FROM cdb_CAPTURE  
          where purpose like ''GoldenGate%'' or capture_name like ''OGG%$%'' 
          order by capture_name
  ',
      'HC,CAPTURE,PERF',
      'Capture SCN Processes',
      null,
      'YES',
      'CAPTURE', 
      'Time/SCN related Information of the Database Capture Process of the Extract',
      '- Check the the Required Checkpoint Time is moving forward over a long period in time. <BR>- Check the Version of the Capture. <BR>- Check the Checkpoint Retention time used for the Capture. <BR>- In case of an Error, check the error number and the message.',
      '12.1.0.0.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,RULES,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_rules',
      null,
      null,
      ' 
     select sr.component_NAME NAME
           ,sr.schema_name||''.''||sr.object_name OBJECT
           ,sr.rule_set_type
           ,sr.SOURCE_DATABASE
           ,sr.component_RULE_TYPE ||'' ''||sr.Rule_type TYPE 
           ,sr.INCLUDE_TAGGED_LCR
           ,sr.same_rule_condition
           ,sr.rule_owner||''.''||sr.rule_name RULE
      from cdb_goldengate_rules sr, cdb_capture c 
      where sr.component_type = ''CAPTURE''
     and c.capture_name=sr.component_name 
     and c.purpose like ''GoldenGate%''
     order by name,object, sr.source_database, sr.rule_set_type,rule
  ',
      'HC,CAPTURE,RULES,CONFIG',
      'Capture Rules',
      null,
      'YES',
      'CAPTURE', 
      'Capture Rules Belonging to the Extract',
      'In Multitenant Database environments, GLOBAL Rules are pointing to the specific PDB. <BR>- Check the TAG conditions. By default, Extract is Capturing all information (INCLUDE_TAGGED_LCR=YES). <BR>In bidirectional or N-Way Replication environments, this needs to be validated.',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_CAPTURE,CDB_GOLDENGATE_RULES',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,RULES,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_rulesets',
      null,
      null,
      ' select c.capture_name
             , rsr.rule_set_owner||''.''||rsr.rule_set_name RULE_SET 
             , rsr.rule_owner||''.''||rsr.rule_name RULE_NAME
             , r.rule_condition CONDITION 
          from cdb_rule_set_rules rsr, cdb_RULES r ,cdb_CAPTURE c
          where rsr.rule_name = r.rule_name 
          and rsr.rule_owner = r.rule_owner  
          and rsr.rule_set_owner=c.rule_set_owner 
          and rsr.rule_set_name=c.rule_set_name  
          and rsr.rule_set_name in (select rule_set_name from cdb_capture where c.purpose like ''GoldenGate%'')
          order by rsr.rule_set_owner,rsr.rule_set_name
  ',
      'HC,CAPTURE,RULES,CONFIG',
      'Capture Rules by Rulesets',
      null,
      'YES',
      'CAPTURE', 
      'Detailed Information about Capture Rules Belonging to the Extract <BR>Relation between RuleSets and Rules and the Rule conditions are shown.',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_CAPTURE,CDB_RULES,CDB_CAPTURE,CDB_RULE_SET_RULES',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,RULES,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_rulesets2',
      null,
      null,
      ' select c.capture_name
             , rsr.rule_set_owner||''.''||rsr.rule_set_name RULE_SET 
             , rsr.rule_owner||''.''||rsr.rule_name RULE_NAME
             , r.rule_condition CONDITION 
          from cdb_rule_set_rules rsr, cdb_RULES r ,cdb_CAPTURE c
          where rsr.rule_name = r.rule_name 
          and rsr.rule_owner = r.rule_owner 
          and rsr.rule_set_owner=c.negative_rule_set_owner 
          and rsr.rule_set_name=c.negative_rule_set_name 
          and rsr.rule_set_name in (select negative_rule_set_name rule_set_name from cdb_capture where c.purpose like ''GoldenGate%'') 
         order by rsr.rule_set_owner,rsr.rule_set_name
  ',
      'HC,CAPTURE,RULES,CONFIG',
      'Capture Rules in Negative Rulesets',
      null,
      'YES',
      'CAPTURE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_reg_log',
      null,
      null,
      ' select r.CONSUMER_NAME
             , r.SOURCE_DATABASE
             , r.thread#, r.SEQUENCE# 
             , r.NAME
             , r.first_scn, r.FIRST_TIME
             , r.next_scn, r.next_time
             , r.MODIFIED_TIME
             , r.DICTIONARY_BEGIN, r.DICTIONARY_END
             , r.purgeable
          from cdb_REGISTERED_ARCHIVED_LOG r, cdb_CAPTURE c
          where r.CONSUMER_NAME = c.CAPTURE_NAME 
          and   c.purpose like ''GoldenGate%''
          order by source_database, consumer_name, r.first_scn
  ',
      'HC,CAPTURE,CONFIG',
      'Registered Log Files for Capture',
      null,
      'YES',
      'CAPTURE', 
      'Information about all registered archived logfiles in regard to GoldenGate in the database.',
      '- Check (that all required archive log files are available.',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_CAPTURE,CDB_REGISTERED_ARCHIVED_LOG',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_prepared',
      null,
      null,
      ' select cp.* 
          from cdb_capture_prepared_database cp, cdb_capture c 
          where c.purpose = ''GoldenGate Capture''
  ',
      'HC,CAPTURE,CONFIG',
      'Database prepared for Capture',
      null,
      'NO',
      'CAPTURE', 
      'Information about the Database being prepared for Capture',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_CAPTURE,CDB_CAPTURE_PREPARED_DATABASE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ogg_ap_config',
      null,
      null,
      ' select con_id, apply_name
             , status
             , replace(apply_name,''OGG$'','''') Extract
             , queue_owner||''.''||queue_name QUEUE
             , a.apply_user, apply_tag, rule_set_owner||''.''||rule_set_name RSN
             , negative_rule_set_owner||''.''||negative_rule_set_name RSN2
          from CDB_APPLY a
          where a.purpose like ''GoldenGate%''
          order by 1
  ',
      'HC,APPLY,CONFIG',
      'GoldenGate Configuration',
      null,
      'NO',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'DBA_APPLY',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,INTERNAL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_v2',
      null,
      null,
      ' select extractname_knstcap Extract_Name, capname_knstcap Capture_Name
             , decode(bitand(flags_knstcap,64), 64,''V2'',''V1'') protocol
             , apply_name,replace(apply_name,''OGG$'','''') Extract, queue_owner||''.''||queue_name QUEUE
             , apply_user, apply_tag
             , rule_set_owner||''.''||rule_set_name RSN
             , negative_rule_set_owner||''.''||negative_rule_set_name RSN2
             , status
          from x$knstcap
          left join cdb_apply on replace(apply_name,''OGG$'','''') = extractname_knstcap
          where purpose like ''GoldenGate Cap%''
          or purpose is NULL
  ',
      'HC,CAPTURE,INTERNAL',
      'Internal: Apply Process belonging to Extract',
      null,
      'YES',
      'NONE', 
      'Information about the Extract Protocol (V1/V2) and the internal Apply process of the Capture.',
      '- If Extract Protocol is V2, there is an internal Apply Process related to the Capture Process, otherwise not. <BR>The Apply process does not perform any business related functionality.',
      '12.1.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cp_status',
      null,
      null,
      ' select c.client_name
             , c.applied_scn
             , c.client_status
             , c.status_change_time
             , c.error_number
             , case when c.error_number =1013 then ''STOP EXTRACT command performed ( ''||c.error_message||'' )''
                    when c.client_status=''DETACHED'' then ''Extract is not started''
                    else c.error_message
               end error_message
          from cdb_capture c 
          where c.purpose like ''GoldenGate%'' 
  ',
      'HC,CAPTURE,CONFIG',
      'Process Information',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_CAPTURE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_progress',
      null,
      null,
      ' select sysdate "Current Time"
             , p.con_id
             , p.apply_name
             , (SYSDATE - p.APPLIED_MESSAGE_CREATE_TIME)*86400 "Apply_Lag [secs]"
             , p.applied_message_create_time
             , p.applied_message_number
             , p.oldest_message_number
             , p.oldest_transaction_id
             , p.apply_time
             , p.source_root_name
          from cdb_apply_progress p, cdb_apply a
          where p.apply_name = a.apply_name
          and   p.con_id     = a.con_id
          and a.purpose = ''GoldenGate Apply''
          order by p.con_id, p.apply_name
  ',
      'HC,APPLY,PERF',
      'Apply Progress',
      null,
      'YES',
      'APPLY', 
      'Information about the progress made by the apply processes that dequeue events from queues accessible to the current user',
      '- The Lag can be derived from this view .',
      '12.1.0.0.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'gg_inbound',
      null,
      null,
      ' select CON_ID,  REPLICAT_NAME
             , SERVER_NAME
             , APPLY_USER
         --  , USER_COMMENT
             , STATUS      
             , CREATE_DATE 
          from cdb_goldengate_inbound 
          order by con_id, replicat_name
  ',
      'HC,APPLY,PERF',
      'GoldenGate Inbound Servers',
      null,
      'YES',
      'NONE', 
      'Information about the Attachment of the Replicat Client to the Inbound Server',
      '- Check that the status is attached',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_GOLDENGATE_INBOUND',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_info',
      null,
      null,
      ' select con_id, apply_name, purpose
        --   , status
             , queue_owner||''.''||queue_name QUEUE
             , DECODE(APPLY_CAPTURED
                     ,''YES'', ''Captured''
                     ,''NO'' , ''User-Enqueued'') APPLY_CAPTURED
             , apply_user, apply_tag
             , rule_set_owner||''.''||rule_set_name RSN
             , negative_rule_set_owner||''.''||negative_rule_set_name RSN2
             , message_delivery_mode
          from CDB_APPLY 
          where purpose = ''GoldenGate Apply''
          order by con_id, apply_name
  ',
      'HC,APPLY,CONFIG',
      'Apply Information',
      null,
      'YES',
      'APPLY', 
      'Information about the Database Apply Process of the Replicat',
      '- Check that the status is enabled',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_APPLY',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_status',
      null,
      null,
      ' select con_id, apply_name
             , max_applied_message_number
             , status
             , status_change_time
             , error_number
             , error_message 
          from cdb_apply
          where purpose = ''GoldenGate Apply'' 
          order by con_id, apply_name
  ',
      'HC,APPLY,CONFIG',
      'Apply Process Information',
      null,
      'YES',
      'APPLY', 
      'NONE',
      '- If the Apply Process aborts, check for the time, Error Code and reason',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_APPLY',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_param_detail',
      null,
      null,
      ' select ap.* 
          from cdb_apply_parameters ap, cdb_apply a
          where a.purpose = ''GoldenGate Apply'' 
          and  a.apply_name=ap.apply_name 
          and (ap.set_by_user=''YES'' OR ap.parameter in (''PARALLELISM'',''MAX_PARALLELISM''))
          order by ap.con_id,ap.apply_name,parameter
  ',
      'HC,APPLY,CONFIG',
      'Apply Process Parameters',
      null,
      'YES',
      'APPLY', 
      'Replicat Integrated DBOptions Parameter Setting',
      '- Parameter Changes can be done from the Replicat Parameter File with the DBOPTIONS INTEGRATEDPARAMS (<name><value>setting.',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_APPLY,CDB_APPLY_PARAMETERS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,HANDLER,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_handler',
      null,
      null,
      ' select con_id, apply_name
             , ddl_handler, precommit_handler 
          from cdb_apply
          where purpose like ''GoldenGate%Apply''
          order by con_id,apply_name
  ',
      'HC,APPLY,HANDLER,CONFIG',
      'Apply Handlers',
      null,
      'YES',
      'APPLY', 
      'Information about Apply Handlers',
      '- Apply Handlers are initiated during the runtime of the Replicat process',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_APPLY',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,HANDLER,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_dml_handler',
      null,
      null,
      ' select con_id, object_owner||''.''||object_name OBJECT
             , operation_name 
             , handler_type TYP
             , decode(assemble_lobs,''Y'',''Yes'',''N'',''No'',''UNKNOWN'') lob_assemble
             , apply_name
             , user_procedure
             , handler_name
          from cdb_apply_dml_handlers 
          order by con_id,object_owner,object_name,apply_name
  ',
      'HC,APPLY,HANDLER,CONFIG',
      'Apply DML Handlers',
      null,
      'YES',
      'APPLY', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_APPLY_DML_HANDLERS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,HANDLER,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_hdml_status1',
      null,
      null,
      ' select * 
          from cdb_streams_stmt_handlers 
          order by con_id,handler_name
  ',
      'HC,APPLY,HANDLER,CONFIG',
      'DML Statement Handler Status (1)',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,HANDLER,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_hdml_status2',
      null,
      null,
      ' select * 
          from cdb_streams_stmts 
          order by con_id, handler_name, execution_sequence
  ',
      'HC,APPLY,HANDLER,CONFIG',
      'DML Statement Handler Statements (2) **',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,CDR,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cdr_error_info',
      null,
      null,
      ' select SOURCE_OBJECT_OWNER||''.''||SOURCE_OBJECT_NAME source_object
             , DEST_OBJECT_OWNER||''.''||DEST_OBJECT_NAME destination_object
             , LOCAL_TRANSACTION_ID
             , SOURCE_TRANSACTION_ID||'' from ''||SOURCE_DATABASE source_txn
             , ERROR_NUMBER
             , POSITION,SEQ#,RBA,INDEX#
             , RESOLUTION_STATUS
             , RESOLUTION_COLUMN
             , RESOLUTION_METHOD
             , RESOLUTION_TIME
          from SYS."_DBA_APPLY_CDR_INFO"
  ',
      'HC,APPLY,CDR,PERF',
      'Apply Error Information',
      null,
      'YES',
      'APPLY', 
      '- Internal Apply Error Information in regard to CDR',
      'Check for Info',
      '12.1.0.0.0',
      '',
      '0',
      '_DBA_APPLY_CDR_INFO',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,ERROR,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cdr_error_info_2',
      null,
      null,
      ' select spare1 "APPLY_NAME",count(*) 
          from sys."_DBA_APPLY_CDR_INFO"  
          group by spare1
  ',
      'HC,APPLY,ERROR,PERF',
      'Apply Error Summary',
      null,
      'YES',
      'APPLY', 
      '- Internal Apply CDR Error Summary',
      'Check for Info',
      '12.1.0.0.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,CDR,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cdr',
      null,
      null,
      ' select * 
          from cdb_apply_table_columns 
          order by con_id,object_owner,object_name,column_name
  ',
      'HC,APPLY,CDR,CONFIG',
      'Conflict Detection Control',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_APPLY_TABLE_COLUMNS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,CDR,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cdr_cols',
      null,
      null,
      ' select con_id 
             , object_owner||''.''||object_name object
             , method_name
             , resolution_column
             , column_name 
          from cdb_apply_conflict_columns 
          order by con_id,object_owner,object_name
  ',
      'HC,APPLY,CDR,CONFIG',
      'Update Conflict Resolution Columns',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_APPLY_CONFLICT_COLUMNS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_keycols',
      null,
      null,
      ' select * 
          from cdb_apply_key_columns 
          order by con_id,object_owner,object_name
  ',
      'HC,APPLY,CONFIG',
      'Key Columns set for Apply',
      null,
      'YES',
      'APPLY', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_APPLY_KEY_COLUMNS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,CDR,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cdr_confh_detail',
      null,
      null,
      ' select * 
          from CDB_APPLY_DML_CONF_HANDLERS 
          order by con_id,1,2,3,4,5,6
  ',
      'HC,APPLY,CDR,CONFIG',
      'OGG CDR - DML Conflict Handlers Details',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_APPLY_DML_CONF_HANDLERS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,CDR,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cdr_hcoll_detail',
      null,
      null,
      ' select * 
          from cdb_APPLY_HANDLE_COLLISIONS 
          order by con_id,1,2,3,4
  ',
      'HC,APPLY,CDR,CONFIG',
      'OGG Handle Collisions Details',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_APPLY_HANDLE_COLLISIONS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,ERROR,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'cdr_errh',
      null,
      null,
      ' select * 
           from cdb_APPLY_REPERROR_HANDLERS 
           order by con_id,1,2,3,4,5,6
  ',
      'HC,APPLY,ERROR,CONFIG',
      'OGG Reperror Handlers Details',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_APPLY_REPERROR_HANDLERS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,ERROR,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'err_q',
      null,
      null,
      ' select e.apply_name
             , e.local_transaction_id
             , e.message_number
             , e.message_count
             , e.error_type
             , e.error_message
             , e.error_creation_time
             , e.source_database
             , e.source_transaction_id
             , e.source_commit_position
             , utl_raw.cast_to_varchar2(e.source_commit_position) source_commit_scn
          from CDB_APPLY_ERROR e, cdb_apply a
          where a.apply_name = e.apply_name
          and   a.con_id = e.con_id
          and   a.purpose = ''GoldenGate Apply''
          order by e.apply_name ,source_commit_scn 
  ',
      'HC,APPLY,ERROR,PERF',
      'Error Queue',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_APPLY_ERROR',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,ERROR,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'err_q_type',
      null,
      null,
      ' select con_id
             , m.error_number
             , object_owner
             , object_name
             , operation
             , count(*) 
          from cdb_apply_error_messages m 
          group by con_id, m.error_number, object_owner, object_name, operation 
  ',
      'HC,APPLY,ERROR,PERF',
      'Tables by Error Type',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_APPLY_ERROR_MESSAGES',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,INSTANTIATION,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_inst_tables',
      null,
      null,
      ' select con_id, source_database
             , source_object_owner||''.''||source_object_name OBJECT
             , ignore_scn
             , instantiation_scn
          from cdb_apply_instantiated_objects 
          order by con_id,source_database, object
  ',
      'HC,APPLY,INSTANTIATION,CONFIG',
      'Instantiation SCNs for Apply Tables',
      null,
      'YES',
      'APPLY', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,INSTANTIATION,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_inst_all',
      null,
      null,
      ' select con_id
             , source_database
             , source_schema OBJECT
             , instantiation_Scn INST_SCN
             , ''SCHEMA'' global_flag 
          from cdb_apply_instantiated_schemas
        UNION
        select con_id
             , source_database
             , '''' OBJECT
             , instantiation_Scn INST_SCN
             , ''GLOBAL'' global_flag 
          from cdb_apply_instantiated_global 
        order by con_id,source_database,object
  ',
      'HC,APPLY,INSTANTIATION,CONFIG',
      'Instantiation SCNs for Apply Schema and Database (DDL)',
      null,
      'YES',
      'APPLY', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,RULES,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_rulesets',
      null,
      null,
      ' select con_id
             , owner||''.''||object_name OBJECT
             , object_id
             , object_type
             , created
             , last_ddl_time
             , status 
          from cdb_objects 
          where object_type in (''RULE'',''RULE SET'',''CAPTURE'',''APPLY'')
          order by con_id,object_type, object
  ',
      'HC,DATABASE,RULES,CONFIG',
      'Database Objetcs: RuleSets, Rules and Processes',
      null,
      'NO',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_OBJECTS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,RECO,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'reco_tabs',
      null,
      null,
      ' select rs.con_id 
             , sysdate
             , rs.creation_time
             , rs.invoking_package||''.''||rs.invoking_procedure PROCEDURE
             , rs.status
             , rs.done_block_num||'' of ''||rs.total_blocks||'' Steps Completed'' PROGRESS
             , to_number(sysdate-rs.creation_time)*86400 ELAPSED_SECONDS
             , rs.script_id
             , rsb.forward_block CURRENT_STEP
          from cdb_recoverable_script rs, cdb_recoverable_script_blocks rsb 
          where rs.con_id = rsb.con_id 
          and   rs.script_id = rsb.script_id 
          and   rsb.block_num = rs.done_block_num + 1 
          order by con_id,creation_time
  ',
      'HC,DATABASE,RECO,CONFIG',
      'Check Recoverable Tables',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_RECOVERABLE_SCRIPT,CDB_RECOVERABLE_SCRIPT_BLOCKS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,RECO,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'reco_errv',
      null,
      null,
      ' SELECT e.* 
          FROM cdb_RECOVERABLE_SCRIPT_ERRORS e, cdb_recoverable_script s 
          where e.script_id = s.script_id 
          and e.con_id = s.con_id
          order by e.con_id,e.script_id
  ',
      'HC,DATABASE,RECO,CONFIG',
      'Check Recoverable Error View',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_RECOVERABLE_SCRIPT_ERRORS,CDB_RECOVERABLE_SCRIPT',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,RECO,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'reco_blocks',
      null,
      null,
      ' select b.con_id
            , b.script_id, b.block_num
            , b.status
            , forward_block_dblink, forward_block 
          from cdb_recoverable_script_blocks b, cdb_recoverable_script s 
          where b.con_id=s.con_id 
          and b.script_id = s.script_id 
          order by con_id,b.script_id, block_num 
  ',
      'HC,DATABASE,RECO,CONFIG',
      'Identify Current Script Blocks',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_RECOVERABLE_SCRIPT,CDB_RECOVERABLE_SCRIPT_BLOCKS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,RECO,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'reco_hist',
      null,
      null,
      ' select rs.con_id
             , rs.creation_time
             , rs.invoking_package||''.''||rs.invoking_procedure PROCEDURE
             , rs.status
             , rs.done_block_num||'' of ''||rs.total_blocks||'' Steps Completed'' PROGRESS
             , rs.script_id
             , rs.script_comment
          from cdb_recoverable_script_hist rs 
          where (sysdate-creation_time) < 30
          order by con_id,creation_time
  ',
      'HC,DATABASE,RECO,CONFIG',
      'History of Recoverable Scripts in last 30 days',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_RECOVERABLE_SCRIPT_HIST',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,RECO,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'reco_params',
      null,
      null,
      ' select *
          from cdb_recoverable_script_params 
          order by con_id,1,2,3
  ',
      'HC,DATABASE,RECO,CONFIG',
      'Recoverable Script Parameters',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_RECOVERABLE_SCRIPT_PARAMS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,MEMORY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'sp_db',
      null,
      null,
      ' select inst_id
             , dbms_goldengate_hcadm_int.display_bytes(total_memory_allocated)                                                             as "Total Memory Allocated"
             , dbms_goldengate_hcadm_int.display_bytes(current_size)                                                                       as "Current Size"
             , dbms_goldengate_hcadm_int.display_number(decode(current_size, 0,to_number(null),(total_memory_allocated/current_size)*100)) as "Streams Pool [Percentage]"
             , dbms_goldengate_hcadm_int.display_bytes(sga_target_value)                                                                   as "SGA Target Value"
             , shrink_phase
             , advice_disabled
             , con_id
         from gv$streams_pool_statistics
  ',
      'HC,DATABASE,MEMORY,PERF',
      'Streams Pool Statistics by Instance',
      null,
      'YES',
      'NONE', 
      'Information about the current Streams Pool usage Percentage',
      '- Check the Total memory allocated to the Streams pool. It should always be less than the current size of the Streams pools',
      '12.1.0.0.0',
      '',
      '0',
      'GV$STREAMS_POOL_STATISTICS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,COMPARISON,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'compare',
      null,
      null,
      ' select * 
          from cdb_comparison 
          order by con_id,owner,comparison_name,comparison_mode
  ',
      'HC,DATABASE,COMPARISON,CONFIG',
      'Defined Comparisons',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_COMPARISON',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,COMPARISON,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'compare_info',
      null,
      null,
      ' select * 
          from cdb_comparison_scan 
          order by con_id,owner,comparison_name,parent_scan_id,scan_id
  ',
      'HC,DATABASE,COMPARISON,CONFIG',
      'Comparison Information',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_COMPARISON_SCAN',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,QUEUES,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'hist_bufq',
      null,
      null,
      ' select s.begin_interval_time,s.end_interval_time 
             , s.con_id 
        --   , bq.snap_id
             , bq.instance_number
             , bq.queue_schema||''.''||bq.queue_name Queue
             , bq.num_msgs, bq.cnum_msgs
        --   , bq.queue_id
             , bq.startup_time
        --   , bq.dbid
          from cdb_hist_buffered_queues bq, cdb_hist_snapshot s 
          where bq.con_id=s.con_id 
          and bq.snap_id=s.snap_id   
          and s.end_interval_time >= systimestamp-1 
          order by s.con_id,bq.queue_schema,bq.queue_name,s.end_interval_time
  ',
      'HC,DATABASE,QUEUES,PERF',
      'Buffered Queue History for last day',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_HIST_BUFFERED_QUEUES,CDB_HIST_SNAPSHOT',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,QUEUES,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'hist_bufq_sub',
      null,
      null,
      ' select s.begin_interval_time,s.end_interval_time
        --   , bs.snap_id
             , s.con_id
             , bs.instance_number
       --    , bs.subscriber_id
             , bs.queue_schema||''.''||bs.queue_name Queue
             , bs.subscriber_name
             , bs.num_msgs, bs.cnum_msgs
       --    , subscriber_address
             , bs.startup_time
       --    , bs.dbid
          from cdb_hist_buffered_subscribers bs, cdb_hist_snapshot s 
          where bs.con_id=s.con_id 
          and   bs.snap_id=s.snap_id 
          and   s.end_interval_time >= systimestamp-1 
          order by s.con_id, bs.queue_schema,bs.queue_name,bs.subscriber_id,s.end_interval_time
  ',
      'HC,DATABASE,QUEUES,PERF',
      'Buffered Subscriber History for last day',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_HIST_BUFFERED_SUBSCRIBERS,CDB_HIST_SNAPSHOT',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_hist',
      null,
      null,
      ' select s.begin_interval_time,s.end_interval_time
             , s.con_id
             , sa.instance_number
             , sa.apply_name
             , sa.reader_lag
             , sa.reader_total_messages_dequeued
             , sa.coord_lwm_lag
             , sa.coord_total_received
             , sa.coord_total_applied
             , sa.coord_total_rollbacks
             , sa.coord_total_wait_deps
             , sa.coord_total_wait_cmts
             , sa.server_total_messages_applied
             , sa.server_elapsed_dequeue_time
             , sa.server_elapsed_apply_time
             , sa.startup_time
          -- , sa.dbid
          from cdb_hist_streams_apply_sum sa, cdb_hist_snapshot s 
          where sa.apply_name in (select apply_name from cdb_apply where purpose like ''GoldenGate%'')  
          and sa.con_id=s.con_id 
          and sa.snap_id=s.snap_id 
          and s.end_interval_time > = systimestamp-1 
          order by s.con_id,sa.apply_name,s.end_interval_time
  ',
      'HC,APPLY,PERF',
      'Apply History for last day',
      null,
      'YES',
      'APPLY', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_APPLY,CDB_HIST_SNAPSHOT,CDB_HIST_STREAMS_APPLY_SUM',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'gg_no_support',
      null,
      null,
      ' select * 
          from CDB_GOLDENGATE_SUPPORT_MODE 
          where support_mode = ''NONE'' 
          order by con_id, owner, object_name
  ',
      'HC,CAPTURE,CONFIG',
      'Tables not supported by GoldenGate Integrated Capture',
      null,
      'YES',
      'CAPTURE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_GOLDENGATE_SUPPORT_MODE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,GENERAL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_ap_procs',
      null,
      null,
      ' select apply_name 
             , status
             , purpose
             , apply_tag
             , apply_user
             , message_delivery_mode
             , error_number
             , error_message 
          from cdb_apply 
          order by apply_name
  ',
      'HC,APPLY,GENERAL',
      'Database Apply processes',
      null,
      'NO',
      'APPLY', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_APPLY',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,SESSION,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'gg_sess',
      null,
      null,
      ' select con_id, inst_id
             , sid, serial#
             , module
             , action
             , process
             , program
             , status
             , decode(server,''DEDICATED'',''DED'',''SHR'') SVR
             , state
             , event
             , logon_time
          from gv$session
          where (module = ''GoldenGate'' or module like ''%tream%'' or module like ''OGG%'')
          and (action not like ''%EMON%'' and action not like ''%QMON%'' and action not like ''%AQ%'' or action is null)
          order by con_id, inst_id, module, action
  ',
      'HC,DATABASE,SESSION,PERF',
      'GoldenGate Sessions',
      null,
      'YES',
      'NONE', 
      'GoldenGate related Database Sessions.',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'GV$SESSION',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,LOGMINER,INTERNAL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'logmnr_dbmap',
      null,
      null,
      ' select global_name
             , pdb_name
             , logmnr_uid
             , flags
             , logmnr_mdh 
          from system.logmnrc_dbname_uid_map
  ',
      'HC,CAPTURE,LOGMINER,INTERNAL',
      'LogMiner Dictionary: Logminer Database Map',
      null,
      'YES',
      'CAPTURE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '1',
      'LOGMNRC_DBNAME_UID_MAP',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,LOGMINER,INTERNAL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'logmnr_did',
      null,
      null,
      ' select * from system.logmnr_did$
  ',
      'HC,CAPTURE,LOGMINER,INTERNAL',
      'LogMiner Dictionary: Logmnr_did$ table',
      null,
      'YES',
      'NONE', 
      'LogMiner Dictionary Information used for Support only',
      'NONE',
      '12.1.0.0.0',
      '',
      '1',
      'LOGMNR_DID$',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,LOGMINER,INTERNAL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'logmnr_container',
      null,
      null,
      ' select * from system.logmnr_container$
  ',
      'HC,CAPTURE,LOGMINER,INTERNAL',
      'LogMiner Dictionary: logmnr_container$',
      null,
      'YES',
      'NONE', 
      'LogMiner Dictionary Information used for Support only',
      'NONE',
      '12.1.0.0.0',
      '',
      '1',
      'LOGMNR_CONTAINER$',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,LOGMINER,INTERNAL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'logmnr_pdb_info',
      null,
      null,
      ' select * from system.logmnr_pdb_info$
  ',
      'HC,CAPTURE,LOGMINER,INTERNAL',
      'LogMiner Dictionary: logmnr_pdb_info$',
      null,
      'YES',
      'NONE', 
      'LogMiner Dictionary Information used for Support only',
      'NONE',
      '12.1.0.0.0',
      '',
      '1',
      'LOGMNR_PDB_INFO$',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,INTERNAL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'intl_2',
      null,
      null,
      ' select x.con_id, x.inst_id
             , c.capture_name
             , x.name
             , x.value 
          from x$krvxsv x, cdb_capture c 
          where value != ''0'' 
          and   c.logminer_id=x.session_id 
          and   c.con_id = x.con_id 
          order by capture_name, name
  ',
      'HC,DATABASE,INTERNAL',
      'Internal:',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_jobs1',
      null,
      null,
      ' select con_id, instance, job, what, log_user, priv_user, schema_user
             , total_time, broken, interval, failures
             , last_date, last_sec, this_date, this_sec, next_date, next_sec     
          from cdb_jobs 
          order by con_id
  ',
      'HC,DATABASE,CONFIG',
      'Database Jobs',
      null,
      'NO',
      'DATABASE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_jobs2',
      null,
      null,
      ' select con_id, owner, job_name
             , repeat_interval
             , enabled 
          from cdb_scheduler_jobs 
          where repeat_interval =''FREQ=SECONDLY'' 
          and enabled=''TRUE''
  ',
      'HC,DATABASE,CONFIG',
      'Database Scheduler Jobs (running every Second)',
      null,
      'NO',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_jobs3',
      null,
      null,
      ' select con_id, OWNER,JOB_NAME, JOB_SUBNAME, JOB_STYLE, JOB_CREATOR
             , PROGRAM_OWNER, PROGRAM_NAME, JOB_TYPE, JOB_ACTION
             , NUMBER_OF_ARGUMENTS
             , SCHEDULE_OWNER, SCHEDULE_NAME, SCHEDULE_TYPE
             , START_DATE, REPEAT_INTERVAL, END_DATE
             , JOB_CLASS
             , ENABLED
             , AUTO_DROP
             , RESTARTABLE
             , STATE
             , JOB_PRIORITY
             , RUN_COUNT,MAX_RUNS,FAILURE_COUNT,MAX_FAILURES,RETRY_COUNT
             , LAST_START_DATE,LAST_RUN_DURATION,NEXT_RUN_DATE,SCHEDULE_LIMIT,MAX_RUN_DURATION
             , LOGGING_LEVEL
             , STOP_ON_WINDOW_CLOSE
             , INSTANCE_STICKINESS
             , RAISE_EVENTS
             , SYSTEM
             , JOB_WEIGHT
             , SOURCE
             , NUMBER_OF_DESTINATIONS
             , DESTINATION_OWNER, DESTINATION
             , CREDENTIAL_OWNER, CREDENTIAL_NAME
             , INSTANCE_ID
             , DEFERRED_DROP
             , ALLOW_RUNS_IN_RESTRICTED_MODE
          from cdb_scheduler_jobs 
          order by con_id
  ',
      'HC,DATABASE,CONFIG',
      'Database Scheduler Jobs',
      null,
      'NO',
      'DATABASE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,QUEUES,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'agents',
      null,
      null,
      ' select * 
          from cdb_aq_agents 
          order by con_id,agent_name
  ',
      'HC,DATABASE,QUEUES,CONFIG',
      'Agents',
      null,
      'NO',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_AQ_AGENTS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,QUEUES,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'agents_priv',
      null,
      null,
      ' select * 
         from cdb_aq_agent_privs 
         order by con_id,agent_name,db_username
  ',
      'HC,DATABASE,QUEUES,CONFIG',
      'Agent Privileges',
      null,
      'NO',
      'DATABASE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_AQ_AGENT_PRIVS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'long_txns',
      null,
      null,
      ' select t.con_id, t.inst_id, sid||'',''||serial# sid,xidusn||''.''||xidslot||''.''||xidsqn xid
             , (sysdate -  start_date ) * 1440 runlength 
             , terminal
             , program 
          from gv$transaction t, gv$session s 
          where t.addr=s.taddr 
          and   (sysdate - start_date) * 1440 > 20 
          order by runlength desc
  ',
      'HC,DATABASE,PERF',
      'Current Long Running Transactions',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'GV$SESSION,GV$TRANSACTION',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ogg_out_pt',
      null,
      null,
      ' select con_id, server_name
             , source_database
             , processed_low_position
             , processed_low_time
             , oldest_position
          from cdb_xstream_outbound_progress order 
          by con_id, server_name
  ',
      'HC,APPLY,PERF',
      'Outbound Progress Table',
      null,
      'YES',
      'APPLY', 
      'Information about the progress made by all XStream outbound servers in the database',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_XSTREAM_OUTBOUND_PROGRESS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE_APPLY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'err_tab_stat_sum',
      null,
      null,
      ' select con_id, apply_name
             , sum(total_inserts+total_updates+total_deletes) Total_Operations
             , sum(total_inserts)                             Total_Inserts
             , sum(total_updates)                             Total_Updates
             , sum(total_deletes)                             Total_Deletes
             , sum(wait_dependencies)                         Wait_Dependencies
             , sum(lob_operations)                            LOB_Operations
             , sum(insert_collisions) Insert_Collisions
             , sum(update_collisions) Update_Collisions
             , sum(delete_collisions) Delete_Collisions
             , sum(reperror_records) Reperror_Discards
             , sum(reperror_ignores) Reperror_Ignores
             , sum(cdr_insert_row_exists)  CDR_Insert_Row_Exists
             , sum(cdr_update_row_exists)  CDR_Update_Row_Exists
             , sum(cdr_update_row_missing) CDR_Update_Row_Missing
             , sum(cdr_delete_row_exists)  CDR_Delete_Row_Exists
             , sum(cdr_delete_row_missing) CDR_Delete_Row_Missing
             , sum(cdr_successful_resolutions) CDR_Successful_Resolutions
             , sum(cdr_failed_resolutions) CDR_Failed_Resolutions
             , sum(cdr_successful_resolutions+cdr_failed_resolutions) cdr_total_resolutions
          from gv$goldengate_table_stats
          group by con_id, apply_name
          order by 1 asc, 2 asc, 3 desc
  ',
      'HC,CAPTURE_APPLY,PERF',
      'GoldenGate Table Statistics Summary',
      null,
      'YES',
      'APPLY', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE_APPLY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'err_tab_stat_detail',
      null,
      null,
      ' select con_id, apply_name
             , destination_table_owner||''.''||destination_table_name destination_object
             , source_table_owner||''.''||source_table_name           source_object
             , sum(total_inserts+total_updates+total_deletes)       Total_Operations
             , sum(total_inserts)                                   Total_Inserts
             , sum(total_updates)                                   Total_Updates
             , sum(total_deletes)                                   Total_Deletes
             , sum(wait_dependencies)                               Wait_Dependencies
             , sum(lob_operations)                                  LOB_Operations
             , sum(insert_collisions) Insert_Collisions
             , sum(update_collisions) Update_Collisions
             , sum(delete_collisions) Delete_Collisions
             , sum(reperror_records) Reperror_Discards
             , sum(reperror_ignores) Reperror_Ignores
             , sum(cdr_insert_row_exists)  CDR_Insert_Row_Exists
             , sum(cdr_update_row_exists)  CDR_Update_Row_Exists
             , sum(cdr_update_row_missing) CDR_Update_Row_Missing
             , sum(cdr_delete_row_exists)  CDR_Delete_Row_Exists
             , sum(cdr_delete_row_missing) CDR_Delete_Row_Missing
             , sum(cdr_successful_resolutions) CDR_Successful_Resolutions
             , sum(cdr_failed_resolutions)     CDR_Failed_Resolutions
             , sum(cdr_successful_resolutions+cdr_failed_resolutions) cdr_total_resolutions
          from gv$goldengate_table_stats
          group by con_id, apply_name, destination_table_owner||''.''||destination_table_name, source_table_owner||''.''||source_table_name  
          order by 1 asc,2 asc, 3 asc, 4 asc, 5 desc
  ',
      'HC,CAPTURE_APPLY,PERF',
      'GoldenGate Table Statistics by Table',
      null,
      'YES',
      'APPLY', 
      'Information about the GoldenGate Table Statistics',
      '- Check the tables with the highest number of DML Operations <BR>- Check the tables where Conflict Detection and Resolution is most often done',
      '12.1.0.0.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_RECEIVER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_recv_stats',
      null,
      null,
      ' select con_id, inst_id, sid, serial#, apply_name
             , startup_time
             , source_database_name
             , total_messages_received
             , total_available_messages
             , state
             , last_received_msg_position
             , acknowledgement_position
          from gv$gg_apply_receiver 
          order by con_id, inst_id, apply_name
  ',
      'HC,APPLY,APPLY_RECEIVER,PERF',
      'Apply Receiver Statistics',
      null,
      'YES',
      'APPLY', 
      'Information about Apply Receiver - Database Foregroundprocess of Replicat',
      '- Check state of the Apply Reader Process. <BR>- Check for the size of Memory being used and allocated. <BR>- Check for watermark dependencies which should be much smaller than row-level dependencies.',
      '12.1.0.0.0',
      '',
      '0',
      'GV$GG_APPLY_RECEIVER',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_RECEIVER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'intl_anr_stat',
      null,
      null,
      ' select x.con_id, x.inst_id
             , x.sid_knst
             , x.serial_knst
             , x.apply_name_knstanr
             , x.startup_time_knstanr
             , x.src_dbname_knstanr
             , x.acknowlegement_knstanr
             , x.last_rcv_msg_knstanr
             , x.total_rcv_msgs_knstanr
             , x.available_msgs_knstanr
             , decode(x.state_knstanr, 
                      0, ''Initializing'', 
                      1, ''Sending unapplied txns'', 
                      2, ''Waiting for message from client'', 
                      3, ''Receiving LCRs'', 
                      4, ''Evaluating rules'', 
                      5, ''Enqueueing LCRS'', 
                      6, ''Waiting for memory'', 
                      7, ''Waiting for apply to read'', 
                      8, ''Waiting for LCR from client'', 
                      9, ''Waiting for client flush request to complete'', 
                      10, ''Waiting for client commit to complete'', null)
               state_knstanr
             , x.last_rcv_pos_knstanr
             , x.acknowlegement_pos_knstanr
             , x.con_id 
          from   x$knstanr x, x$knstacr y 
          where  x.inst_id=y.inst_id
          and    x.apply_name_knstanr=y.applyname_knstacr
          and    y.type_knst=1 and bitand(y.purpose_flag_knstacr, 12)=4 
          and exists (select 1 from v$session s 
                       where s.sid=x.sid_knst 
                       and   s.serial#=x.serial_knst
                     ) 
  ',
      'HC,APPLY,APPLY_RECEIVER,PERF',
      'Internal: Apply Receiver Statistics for CDB',
      null,
      'YES',
      'APPLY', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_READER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_read_stats',
      null,
      null,
      ' SELECT ap.APPLY_NAME
             , s.sid,s.serial#
             , SUBSTR(s.PROGRAM,INSTR(S.PROGRAM,''('')+1,4) PROCESS_NAME
             , r.ELAPSED_DEQUEUE_TIME
             , r.ELAPSED_SCHEDULE_TIME
             , r.STATE
             , r.oldest_transaction_id
          FROM gV$GG_APPLY_READER r, gV$SESSION s, CDB_APPLY ap
          WHERE r.SID = s.SID AND
                r.SERIAL# = s.SERIAL# AND
                r.inst_id = s.inst_id AND
                r.APPLY_NAME = ap.APPLY_NAME
          order by ap.apply_name
  ',
      'HC,APPLY,APPLY_READER,PERF',
      'Apply Reader',
      null,
      'YES',
      'APPLY', 
      'Information about Apply Reader Process',
      '- Check state of the Apply Reader Process. <BR>- Check for the size of Memory being used and allocated. <BR>- Check for watermark dependencies which should be  much smaller than row-level dependencies',
      '12.1.0.0.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_COORDINATOR,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_coord_stats',
      null,
      null,
      ' SELECT ap.APPLY_NAME
             , SUBSTR(s.PROGRAM,INSTR(S.PROGRAM,''('')+1,4) PROCESS
             , c.STARTUP_TIME
             , c.ELAPSED_SCHEDULE_TIME
             , c.STATE
             , c.TOTAL_RECEIVED RECEIVED
             , c.TOTAL_ASSIGNED ASSIGNED
             , c.unassigned_complete_txns unassigned
             , c.TOTAL_APPLIED APPLIED
             , c.TOTAL_ERRORS ERRORS
             , c.total_ignored
             , c.total_rollbacks
          FROM gV$GG_APPLY_COORDINATOR c, gV$SESSION s, cdb_APPLY ap
          WHERE c.SID = s.SID 
          AND   c.SERIAL# = s.SERIAL# 
          AND   c.APPLY_NAME = ap.APPLY_NAME  
          order by ap.apply_name
  ',
      'HC,APPLY,APPLY_COORDINATOR,PERF',
      'Apply Coordinator Statistics',
      null,
      'YES',
      'APPLY', 
      'Information about Apply Coordinator Process',
      '- Check the State of the Coordinatar Process. <BR>The State should be IDLE or APPLYING, but INITIALIZING, SHUTTING DOWN or ABORTING shows maintainance or incident issues. <BR>- Total number of transactions RECEIVED, ASSIGNED and APPLIED by the apply process since the apply process was last started. <BR>A high difference betwwen Received and Assigned transactions indicates high activity. <BR>- Rollback activity indicates rollbacks related unexpected contention. <BR>- Unassigned completed transaction sshould be 0 or small number.',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_APPLY,GV$GG_APPLY_COORDINATOR,GV$SESSION',
      '3', 
      '10'
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,APPLY_SERVER,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_srvr_sql',
      null,
      null,
      ' select a.inst_id
             , a.apply_name
             , a.server_id
             , q.sql_id
             , q.sql_fulltext sqltext
          from gv$GG_apply_server a, gv$sql q, gv$session s
          where a.sid = s.sid  
          and  a.serial#=s.serial#
          and  a.inst_id = s.inst_id 
          and  s.sql_hash_value = q.hash_value 
          and  s.sql_address = q.address 
          and  s.sql_id = q.sql_id 
          order by a.apply_name, a.server_id
  ',
      'HC,APPLY,APPLY_SERVER,PERF',
      'Apply Server SQL Statements',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'GV$GG_APPLY_SERVER,GV$SESSION,GV$SQL',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,PATCH,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_patches',
      null,
      null,
      ' select xmltransform(dbms_qopatch.get_opatch_list()
             , dbms_qopatch.GET_OPATCH_XSLT()) opatch_list 
          from dual 
  ',
      'HC,DATABASE,PATCH,CONFIG',
      'Patch List',
      null,
      'YES',
      'NONE', 
      'Database Patch Information',
      '- Check that the database uses the latest available Patches (see MOS note 2103391.1/1557031.1)',
      '12.1.0.0.0',
      '',
      '1',
      'DUAL',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,SUPLOG,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'suplog_cdb',
      null,
      null,
      ' select * 
          from cdb_supplemental_logging 
          order by con_id
  ',
      'HC,DATABASE,SUPLOG,CONFIG',
      'Container based Supplemental Logging',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_SUPPLEMENTAL_LOGGING',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_dictstat',
      null,
      null,
      ' with endpoints as (select con_id
                          , min(to_char(last_analyzed,''YYYY-MM-DD'')) min
                          , max(to_char(last_analyzed,''YYYY-MM-DD'')) max
                          from cdb_tab_statistics 
                        where owner = ''SYS'' 
	                and last_analyzed is not null
                        group by con_id)
      select StatGathDate,StatCount,tg.con_id from (
         select con_id
              , nvl(to_char(t.last_analyzed,''YYYY-MM-DD''),''No Statistics'') StatGathDate
              , count(*) StatCount
           from cdb_tab_statistics t
           where t.owner = ''SYS''
           group by con_id,nvl(to_char(t.last_analyzed,''YYYY-MM-DD''),''No Statistics'')
    ) tg, endpoints e
    where tg.con_id = e.con_id
    and (tg.StatGathDate = ''No Statistics'' 
    or tg.StatGathDate = e.min
    or tg.StatGathDate = e.max
	  )
    order by tg.con_id,tg.StatGathDate 
  ',
      'HC,DATABASE,CONFIG',
      'Database Dictionary Statistics',
      null,
      'YES',
      'DATABASE', 
      '- Dictionary Statistics of the Database',
      '- From database tuning aspects, it''s a best practice to have statistics on Dictionary objects',
      '12.1.0.0.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'db_fixtabstat',
      null,
      null,
      ' with endpoints as (select s.con_id
                         ,min(to_char(s.last_analyzed,''YYYY-MM-DD'')) min
                         ,max(to_char(s.last_analyzed,''YYYY-MM-DD'')) max
                      from cdb_tab_statistics s
                      where (s.con_id,s.table_name) in (SELECT con_id,name FROM v$fixed_table WHERE  type = ''TABLE'')
					  and s.last_analyzed is not null
                      group by s.con_id)
select distinct StatGathDate,StatCount,tg.con_id from (
  select con_id
       , nvl(to_char(t.last_analyzed,''YYYY-MM-DD''),''No Statistics'') StatGathDate
       , count(*) StatCount
    from cdb_tab_statistics t
    where (t.con_id,t.table_name) in (SELECT con_id,name FROM v$fixed_table WHERE  type = ''TABLE'')
    group by con_id,nvl(to_char(t.last_analyzed,''YYYY-MM-DD''),''No Statistics'')
    ) tg, endpoints e
  where tg.con_id = e.con_id
  and (tg.StatGathDate = ''No Statistics'' 
    or tg.StatGathDate = e.min
    or tg.StatGathDate = e.max
	  )
order by tg.con_id,tg.StatGathDate 
  ',
      'HC,DATABASE,CONFIG',
      'Database Fixed Table Statistics',
      null,
      'YES',
      'DATABASE', 
      '- Fixed table Statistics of the Database',
      '- From database tuning aspects, it''s a best practice to have fixed table statistics',
      '12.1.0.0.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ap_progtab_count',
      null,
      null,
      ' select con_id, owner||''.''||segment_name object
             , tablespace_name
             , dbms_goldengate_hcadm_int.display_bytes(bytes) "Size"
             , (select count(*) from sys.streams$_apply_progress) Count
             , extents
             , blocks
          from cdb_segments
          where owner =''SYS''
          and segment_name = ''STREAMS$_APPLY_PROGRESS''
          and exists (select 1 from cdb_apply where purpose =''GoldenGate Apply'')
  ',
      'HC,APPLY,PERF',
      'Apply Progress table - Segment',
      null,
      'YES',
      'APPLY', 
      'Segment Size and Count on sys.streams$_apply_progress table',
      'If the size of the segment or the count becomes too large, the table might be reorganized (Contact Oracle Support)',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_APPLY,CDB_SEGMENTS,STREAMS$_APPLY_PROGRESS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,PERF') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'logmnr_ckpt_count',
      null,
      null,
      ' select owner||''.''||segment_name object
             , tablespace_name
             , dbms_goldengate_hcadm_int.display_bytes(bytes) "Size"
             , (select count(*) from system.logmnr_restart_ckpt$) Count
             , extents
             , blocks
          from cdb_segments
          where owner =''SYSTEM''
          and segment_name = ''LOGMNR_RESTART_CKPT$''
          and exists (select 1 from cdb_capture where purpose =''GoldenGate Capture'')
  ',
      'HC,CAPTURE,PERF',
      'Information about LogMiner Restart Checkpoint table',
      null,
      'YES',
      'APPLY', 
      'Segment Size and Count on system.logmnr_restart_ckpt$ table',
      'If the size of the segment or the count becomes too large, the table might be reorganized (Contact Oracle Support)',
      '12.1.0.0.0',
      '',
      '0',
      'CDB_CAPTURE,CDB_SEGMENTS,LOGMNR_RESTART_CKPT$',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.1.2','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONSTRAINTS,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'rep_object_const',
      null,
      null,
      ' with repobject as (select con_id,source_object_owner owner, source_object_name table_name 
                     from CDB_APPLY_INSTANTIATED_OBJECTS
  union 
  select t.con_id,t.owner, t.table_name 
    from cdb_tables t, cdb_APPLY_INSTANTIATED_SCHEMAS a, cdb_users u
    where t.con_id = a.con_id
    and   t.owner  = a.source_schema
    and   t.con_id = u.con_id
    and   t.owner  = u.username
    and   u.oracle_maintained =''N''
  union 
  select t.con_id,t.owner, t.table_name  
    from cdb_tables t, cdb_users u 
    where t.con_id = u.con_id
    and   t.owner  = u.username
    and   u.oracle_maintained=''N''
  union 
  select distinct con_id,destination_table_owner owner, destination_table_name table_name from gv$goldengate_table_stats)
  select distinct con_id,object,constraint_name,constraint_type
       , rely, Ref_constraint
       , status, LAST_CHANGE
    from
    (
     select c.con_id,c.owner||''.''||c.table_name object
          , c.constraint_name
          , c.constraint_type
          , rely
          , r_owner||''.''||r_constraint_name Ref_constraint
          , status, LAST_CHANGE
     from cdb_constraints c, repobject ro
     where c.con_id = ro.con_id 
     and   c.owner=ro.owner
     and   c.table_name=ro.table_name
     and   c.constraint_type in (''P'',''U'',''R'')
     and   c.constraint_name not like ''SYS_IOT%''
     UNION ALL
     select c.con_id,c.owner||''.''||c.table_name 
          , c.constraint_name
          , c.constraint_type
          , rely
          , r_owner||''.''||r_constraint_name Ref_constraint
          , status, LAST_CHANGE
     from cdb_constraints c,repobject ro  
     where c.con_id = ro.con_id
     and   c.owner=ro.owner and c.table_name=ro.table_name 
     and   c.constraint_type in (''P'',''U'',''R'')
     and   c.constraint_name not like ''SYS_IOT%'' 
     )
     order by con_id, object,constraint_type
  ',
      'HC,DATABASE,CONSTRAINTS,CONFIG',
      'Check for Constraints on Tables configured for Database Objects',
      null,
      'YES',
      'Apply', 
      'Information about Constraints in regard to the replicated tables.',
      'NONE',
      '12.1.0.1.2',
      '',
      '0',
      'CDB_CONSTRAINTS,REPOBJECT',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.1.2','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONSTRAINTS,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'rep_object_const2',
      null,
      null,
      ' with suplogobject as (
select con_id,table_owner owner, table_name
 from cdb_capture_prepared_tables
 where (table_owner,con_id) in (select username,con_id from cdb_users where oracle_maintained= ''N'')
 and (supplemental_log_data_pk   !=''NO''
 or   supplemental_log_data_ui   !=''NO''
 or   supplemental_log_data_fk   !=''NO''
 or   supplemental_log_data_all  !=''NO'')
 )
select distinct con_id,object,constraint_name,constraint_type
      , rely, Ref_constraint
      , status, LAST_CHANGE
  from
  (
  select  c.con_id,c.owner||''.''||c.table_name object
         ,c.constraint_name,c.constraint_type
         ,rely, r_owner||''.''||r_constraint_name Ref_constraint
         ,status, LAST_CHANGE
from cdb_constraints c, suplogobject slo
where c.owner=slo.owner
and   c.table_name=slo.table_name
and   c.con_id = slo.con_id
and   c.constraint_type in (''P'',''U'',''R'')
and   c.constraint_name not like ''SYS_IOT%''
UNION ALL
select  c.con_id,c.owner||''.''||c.table_name 
       ,c.constraint_name, c.constraint_type
       ,rely, r_owner||''.''||r_constraint_name Ref_constraint
       ,status, LAST_CHANGE
   from cdb_constraints c,suplogobject slo  
   where c.owner=slo.owner 
   and c.table_name=slo.table_name 
   and c.con_id = slo.con_id
   and   c.constraint_type in (''P'',''U'',''R'')
   and   c.constraint_name not like ''SYS_IOT%'' 
   )
   order by con_id,object,constraint_type 
  ',
      'HC,DATABASE,CONSTRAINTS,CONFIG',
      'Check for Constraints on Tables configured for Database Objects',
      null,
      'NO',
      'CAPTURE', 
      'Information about Constraints in regard to the replicated tables.',
      'NONE',
      '12.1.0.1.2',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.2.0.1.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,DATABASE,CONSTRAINTS,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'gg_no_unique',
      null,
      null,
      ' select con_id, owner, table_name,bad_column
          from cdb_goldengate_not_unique
          where (con_id, owner) not in (select con_id, username from cdb_users where oracle_maintained=''Y'')
          order by owner,table_name
  ',
      'HC,DATABASE,CONSTRAINTS,CONFIG',
      'Check if records within base table can uniquely be identified',
      null,
      'YES',
      'NONE', 
      'NONE',
      '- Tables with no uniqueness are causing full table scans',
      '12.2.0.1.0',
      '',
      '0',
      'CDB_GOLDENGATE_NOT_UNIQUE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.2.0.1.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ProcEvent_E',
      null,
      null,
      '  select p.con_id
              , p.event_time
              , p.process_type
              , p.streams_name process_name
              , p.event_name
              , p.description
              , p.error_number 
            from cdb_replication_process_events p, cdb_capture c
            where p.streams_name = c.capture_name 
            and p.con_id = c.con_id
            and p.event_time > trunc (sysdate -10)
            order by p.event_time desc,p.con_id asc
  ',
      'HC,CAPTURE,CONFIG',
      'Process Events related to Replication',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.2.0.1.0',
      '',
      '0',
      'CDB_CAPTURE,CDB_REPLICATION_PROCESS_EVENTS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.2.0.1.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'ProcEvent_R',
      null,
      null,
      ' select p.con_id
             , p.event_time
             , p.process_type
             , p.streams_name process_name
             , p.event_name
             , p.description
             , p.error_number
          from cdb_replication_process_events p, cdb_apply a
          where p.streams_name = a.apply_name
          and p.con_id = a.con_id
          and a.purpose != ''GoldenGate Capture''
          and p.event_time > trunc (sysdate -10)
          order by p.event_time desc, p.con_id asc
  ',
      'HC,APPLY,CONFIG',
      'Process Events related to Replication',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.2.0.1.0',
      '',
      '0',
      'CDB_APPLY,CDB_REPLICATION_PROCESS_EVENTS',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.2.0.1.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,ACDR,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'AutoCDR_Tables',
      null,
      null,
      ' select TABLE_OWNER,TABLE_NAME
              ,RESOLUTION_GRANULARITY,FETCHCOLS,RECORD_CONFLICTS,USE_CUSTOM_HANDLERS
              ,TOMBSTONE_TABLE,ROW_RESOLUTION_COLUMN,EXISTING_DATA_TIMESTAMP ,CON_ID 
         from CDB_GG_AUTO_CDR_TABLES 
         order by CON_ID,TABLE_OWNER,TABLE_NAME
',
      'HC,APPLY,ACDR,CONFIG',
      'Tables configured for AutoCDR',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.2.0.1.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.2.0.1.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,ACDR,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'AutoCDR_Columns',
      null,
      null,
      ' select TABLE_OWNER,TABLE_NAME,COLUMN_GROUP_NAME,COLUMN_NAME,RESOLUTION_COLUMN,CON_ID 
          from CDB_GG_AUTO_CDR_COLUMNS
          order by CON_ID,TABLE_OWNER,TABLE_NAME
',
      'HC,APPLY,ACDR,CONFIG',
      'Tables configured for AutoCDR - Column Details',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.2.0.1.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '12.2.0.1.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,APPLY,ACDR,CONFIG') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'AutoCDR_Column_Groups',
      null,
      null,
      'select TABLE_OWNER,TABLE_NAME,COLUMN_GROUP_NAME,RESOLUTION_COLUMN,CON_ID 
         from CDB_GG_AUTO_CDR_COLUMN_GROUPS
         order by CON_ID,TABLE_OWNER,TABLE_NAME
',
      'HC,APPLY,ACDR,CONFIG',
      'Tables configured for AutoCDR - Column Group Details',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '12.2.0.1.0',
      '',
      '0',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '18.0.0.0.0','') = '1' --and ('0' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,CAPTURE_APPLY') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      'topo_db',
      ' declare              pragma autonomous_transaction;              begin    for i in 1..dbms_goldengate_hcadm_int.advisor_run_count loop     -- TODO:dbms_streams_advisor_adm is removed in 18.1     --      dbms_streams_advisor_adm.ANALYZE_CURRENT_PERFORMANCE ;      dbms_lock.sleep(dbms_goldengate_hcadm_int.advisor_interval);    end loop;    end ;   ',
      null,
      ' select * from dba_streams_tp_database ',
      'HC,CAPTURE_APPLY',
      'Topology Databases',
      null,
      'NO',
      'NONE', 
      'NONE',
      'NONE',
      '18.0.0.0.0',
      '',
      '0',
      'DBA_STREAMS_TP_DATABASE',
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '001_cs',
      null,
      null,
      ' SELECT object_type, count(*) total
          FROM all_objects
          WHERE OWNER = dbms_goldengate_hcadm_int.get_current(''schema_classic'')
          GROUP BY object_type
          ORDER BY TOTAL desc  
  ',
      'HC,HC_CLASSIC',
      'Distinct Object Types and their Count in the Schema',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '002_cs',
      null,
      null,
      ' SELECT data_type, count(*) total
          FROM all_tab_columns
         WHERE OWNER = dbms_goldengate_hcadm_int.get_current(''schema_classic'') 
         GROUP BY data_type
         ORDER BY TOTAL desc
  ',
      'HC,HC_CLASSIC',
      'Distinct Column Data Types and their Count in the Schema',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '003_cs',
      null,
      null,
      ' SELECT distinct(table_name)
           FROM all_tables
           WHERE owner = dbms_goldengate_hcadm_int.get_current(''schema_classic'') 
        MINUS
      (SELECT obj1.name
         FROM SYS.user$ user1, SYS.user$ user2, SYS.cdef$ cdef, SYS.con$ con1, SYS.con$ con2, SYS.obj$ obj1, SYS.obj$ obj2
         WHERE user1.name = dbms_goldengate_hcadm_int.get_current(''schema_classic'') 
         AND cdef.type# = 2 
         AND con2.owner# = user2.user#(+)
         AND cdef.robj# = obj2.obj#(+)
         AND cdef.rcon# = con2.con#(+)
         AND obj1.owner# = user1.user#
         AND cdef.con# = con1.con#
         AND cdef.obj# = obj1.obj#
       UNION
       SELECT idx.table_name
         FROM all_indexes idx
         WHERE idx.owner = dbms_goldengate_hcadm_int.get_current(''schema_classic'') 
         AND idx.uniqueness = ''UNIQUE''
      )
  ',
      'HC,HC_CLASSIC',
      'Tables with No Primary Key or Unique Index in the Schema',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '004_cs',
      null,
      null,
      ' select i.TABLE_OWNER, i.TABLE_NAME
             , i.OWNER, i.INDEX_NAME
	     , i.UNIQUENESS, c.CONSTRAINT_NAME, c.CONSTRAINT_TYPE 
          from dba_indexes i, dba_constraints c
          where i.TABLE_NAME=c.TABLE_NAME 
	  and i.OWNER=c.INDEX_OWNER 
  	  and i.INDEX_NAME=c.INDEX_NAME 
  	  and i.UNIQUENESS=''NONUNIQUE'' 
  	  AND c.CONSTRAINT_TYPE=''P''
  	  and i.OWNER = dbms_goldengate_hcadm_int.get_current(''schema_classic'')
  ',
      'HC,HC_CLASSIC',
      'Primary key constraints that have a non-unique index in the Schema',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '005_cs',
      null,
      null,
      ' SELECT distinct(table_name)
          FROM all_tab_columns
          WHERE owner = dbms_goldengate_hcadm_int.get_current(''schema_classic'')
          group by table_name
          HAVING sum(data_length) > 1000000
        MINUS
       (SELECT obj1.name
          FROM SYS.user$ user1, SYS.user$ user2, SYS.cdef$ cdef, SYS.con$ con1, SYS.con$ con2, SYS.obj$ obj1, SYS.obj$ obj2
          WHERE user1.name = dbms_goldengate_hcadm_int.get_current(''schema_classic'') 
          AND cdef.type# = 2 
          AND con2.owner# = user2.user#(+)
          AND cdef.robj# = obj2.obj#(+)
          AND cdef.rcon# = con2.con#(+)
          AND obj1.owner# = user1.user#
          AND cdef.con# = con1.con#
          AND cdef.obj# = obj1.obj#
        UNION
       SELECT idx.table_name
         FROM all_indexes idx
         WHERE idx.owner = dbms_goldengate_hcadm_int.get_current(''schema_classic'') 
         AND idx.uniqueness = ''UNIQUE'')
  ',
      'HC,HC_CLASSIC',
      'Tables with no Primary Key or Unique Index and Rowsize > 1M in the Schema',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '006_cs',
      null,
      null,
      ' select owner, table_name, '' '' "PARTITION_NAME", '' '' "PARTITIONING_TYPE", logging 
          from DBA_TABLES
          where logging <> ''YES'' 
          and OWNER = dbms_goldengate_hcadm_int.get_current(''schema_classic'')
        union
        select owner, table_name, '' '', partitioning_type, DEF_LOGGING logging
          from DBA_part_tables
          where DEF_LOGGING != ''YES'' 
          and owner = dbms_goldengate_hcadm_int.get_current(''schema_classic'')
        union
        select table_owner, table_name, PARTITION_NAME, '' '', logging 
          from DBA_TAB_PARTITIONS
          where logging <> ''YES'' 
          and table_owner = dbms_goldengate_hcadm_int.get_current(''schema_classic'')
        union
        select table_owner, table_name, PARTITION_NAME, '' '', logging 
          from DBA_TAB_SUBPARTITIONS
          where logging <> ''YES'' 
          and table_owner = dbms_goldengate_hcadm_int.get_current(''schema_classic'')
  ',
      'HC,HC_CLASSIC',
      'Tables with NOLOGGING in the Schema',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '007_cs',
      null,
      null,
      ' SELECT c.TABLE_NAME
             , c.CONSTRAINT_NAME, c.CONSTRAINT_TYPE, c.DEFERRABLE, c.DEFERRED, c.VALIDATED, c.STATUS
             , i.INDEX_TYPE, c.INDEX_NAME, c.INDEX_OWNER
          FROM dba_constraints c,
          dba_indexes i
          WHERE i.TABLE_NAME = c.TABLE_NAME
          AND   i.OWNER      = c.OWNER
          AND   c.owner      = dbms_goldengate_hcadm_int.get_current(''schema_classic'')
          AND  c.DEFERRED    = ''DEFERRED''
  ',
      'HC,HC_CLASSIC',
      'Tables with Deferred Primary Key constraints in the Schema',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '008_cs',
      null,
      null,
      ' SELECT table_name, sum(data_length) row_length_over_2M
          FROM all_tab_columns
          WHERE OWNER = dbms_goldengate_hcadm_int.get_current(''schema_classic'') 
          GROUP BY table_name
          HAVING sum(data_length) > 2000000
  ',
      'HC,HC_CLASSIC',
      'Tables Defined with Rowsize>2M in the Schema',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '009_cs',
      null,
      null,
      ' SELECT distinct(table_name)
          FROM dba_tab_columns
          WHERE owner = dbms_goldengate_hcadm_int.get_current(''schema_classic'') 
          AND column_id > 32
          AND table_name in (SELECT distinct(table_name)
                               FROM all_tables
                               WHERE owner = dbms_goldengate_hcadm_int.get_current(''schema_classic'') 
                             MINUS
                            (SELECT obj1.name
                               FROM SYS.user$ user1, SYS.user$ user2, SYS.cdef$ cdef, SYS.con$ con1, SYS.con$ con2, SYS.obj$ obj1, SYS.obj$ obj2
                               WHERE user1.name = dbms_goldengate_hcadm_int.get_current(''schema_classic'') 
                               AND cdef.type# = 2
                               AND con2.owner# = user2.user#(+)
                               AND cdef.robj# = obj2.obj#(+)
                               AND cdef.rcon# = con2.con#(+)
                               AND obj1.owner# = user1.user#
                               AND cdef.con# = con1.con#
                               AND cdef.obj# = obj1.obj#
                             UNION
                             SELECT idx.table_name
                               FROM all_indexes idx
                               WHERE idx.owner = dbms_goldengate_hcadm_int.get_current(''schema_classic'') 
                               AND idx.uniqueness = ''UNIQUE''
                             )
                           )
  ',
      'HC,HC_CLASSIC',
      'Tables that might fail Add Trandata in the Schema',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '010_cs',
      null,
      null,
      ' SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE
          FROM all_tab_columns
          WHERE OWNER = dbms_goldengate_hcadm_int.get_current(''schema_classic'') 
          AND data_type in (''CLOB'', ''BLOB'', ''LONG'', ''LONG RAW'', ''NCLOB'')
  ',
      'HC,HC_CLASSIC',
      'Tables with CLOB, BLOB, LONG, NCLOB or LONG RAW Columns in the Schema',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '012_cs',
      null,
      null,
      ' SELECT TABLE_NAME, COMPRESSION
          FROM all_all_tables
          WHERE OWNER = dbms_goldengate_hcadm_int.get_current(''schema_classic'')
          AND (COMPRESSION = ''ENABLED'')
  ',
      'HC,HC_CLASSIC',
      'Tables with Compression enabled in the Schema',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '013_cs',
      null,
      null,
      ' SELECT TABLE_NAME, COMPRESSION
          FROM ALL_TAB_PARTITIONS
          WHERE TABLE_OWNER = dbms_goldengate_hcadm_int.get_current(''schema_classic'')
          AND (COMPRESSION = ''ENABLED'')
  ',
      'HC,HC_CLASSIC',
      'Tables with Compression enabled on Partitions in the Schema',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '014_cs',
      null,
      null,
      ' SELECT TABLE_NAME, CLUSTER_NAME, TABLE_TYPE 
          FROM all_all_tables
          WHERE OWNER = dbms_goldengate_hcadm_int.get_current(''schema_classic'') 
          AND (cluster_name is NOT NULL or TABLE_TYPE is NOT NULL)
  ',
      'HC,HC_CLASSIC',
      'Cluster or Object Tables in the Schema',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '015_cs',
      null,
      null,
      ' SELECT TABLE_NAME, IOT_TYPE, TABLE_TYPE 
          FROM all_all_tables
          WHERE OWNER = dbms_goldengate_hcadm_int.get_current(''schema_classic'') 
          AND (IOT_TYPE is not null or TABLE_TYPE is NOT NULL)
  ',
      'HC,HC_CLASSIC',
      'IOTS in the Schema',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '016_cs',
      null,
      null,
      ' SELECT TABLE_NAME, index_name, index_type 
          FROM dba_indexes WHERE OWNER = dbms_goldengate_hcadm_int.get_current(''schema_classic'')
          and index_type = ''DOMAIN''
  ',
      'HC,HC_CLASSIC',
      'Tables with Domain or Context Indexes in the Schema',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '017_cs',
      null,
      null,
      ' SELECT decode(constraint_type,''P'',''PRIMARY KEY'',''U'',''UNIQUE'', ''C'', ''CHECK'', ''R'', ''REFERENTIAL'') constraint_type_desc
             , count(*) total
          FROM all_constraints
          WHERE OWNER = dbms_goldengate_hcadm_int.get_current(''schema_classic'') 
          GROUP BY constraint_type
  ',
      'HC,HC_CLASSIC',
      'Types of Constraints on the Tables in the Schema',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '018_cs',
      null,
      null,
      ' SELECT table_name, constraint_name
          FROM all_constraints
          WHERE OWNER = dbms_goldengate_hcadm_int.get_current(''schema_classic'') 
          and constraint_type = ''R'' 
          and delete_rule = ''CASCADE''
  ',
      'HC,HC_CLASSIC',
      'Cascading Deletes on the Tables in the Schema',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '019_cs',
      null,
      null,
      ' SELECT table_name, COUNT(*) trigger_count
          FROM all_triggers
          WHERE OWNER = dbms_goldengate_hcadm_int.get_current(''schema_classic'') 
          GROUP BY table_name
  ',
      'HC,HC_CLASSIC',
      'Tables Defined with Triggers in the Schema',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '020_cs',
      null,
      null,
      ' select TABLE_OWNER, TABLE_NAME, TABLE_TYPE
             , OWNER, INDEX_NAME, INDEX_TYPE
             , UNIQUENESS, CLUSTERING_FACTOR, NUM_ROWS, LAST_ANALYZED, BUFFER_POOL
          from dba_indexes
          where OWNER = dbms_goldengate_hcadm_int.get_current(''schema_classic'')
          and    index_type = ''NORMAL/REV''
  ',
      'HC,HC_CLASSIC',
      'Reverse Key Indexes Defined in the Schema',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '022_cs',
      null,
      null,
      ' SELECT SEQUENCE_OWNER, SEQUENCE_NAME
 	     , MIN_VALUE, MAX_VALUE, INCREMENT_BY
 	     , CYCLE_FLAG CYCLE, ORDER_FLAG 
 	     , CACHE_SIZE,LAST_NUMBER
          FROM DBA_SEQUENCES
          WHERE SEQUENCE_OWNER=UPPER(dbms_goldengate_hcadm_int.get_current(''schema_classic''))
  ',
      'HC,HC_CLASSIC',
      'Sequences in the Schema',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC_FULL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '005_cf',
      null,
      null,
      ' SELECT owner, object_type, count(*) total
          FROM all_objects
          WHERE OWNER not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                             ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                             ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                             ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                             ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
	  AND OWNER NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'')					 
          GROUP BY object_type, owner
          ORDER BY owner, total, object_type
  ',
      'HC,HC_CLASSIC_FULL',
      'Distinct Object Types and their Count By Schema',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC_FULL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '006_cf',
      null,
      null,
      ' SELECT data_type, count(*) total
          FROM all_tab_columns
          WHERE OWNER not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                             ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                             ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                             ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                             ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
	  AND OWNER NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'')
          GROUP BY data_type
          ORDER BY total
  ',
      'HC,HC_CLASSIC_FULL',
      'Distinct Column Data Types and their Count in the Database',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC_FULL,DATABASE') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '007_cf',
      null,
      null,
      ' SELECT distinct(table_name)
          FROM dba_tab_columns
          WHERE owner not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                             ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                             ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                             ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                             ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
	  AND OWNER NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'')  
	  AND column_id > 32
	  AND table_name in
	  (SELECT distinct(table_name)
	     FROM all_tables
	     WHERE owner not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                                ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                             ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                             ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                             ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
		  AND OWNER NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'')
		   MINUS
		   (SELECT obj1.name
		      FROM SYS.user$ user1, SYS.user$ user2, SYS.cdef$ cdef, SYS.con$ con1, SYS.con$ con2, SYS.obj$ obj1, SYS.obj$ obj2
		      WHERE user1.name not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                             ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                             ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                             ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                             ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
		  AND user1.name NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'')
		     AND cdef.type# = 2
		     AND con2.owner# = user2.user#(+)
		     AND cdef.robj# = obj2.obj#(+)
		     AND cdef.rcon# = con2.con#(+)
		     AND obj1.owner# = user1.user#
		     AND cdef.con# = con1.con#
		     AND cdef.obj# = obj1.obj#
		    UNION
		    SELECT idx.table_name
		      FROM all_indexes idx
		      WHERE idx.owner not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                             ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                             ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                             ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                             ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
		  AND idx.owner NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'') 
		      AND idx.uniqueness = ''UNIQUE''
			)
		  )
 ',
      'HC,HC_CLASSIC_FULL,DATABASE',
      'Tables that might fail Add Trandata in the Database',
      null,
      'YES',
      'DATABASE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC_FULL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '008_cf',
      null,
      null,
      ' SELECT owner, table_name
          FROM all_tables
          WHERE owner not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                             ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                             ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                             ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                             ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
	  AND OWNER NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'') 
        MINUS
       (SELECT user1.name, obj1.name
          FROM SYS.user$ user1, SYS.user$ user2, SYS.cdef$ cdef, SYS.con$ con1, SYS.con$ con2, SYS.obj$ obj1, SYS.obj$ obj2
          WHERE user1.name not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                             ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                             ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                             ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                             ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
		  AND user1.name NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'') 
          AND cdef.type# = 2 
          AND con2.owner# = user2.user#(+)
          AND cdef.robj# = obj2.obj#(+)
          AND cdef.rcon# = con2.con#(+)
          AND obj1.owner# = user1.user#
          AND cdef.con# = con1.con#
          AND cdef.obj# = obj1.obj#
        UNION
        SELECT distinct(owner), idx.table_name
          FROM all_indexes idx
          WHERE idx.owner not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                             ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                             ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                             ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                             ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
	  AND idx.owner NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'') 
          AND idx.uniqueness = ''UNIQUE''
		)
 ',
      'HC,HC_CLASSIC_FULL',
      'Tables with no Primary Key or Unique Index by Schema',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC_FULL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '009_cf',
      null,
      null,
      ' select owner, table_name, '' '', logging 
          from DBA_TABLES
          where logging <> ''YES''
          and owner not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                             ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                             ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                             ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                             ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
	  AND OWNER NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'')
        UNION
        select owner, table_name, partitioning_type, DEF_LOGGING "LOGGING" 
		  from DBA_part_tables
          where DEF_LOGGING != ''YES'' 
          and owner not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                             ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                             ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                             ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                             ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
	  AND OWNER NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'')      
        UNION
        select table_owner, table_name, PARTITION_NAME, logging 
		  from DBA_TAB_PARTITIONS
          where logging <> ''YES'' 
          and table_owner not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                             ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                             ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                             ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                             ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
	  AND table_OWNER NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'') 
        UNION
        select table_owner, table_name, PARTITION_NAME, logging
  		  from DBA_TAB_SUBPARTITIONS
          where logging <> ''YES'' 
          and table_owner not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                             ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                             ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                             ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                             ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
	  AND table_OWNER NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'') 
  ',
      'HC,HC_CLASSIC_FULL',
      'This may cause problems with missing data down stream.',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC_FULL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '010_cf',
      null,
      null,
      '  SELECT c.TABLE_NAME
              , c.CONSTRAINT_NAME, c.CONSTRAINT_TYPE, c.DEFERRABLE, c.DEFERRED, c.VALIDATED, c.STATUS
              , i.INDEX_TYPE, c.INDEX_NAME, c.INDEX_OWNER
          FROM dba_constraints c,
          dba_indexes i
          WHERE i.TABLE_NAME = c.TABLE_NAME
          AND   i.OWNER      = c.OWNER
          AND   c.owner not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                               ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                               ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                               ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                               ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
          AND   c.OWNER NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'')
          AND   c.DEFERRED    = ''DEFERRED''
          AND   i.owner not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                               ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                               ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                               ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                               ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
          AND i.OWNER NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'')
  ',
      'HC,HC_CLASSIC_FULL',
      'Tables with Deferred Primary Key constraints in the Database',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC_FULL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '011_cf',
      null,
      null,
      ' SELECT table_name, sum(data_length) row_length_over_2M
          FROM all_tab_columns
          WHERE owner not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                             ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                             ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                             ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                             ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
	  AND OWNER NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'')
          GROUP BY table_name
          HAVING sum(data_length) > 2000000
 ',
      'HC,HC_CLASSIC_FULL',
      'Tables Defined with Rowsize > 2M in the Database',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC_FULL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '012_cf',
      null,
      null,
      ' SELECT owner, table_name
          FROM all_tab_columns
          WHERE owner not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                             ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                             ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                             ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                             ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
		  AND OWNER NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'')
          group by owner, table_name
          HAVING sum(data_length) > 1000000
        MINUS
(SELECT user1.name, obj1.name
  FROM SYS.user$ user1, SYS.user$ user2, SYS.cdef$ cdef, SYS.con$ con1, SYS.con$ con2, SYS.obj$ obj1, SYS.obj$ obj2
 WHERE user1.name not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                             ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                             ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                             ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                             ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
		  AND user1.name NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'') 
   AND cdef.type# = 2 
   AND con2.owner# = user2.user#(+)
   AND cdef.robj# = obj2.obj#(+)
   AND cdef.rcon# = con2.con#(+)
   AND obj1.owner# = user1.user#
   AND cdef.con# = con1.con#
   AND cdef.obj# = obj1.obj#
  UNION
  SELECT idx.owner, idx.table_name
    FROM all_indexes idx
    WHERE idx.owner not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                             ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                             ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                             ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                             ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
   AND idx.owner NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'')
   AND idx.uniqueness = ''UNIQUE'')
 ',
      'HC,HC_CLASSIC_FULL',
      'Tables with no Primary Key or Unique Index and Column lenght > 1M in the Database',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC_FULL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '013_cf',
      null,
      null,
      ' select i.TABLE_OWNER, i.TABLE_NAME
             , i.OWNER, i.INDEX_NAME
	         , i.UNIQUENESS, c.CONSTRAINT_NAME, c.CONSTRAINT_TYPE 
          from dba_indexes i, dba_constraints c
          where i.TABLE_NAME=c.TABLE_NAME 
	      and i.OWNER=c.INDEX_OWNER 
  	      and i.INDEX_NAME=c.INDEX_NAME 
  	      and i.UNIQUENESS=''NONUNIQUE'' 
  	      and c.CONSTRAINT_TYPE=''P''
          and i.OWNER not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                             ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                             ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                             ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                             ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
	  AND i.OWNER NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'')
  ',
      'HC,HC_CLASSIC_FULL',
      'Primary key constraints that have a non-unique index in the Database',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC_FULL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '014_cf',
      null,
      null,
      ' SELECT OWNER, TABLE_NAME, COLUMN_NAME, DATA_TYPE
          FROM all_tab_columns
          WHERE OWNER not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                             ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                             ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                             ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                             ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
	  AND OWNER NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'') 
          AND data_type in (''CLOB'', ''BLOB'', ''LONG'', ''LONG RAW'', ''NCLOB'')
          ORDER BY owner,table_name, data_type, column_name
  ',
      'HC,HC_CLASSIC_FULL',
      'Tables with CLOB, BLOB, LONG, NCLOB or LONG RAW Columns in the Database',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC_FULL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '016_cf',
      null,
      null,
      ' SELECT OWNER, TABLE_NAME, CLUSTER_NAME, TABLE_TYPE 
          FROM all_all_tables
          WHERE OWNER not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                             ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                             ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                             ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                             ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
	  AND OWNER NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'')
          AND (cluster_name is NOT NULL or TABLE_TYPE is NOT NULL)
  ',
      'HC,HC_CLASSIC_FULL',
      'Cluster or Object Tables in the Database',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('11' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC_FULL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '018_cf',
      null,
      null,
      ' select owner, table_name
          from DBA_TABLES
          where COMPRESSION = ''ENABLED''
          and  OWNER not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                             ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                             ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                             ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                             ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
          AND OWNER NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'')
  ',
      'HC,HC_CLASSIC_FULL',
      'Tables with Compression enabled in the Database',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '11',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC_FULL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '019_cf',
      null,
      null,
      ' SELECT TABLE_OWNER, TABLE_NAME, COMPRESSION
          FROM ALL_TAB_PARTITIONS
          WHERE (COMPRESSION = ''ENABLED'')
          and OWNER not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                             ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                             ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                             ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                             ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
          AND OWNER NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'')
  ',
      'HC,HC_CLASSIC_FULL',
      'Tables with Compression enabled on Partitions in the Database',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC_FULL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '020_cf',
      null,
      null,
      ' SELECT OWNER, TABLE_NAME, IOT_TYPE, TABLE_TYPE 
          FROM all_all_tables
          WHERE OWNER not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                             ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                             ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                             ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                             ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
	  AND OWNER NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'')
          AND (IOT_TYPE is not null or TABLE_TYPE is NOT NULL)
  ',
      'HC,HC_CLASSIC_FULL',
      'IOTs in the Database',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC_FULL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '021_cf',
      null,
      null,
      ' SELECT OWNER, TABLE_NAME, index_name, index_type 
          FROM dba_indexes 
          WHERE OWNER not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                             ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                             ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                             ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                             ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
	  AND OWNER NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'')
          and index_type = ''DOMAIN''
  ',
      'HC,HC_CLASSIC_FULL',
      'Tables with Domain or Context Indexes',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC_FULL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '022_cf',
      null,
      null,
      ' SELECT decode(constraint_type,''P'',''PRIMARY KEY'',''U'',''UNIQUE'', ''C'', ''CHECK'', ''R'', ''REFERENTIAL'') constraint_type_desc, count(*) total
          FROM all_constraints
          WHERE OWNER not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                             ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                             ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                             ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                             ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
	  AND OWNER NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'')  
          GROUP BY constraint_type
          ORDER BY total desc
  ',
      'HC,HC_CLASSIC_FULL',
      'Types of Constraints on the Tables in the database',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC_FULL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '023_cf',
      null,
      null,
      ' SELECT owner, table_name, constraint_name
          FROM all_constraints
          WHERE OWNER not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                             ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                             ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                             ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                             ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
	  AND OWNER NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'')
	  and constraint_type = ''R'' and delete_rule = ''CASCADE''
  ',
      'HC,HC_CLASSIC_FULL',
      'Cascading Deletes on the Tables in the database',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC_FULL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '024_cf',
      null,
      null,
      ' SELECT table_name, COUNT(*) trigger_count
          FROM all_triggers
          WHERE OWNER not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                             ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                             ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                             ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                             ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
	  AND OWNER NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'')  
          GROUP BY table_name
  ',
      'HC,HC_CLASSIC_FULL',
      'Tables Defined with Triggers in the database',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC_FULL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '025_cf',
      null,
      null,
      ' select TABLE_OWNER, TABLE_NAME, TABLE_TYPE
              , OWNER, INDEX_NAME, INDEX_TYPE
	      , UNIQUENESS, CLUSTERING_FACTOR, NUM_ROWS, LAST_ANALYZED, BUFFER_POOL
          from dba_indexes
          where index_type = ''NORMAL/REV''
          and OWNER not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                           ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                           ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                           ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                           ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
	  AND OWNER NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'')
  ',
      'HC,HC_CLASSIC_FULL',
      'Reverse Key Indexes Defined in the database',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC_FULL') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '028_cf',
      null,
      null,
      ' SELECT SEQUENCE_OWNER, SEQUENCE_NAME
 	         , MIN_VALUE, MAX_VALUE, INCREMENT_BY
 	         , CYCLE_FLAG CYCLE, ORDER_FLAG 
 	         , CACHE_SIZE,LAST_NUMBER
          FROM DBA_SEQUENCES
          WHERE SEQUENCE_OWNER not in (''PUBLIC'',''ANONYMOUS'',''APEX_PUBLIC_USER'',''APPQOSSYS'',''AUDSYS'',''CTXSYS''
                                      ,''DBSFWUSER'',''DBSNMP'',''DIP'',''DVF'',''DVSYS'',''FLOWS_FILES'',''GGSYS'',''GSMADMIN_INTERNAL'',''GSMCATUSER'',''GSMUSER''
                                      ,''LBACSYS'',''MDDATA'',''MDSYS'',''OJVMSYS'',''OLAPSYS'',''ORACLE_OCM'',''ORDDATA'',''ORDPLUGINS'',''ORDSYS'',''OUTLN''
                                      ,''REMOTE_SCHEDULER_AGENT'',''SI_INFORMTN_SCHEMA'',''SPATIAL_CSW_ADMIN_USR'',''SYS'',''SYS$UMF'',''SYSBACKUP''
                                      ,''SYSDG'',''SYSKM'',''SYSRAC'',''SYSTEM'',''WMSYS'',''XDB'',''XS$NULL'')
	  AND SEQUENCE_OWNER NOT IN (SELECT SCHEMA APEX_VER FROM dba_registry WHERE comp_id = ''APEX'')
  ',
      'HC,HC_CLASSIC_FULL',
      'Sequences in the Database',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC_FULL,HC_CLASSIC') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '028a_cf',
      null,
      null,
      ' select sum (BLOCKS) * max(BLOCK_SIZE)/ count(*)"Avg Log Size" 
          from gV$ARCHIVED_LOG
  ',
      'HC,HC_CLASSIC_FULL,HC_CLASSIC',
      'Average Redo log size',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC_FULL,HC_CLASSIC') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '029_cf',
      null,
      null,
      ' SELECT substr(to_char(FIRST_TIME, ''MM-DD-YY HH24:MI:SS''),1,5) DAY
	     , to_char(sum(decode(substr(to_char(FIRST_TIME, ''MM-DD-YY HH24:MI:SS''),10,2),''00'',1,0)),''99'') "00"
	     , to_char(sum(decode(substr(to_char(FIRST_TIME, ''MM-DD-YY HH24:MI:SS''),10,2),''01'',1,0)),''99'') "01" 
 	     , to_char(sum(decode(substr(to_char(FIRST_TIME, ''MM-DD-YY HH24:MI:SS''),10,2),''02'',1,0)),''99'') "02"
   	     , to_char(sum(decode(substr(to_char(FIRST_TIME, ''MM-DD-YY HH24:MI:SS''),10,2),''03'',1,0)),''99'') "03" 
   	     , to_char(sum(decode(substr(to_char(FIRST_TIME, ''MM-DD-YY HH24:MI:SS''),10,2),''04'',1,0)),''99'') "04" 
   	     , to_char(sum(decode(substr(to_char(FIRST_TIME, ''MM-DD-YY HH24:MI:SS''),10,2),''05'',1,0)),''99'') "05" 
   	     , to_char(sum(decode(substr(to_char(FIRST_TIME, ''MM-DD-YY HH24:MI:SS''),10,2),''06'',1,0)),''99'') "06" 
  	     , to_char(sum(decode(substr(to_char(FIRST_TIME, ''MM-DD-YY HH24:MI:SS''),10,2),''07'',1,0)),''99'') "07" 
	     , to_char(sum(decode(substr(to_char(FIRST_TIME, ''MM-DD-YY HH24:MI:SS''),10,2),''08'',1,0)),''99'') "08" 
   	     , to_char(sum(decode(substr(to_char(FIRST_TIME, ''MM-DD-YY HH24:MI:SS''),10,2),''09'',1,0)),''99'') "09" 
   	     , to_char(sum(decode(substr(to_char(FIRST_TIME, ''MM-DD-YY HH24:MI:SS''),10,2),''10'',1,0)),''99'') "10" 
   	     , to_char(sum(decode(substr(to_char(FIRST_TIME, ''MM-DD-YY HH24:MI:SS''),10,2),''11'',1,0)),''99'') "11" 
   	     , to_char(sum(decode(substr(to_char(FIRST_TIME, ''MM-DD-YY HH24:MI:SS''),10,2),''12'',1,0)),''99'') "12" 
  	     , to_char(sum(decode(substr(to_char(FIRST_TIME, ''MM-DD-YY HH24:MI:SS''),10,2),''13'',1,0)),''99'') "13" 
   	     , to_char(sum(decode(substr(to_char(FIRST_TIME, ''MM-DD-YY HH24:MI:SS''),10,2),''14'',1,0)),''99'') "14" 
   	     , to_char(sum(decode(substr(to_char(FIRST_TIME, ''MM-DD-YY HH24:MI:SS''),10,2),''15'',1,0)),''99'') "15" 
   	     , to_char(sum(decode(substr(to_char(FIRST_TIME, ''MM-DD-YY HH24:MI:SS''),10,2),''16'',1,0)),''99'') "16" 
   	     , to_char(sum(decode(substr(to_char(FIRST_TIME, ''MM-DD-YY HH24:MI:SS''),10,2),''17'',1,0)),''99'') "17" 
   	     , to_char(sum(decode(substr(to_char(FIRST_TIME, ''MM-DD-YY HH24:MI:SS''),10,2),''18'',1,0)),''99'') "18" 
   	     , to_char(sum(decode(substr(to_char(FIRST_TIME, ''MM-DD-YY HH24:MI:SS''),10,2),''19'',1,0)),''99'') "19" 
   	     , to_char(sum(decode(substr(to_char(FIRST_TIME, ''MM-DD-YY HH24:MI:SS''),10,2),''20'',1,0)),''99'') "20" 
   	     , to_char(sum(decode(substr(to_char(FIRST_TIME, ''MM-DD-YY HH24:MI:SS''),10,2),''21'',1,0)),''99'') "21" 
   	     , to_char(sum(decode(substr(to_char(FIRST_TIME, ''MM-DD-YY HH24:MI:SS''),10,2),''22'',1,0)),''99'') "22" 
   	     , to_char(sum(decode(substr(to_char(FIRST_TIME, ''MM-DD-YY HH24:MI:SS''),10,2),''23'',1,0)),''99'') "23" 
          FROM V$LOG_HISTORY 
          GROUP BY substr(to_char(FIRST_TIME, ''MM-DD-YY HH24:MI:SS''),1,5) 
          order by 1
  ',
      'HC,HC_CLASSIC_FULL,HC_CLASSIC',
      'Frequency of Log Switches by hour and day',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC_FULL,HC_CLASSIC') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '030_cf',
      null,
      null,
      ' select to_char(first_time, ''mm/dd'') ArchiveDate
             , dbms_goldengate_hcadm_int.display_bytes(sum(BLOCKS*BLOCK_SIZE)) LOG
          from v$archived_log
          where first_time > sysdate - 7
          group by to_char(first_time, ''mm/dd'')
          order by to_char(first_time, ''mm/dd'')
  ',
      'HC,HC_CLASSIC_FULL,HC_CLASSIC',
      'Summary of log volume processed by day for last 7 days',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

     declare
      ver varchar2(20);
     begin
       select version into ver from v$instance ; 
     -- check if the query is applicable for this db version and also
     -- applicable for this user
     if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' --and ('1' != '1' or user = 'SYS')
     then
     if (dbms_goldengate_hcadm_int.has_tags('HC','HC,HC_CLASSIC_FULL,HC_CLASSIC') = 1) then
     delete from gghc_stats_tab where stat_name = '';
     insert into gghc_stats_tab values(
      '031_cf',
      null,
      null,
      ' select to_char(first_time, ''MM-DD-YYYY'') ArchiveDate
             , to_char(first_time, ''HH24'') ArchiveHour
             , dbms_goldengate_hcadm_int.display_bytes(sum(BLOCKS*BLOCK_SIZE)) Log
           from v$archived_log
           where first_time > sysdate - 7
           group by to_char(first_time, ''MM-DD-YYYY''), to_char(first_time, ''HH24'')
           order by to_char(first_time, ''MM-DD-YYYY''), to_char(first_time, ''HH24'')
  ',
      'HC,HC_CLASSIC_FULL,HC_CLASSIC',
      'Summary of log volume processed per hour for last 7 days',
      null,
      'YES',
      'NONE', 
      'NONE',
      'NONE',
      '11.2.0.0.0',
      '',
      '1',
      NULL,
      1, 
      10
      ); 
      commit;
      end if;
      end if;
      end;
/

set define off
declare
  clb clob;
  ver varchar2(20);
begin
 select version into ver from v$instance ;
  if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' then
  delete from gghc_files where ID = 'hc.css';
  insert into gghc_files(ID, FILE_CONTENT) values 
  ('hc.css',empty_clob()) returning FILE_CONTENT into clb;
  dbms_lob.writeappend(clb, 
     length('body.awr {font:bold 10pt Arial,Helvetica,Geneva,sans-serif;color:black; background:White;}'||chr(10)),
     'body.awr {font:bold 10pt Arial,Helvetica,Geneva,sans-serif;color:black; background:White;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('pre.awr  {font:8pt Courier;color:black; background:White;}'||chr(10)),
     'pre.awr  {font:8pt Courier;color:black; background:White;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('h1.awr   {font:bold 20pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;border-bottom:1px solid #cccc99;margin-top:0pt; margin-bottom:0pt;padding:0px 0px 0px 0px;}'||chr(10)),
     'h1.awr   {font:bold 20pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;border-bottom:1px solid #cccc99;margin-top:0pt; margin-bottom:0pt;padding:0px 0px 0px 0px;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('h2.awr   {font:bold 18pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}'||chr(10)),
     'h2.awr   {font:bold 18pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('h3.awr,h3.awr_alert,h3.awr_internal {font:bold 12pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}'||chr(10)),
     'h3.awr,h3.awr_alert,h3.awr_internal {font:bold 12pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('h3.awr_alert {color:orange}'||chr(10)),
     'h3.awr_alert {color:orange}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('h3.awr_internal {color:#A7C8E2}'||chr(10)),
     'h3.awr_internal {color:#A7C8E2}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('h3.awr_rows {font:bold 7pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White; vertical-align:super;top : -1em;margin-left:6pt;display:inline-block}'||chr(10)),
     'h3.awr_rows {font:bold 7pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White; vertical-align:super;top : -1em;margin-left:6pt;display:inline-block}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('h3.awr_rows_hide {font:bold 7pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;position:relative;top : -1em;margin-left:6pt;display:none}'||chr(10)),
     'h3.awr_rows_hide {font:bold 7pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;position:relative;top : -1em;margin-left:6pt;display:none}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('h3.awr_tabs {font:bold 9pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;vertical-align:super;top : -1em;margin-left:6pt;display:inline-block}'||chr(10)),
     'h3.awr_tabs {font:bold 9pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;vertical-align:super;top : -1em;margin-left:6pt;display:inline-block}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('h3.awr_tabs_hide {font:bold 9pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;position:relative;top : -1em;margin-left:6pt;display:none}'||chr(10)),
     'h3.awr_tabs_hide {font:bold 9pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;position:relative;top : -1em;margin-left:6pt;display:none}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('li.awr {font: 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;}'||chr(10)),
     'li.awr {font: 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('th.awrnobg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;padding-left:4px; padding-right:4px;padding-bottom:2px}'||chr(10)),
     'th.awrnobg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;padding-left:4px; padding-right:4px;padding-bottom:2px}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('th.awrbg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:White; background:#336699;padding-left:4px; padding-right:4px;padding-bottom:2px;cursor:pointer}'||chr(10)),
     'th.awrbg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:White; background:#336699;padding-left:4px; padding-right:4px;padding-bottom:2px;cursor:pointer}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('th.sortable {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:White; background:#336699;padding-left:4px; padding-right:4px;padding-bottom:2px;cursor:pointer}'||chr(10)),
     'th.sortable {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:White; background:#336699;padding-left:4px; padding-right:4px;padding-bottom:2px;cursor:pointer}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('th.awrbg-up {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:White; background:#336699;padding-left:4px; padding-right:4px;padding-bottom:2px;cursor:pointer}'||chr(10)),
     'th.awrbg-up {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:White; background:#336699;padding-left:4px; padding-right:4px;padding-bottom:2px;cursor:pointer}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('td.awrbg-right {'||chr(10)),
     'td.awrbg-right {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   font:bold 12pt Arial,Helvetica,Geneva,sans-serif;margin-top:0pt; margin-bottom:4pt;'||chr(10)),
     '   font:bold 12pt Arial,Helvetica,Geneva,sans-serif;margin-top:0pt; margin-bottom:4pt;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' td.awrbg-down'||chr(10)),
     ' td.awrbg-down'||chr(10));
  dbms_lob.writeappend(clb, 
     length('{'||chr(10)),
     '{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  background:#336699;'||chr(10)),
     '  background:#336699;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  margin-right: 5px;'||chr(10)),
     '  margin-right: 5px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  margin-left: 5px;'||chr(10)),
     '  margin-left: 5px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  width:5px;'||chr(10)),
     '  width:5px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  height:5px;'||chr(10)),
     '  height:5px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  border-bottom: 5px solid transparent; /* left arrow slant */'||chr(10)),
     '  border-bottom: 5px solid transparent; /* left arrow slant */'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  border-top: 5px solid transparent; /* right arrow slant */'||chr(10)),
     '  border-top: 5px solid transparent; /* right arrow slant */'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  border-left: 5px solid orange; /* bottom, add background color here */'||chr(10)),
     '  border-left: 5px solid orange; /* bottom, add background color here */'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  '||chr(10)),
     '  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' th.awrbg-down:after, th.awrbg-up:after{'||chr(10)),
     ' th.awrbg-down:after, th.awrbg-up:after{'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' content: '' '';'||chr(10)),
     ' content: '' '';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  position: relative;'||chr(10)),
     '  position: relative;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  left: 2px;'||chr(10)),
     '  left: 2px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  border: 8px solid transparent;'||chr(10)),
     '  border: 8px solid transparent;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' th.awrbg-down:after{'||chr(10)),
     ' th.awrbg-down:after{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  top: 10px;'||chr(10)),
     '  top: 10px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  border-top-color: orange;'||chr(10)),
     '  border-top-color: orange;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' th.awrbg-up:after{'||chr(10)),
     ' th.awrbg-up:after{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  bottom: 10px;'||chr(10)),
     '  bottom: 10px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  border-bottom-color: orange;'||chr(10)),
     '  border-bottom-color: orange;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('th.awrbg-down,'||chr(10)),
     'th.awrbg-down,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('th.awrbg-up{'||chr(10)),
     'th.awrbg-up{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:White; background:#336699;padding-left:4px; padding-right:4px;padding-bottom:2px;'||chr(10)),
     'font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:White; background:#336699;padding-left:4px; padding-right:4px;padding-bottom:2px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  padding-right: 10px;cursor:pointer'||chr(10)),
     '  padding-right: 10px;cursor:pointer'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('td.awrnc {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;}'||chr(10)),
     'td.awrnc {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('td.awrc    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;}'||chr(10)),
     'td.awrc    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('a.awrbig    {font:15pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;}'||chr(10)),
     'a.awrbig    {font:15pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('td.awrnclb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;}'||chr(10)),
     'td.awrnclb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('td.awrncbb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;}'||chr(10)),
     'td.awrncbb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('td.awrncrb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-right: thin solid black;}'||chr(10)),
     'td.awrncrb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-right: thin solid black;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('td.awrcrb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-right: thin solid black;}'||chr(10)),
     'td.awrcrb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-right: thin solid black;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('td.awrclb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;}'||chr(10)),
     'td.awrclb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('td.awrcbb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;border-right: thin solid black;}'||chr(10)),
     'td.awrcbb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;border-right: thin solid black;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('a.awr {font:bold 8pt Arial,Helvetica,sans-serif;color:#663300; vertical-align:top;margin-top:0pt; margin-bottom:0pt;}'||chr(10)),
     'a.awr {font:bold 8pt Arial,Helvetica,sans-serif;color:#663300; vertical-align:top;margin-top:0pt; margin-bottom:0pt;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('td.awrnct {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:White;vertical-align:top;}'||chr(10)),
     'td.awrnct {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:White;vertical-align:top;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('td.awrct   {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:#FFFFCC; vertical-align:top;}'||chr(10)),
     'td.awrct   {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:#FFFFCC; vertical-align:top;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('td.awrnclbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-left: thin solid black;}'||chr(10)),
     'td.awrnclbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-left: thin solid black;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('td.awrncbbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;border-top: thin solid black;}'||chr(10)),
     'td.awrncbbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;border-top: thin solid black;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('td.awrncrbt {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-right: thin solid black;}'||chr(10)),
     'td.awrncrbt {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-right: thin solid black;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('td.awrcrbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-right: thin solid black;}'||chr(10)),
     'td.awrcrbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-right: thin solid black;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('td.awrclbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;}'||chr(10)),
     'td.awrclbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('td.awrcbbt   {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;border-right: thin solid black;}'||chr(10)),
     'td.awrcbbt   {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;border-right: thin solid black;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('table.tdiff_btn { padding:4px 4px 4px 4px;margin-left:20px}'||chr(10)),
     'table.tdiff_btn { padding:4px 4px 4px 4px;margin-left:20px}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('tr.awrnc {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;}'||chr(10)),
     'tr.awrnc {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('tr.awrc    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;}'||chr(10)),
     'tr.awrc    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('h4 {'||chr(10)),
     'h4 {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  color:black'||chr(10)),
     '  color:black'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('table.statsTable, th, td {'||chr(10)),
     'table.statsTable, th, td {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   border: 0px solid blue;'||chr(10)),
     '   border: 0px solid blue;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('table.statsTable {'||chr(10)),
     'table.statsTable {'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' box-shadow: 10px 10px 5px #888888'||chr(10)),
     ' box-shadow: 10px 10px 5px #888888'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('th {'||chr(10)),
     'th {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  background-color:grey'||chr(10)),
     '  background-color:grey'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('table.statsTable tr:nth-child(odd) {'||chr(10)),
     'table.statsTable tr:nth-child(odd) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   background-color: lightgrey'||chr(10)),
     '   background-color: lightgrey'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('div.awrbtn {'||chr(10)),
     'div.awrbtn {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  float:left;'||chr(10)),
     '  float:left;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('div.outer {'||chr(10)),
     'div.outer {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  margin-top:130px;'||chr(10)),
     '  margin-top:130px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('table.outer {'||chr(10)),
     'table.outer {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  width :100%'||chr(10)),
     '  width :100%'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('h1.awr_title    {font:bold 11pt Arial,Helvetica,Geneva,sans-serif;color:#336699;vertical-align:top;margin:0px 0px 0px 0px;float:left}'||chr(10)),
     'h1.awr_title    {font:bold 11pt Arial,Helvetica,Geneva,sans-serif;color:#336699;vertical-align:top;margin:0px 0px 0px 0px;float:left}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('h3.awr_title    {font:9pt Arial,Helvetica,Geneva,sans-serif;color:#000000;margin:3px 0px 0px 10px ;float:left}'||chr(10)),
     'h3.awr_title    {font:9pt Arial,Helvetica,Geneva,sans-serif;color:#000000;margin:3px 0px 0px 10px ;float:left}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('td.summary_h1    {font:bold 14pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#CCCCFF; vertical-align:top;}'||chr(10)),
     'td.summary_h1    {font:bold 14pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#CCCCFF; vertical-align:top;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('td.summary_h2    {font:bold 10pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#CCCCAA; vertical-align:top;}'||chr(10)),
     'td.summary_h2    {font:bold 10pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#CCCCAA; vertical-align:top;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('td.summary_h3    {font:bold 10pt Arial,Helvetica,Geneva,sans-serif;color:black; vertical-align:top;}'||chr(10)),
     'td.summary_h3    {font:bold 10pt Arial,Helvetica,Geneva,sans-serif;color:black; vertical-align:top;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('td.awrright {text-align:right}'||chr(10)),
     'td.awrright {text-align:right}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('.statsTable td {'||chr(10)),
     '.statsTable td {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('vertical-align:middle;'||chr(10)),
     'vertical-align:middle;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('border:1px solid #000000;'||chr(10)),
     'border:1px solid #000000;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('border-width:0px 1px 1px 0px;'||chr(10)),
     'border-width:0px 1px 1px 0px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('text-align:left;'||chr(10)),
     'text-align:left;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('padding:7px;'||chr(10)),
     'padding:7px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('font-size:16px;'||chr(10)),
     'font-size:16px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('font-family:Arial;'||chr(10)),
     'font-family:Arial;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('font-weight:normal;'||chr(10)),
     'font-weight:normal;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('color:#000000;'||chr(10)),
     'color:#000000;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('h4 { '||chr(10)),
     'h4 { '||chr(10));
  dbms_lob.writeappend(clb, 
     length('  display: inline-block; '||chr(10)),
     '  display: inline-block; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('  background-color:lightgreen;'||chr(10)),
     '  background-color:lightgreen;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  padding:5px 5px 5px 5px;'||chr(10)),
     '  padding:5px 5px 5px 5px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('a.awrexp {font:bold 16pt Arial,Helvetica,sans-serif;color:white; vertical-align:top;margin-top:0pt; margin-bottom:10px;margin-right:10px;cursor:pointer ;'||chr(10)),
     'a.awrexp {font:bold 16pt Arial,Helvetica,sans-serif;color:white; vertical-align:top;margin-top:0pt; margin-bottom:10px;margin-right:10px;cursor:pointer ;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('background-color:#336699;border-radius:45px;'||chr(10)),
     'background-color:#336699;border-radius:45px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('padding-right: 6px;padding-left: 6px }'||chr(10)),
     'padding-right: 6px;padding-left: 6px }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('a.awrexp_medium {font:bold 9pt Arial,Helvetica,sans-serif;color:black; vertical-align:top;margin-top:5px; margin:5pt 5pt 5pt 5pt; border-radius:45px;'||chr(10)),
     'a.awrexp_medium {font:bold 9pt Arial,Helvetica,sans-serif;color:black; vertical-align:top;margin-top:5px; margin:5pt 5pt 5pt 5pt; border-radius:45px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('padding-right: 6px;padding-left: 6px }'||chr(10)),
     'padding-right: 6px;padding-left: 6px }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('a.awrexp_small {font:bold 8pt Arial,Helvetica,sans-serif;color:white; vertical-align:top;margin-top:0pt; margin-bottom:10px;margin-right:10px;cursor:pointer ;'||chr(10)),
     'a.awrexp_small {font:bold 8pt Arial,Helvetica,sans-serif;color:white; vertical-align:top;margin-top:0pt; margin-bottom:10px;margin-right:10px;cursor:pointer ;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('background-color:#336699;border-radius:45px;'||chr(10)),
     'background-color:#336699;border-radius:45px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('padding-right: 6px;padding-left: 6px }'||chr(10)),
     'padding-right: 6px;padding-left: 6px }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('a.awrexp_hint_small {font:bold 8pt Arial,Helvetica,sans-serif;color:#336699; vertical-align:top;margin-top:0pt; margin-bottom:10px;margin-right:10px;cursor:pointer ; background-color:lightblue;border-radius:45px; padding-right: 6px;padding-left: 6px }'||chr(10)),
     'a.awrexp_hint_small {font:bold 8pt Arial,Helvetica,sans-serif;color:#336699; vertical-align:top;margin-top:0pt; margin-bottom:10px;margin-right:10px;cursor:pointer ; background-color:lightblue;border-radius:45px; padding-right: 6px;padding-left: 6px }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('a.awrexp_desc_small {font:bold 8pt Arial,Helvetica,sans-serif;color:#336699; vertical-align:top;margin-top:0pt; margin-bottom:10px;margin-right:10px;cursor:pointer ;'||chr(10)),
     'a.awrexp_desc_small {font:bold 8pt Arial,Helvetica,sans-serif;color:#336699; vertical-align:top;margin-top:0pt; margin-bottom:10px;margin-right:10px;cursor:pointer ;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('background-color:lightgreen;border-radius:45px;'||chr(10)),
     'background-color:lightgreen;border-radius:45px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('padding-right: 6px;padding-left: 6px }'||chr(10)),
     'padding-right: 6px;padding-left: 6px }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('a.awrbtt {font:bold 8pt Arial,Helvetica,sans-serif;color:#336699; vertical-align:top;margin-top:0pt; margin-bottom:0pt;margin-top:10px;margin-bottom:30px;display:inline-block;}'||chr(10)),
     'a.awrbtt {font:bold 8pt Arial,Helvetica,sans-serif;color:#336699; vertical-align:top;margin-top:0pt; margin-bottom:0pt;margin-top:10px;margin-bottom:30px;display:inline-block;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('a.awrmenu {cursor:pointer;font:bold 8pt Arial,Helvetica,sans-serif;color:#ffffff; vertical-align:top;margin-top:0pt; margin-bottom:0pt;}'||chr(10)),
     'a.awrmenu {cursor:pointer;font:bold 8pt Arial,Helvetica,sans-serif;color:#ffffff; vertical-align:top;margin-top:0pt; margin-bottom:0pt;}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('a.awrexpbtn, a.awrexpbtnsave {font:bold 7pt Arial,Helvetica,sans-serif;border-radius:15px;background-color:#336699;color:white; margin:5pt 5pt 5pt 5pt;padding:5pt 5pt 5pt 5pt;display:inline-block;cursor:pointer }'||chr(10)),
     'a.awrexpbtn, a.awrexpbtnsave {font:bold 7pt Arial,Helvetica,sans-serif;border-radius:15px;background-color:#336699;color:white; margin:5pt 5pt 5pt 5pt;padding:5pt 5pt 5pt 5pt;display:inline-block;cursor:pointer }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('a.awrexpbtnsave {background-color:red;display:inline-block}'||chr(10)),
     'a.awrexpbtnsave {background-color:red;display:inline-block}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('a.awrexpbtnhide {display:none}'||chr(10)),
     'a.awrexpbtnhide {display:none}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('div.awrtopdiv {'||chr(10)),
     'div.awrtopdiv {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  margin:10px 10px;'||chr(10)),
     '  margin:10px 10px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('div.awrexcludediv {'||chr(10)),
     'div.awrexcludediv {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   margin-bottom:25pt; '||chr(10)),
     '   margin-bottom:25pt; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('   border: 1px solid grey;'||chr(10)),
     '   border: 1px solid grey;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   border-radius:15pt;'||chr(10)),
     '   border-radius:15pt;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   width:70%;'||chr(10)),
     '   width:70%;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('div.awrexcludediv pre.awrdesc{'||chr(10)),
     'div.awrexcludediv pre.awrdesc{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  margin-left:5pt; '||chr(10)),
     '  margin-left:5pt; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('   '||chr(10)),
     '   '||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('div.awrexcludediv * select ,input{'||chr(10)),
     'div.awrexcludediv * select ,input{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    font:bold 8pt Arial,Helvetica,sans-serif;'||chr(10)),
     '    font:bold 8pt Arial,Helvetica,sans-serif;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('table.awrexcludetab {'||chr(10)),
     'table.awrexcludetab {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   margin-bottom:5pt; '||chr(10)),
     '   margin-bottom:5pt; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('   margin-left:5pt; '||chr(10)),
     '   margin-left:5pt; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('   width:50%;'||chr(10)),
     '   width:50%;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('h3 { display:inline-block}'||chr(10)),
     'h3 { display:inline-block}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('pre.awrdesc{'||chr(10)),
     'pre.awrdesc{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  color:#000000;'||chr(10)),
     '  color:#000000;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  background-color: #f0f0f0;'||chr(10)),
     '  background-color: #f0f0f0;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  border-radius: 15px;'||chr(10)),
     '  border-radius: 15px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  font-size: 8pt;'||chr(10)),
     '  font-size: 8pt;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  width: 90%;'||chr(10)),
     '  width: 90%;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  padding:8px'||chr(10)),
     '  padding:8px'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   '||chr(10)),
     '   '||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('pre.awrdesctop {'||chr(10)),
     'pre.awrdesctop {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  color:#000000;'||chr(10)),
     '  color:#000000;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  background-color: #f0f0f0;'||chr(10)),
     '  background-color: #f0f0f0;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  border-radius: 15px;'||chr(10)),
     '  border-radius: 15px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  font-size: 8pt;'||chr(10)),
     '  font-size: 8pt;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  width: 63%;'||chr(10)),
     '  width: 63%;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  padding:8px'||chr(10)),
     '  padding:8px'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   '||chr(10)),
     '   '||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('p.awr_info{'||chr(10)),
     'p.awr_info{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  border-style: outset;'||chr(10)),
     '  border-style: outset;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  border-color: black;'||chr(10)),
     '  border-color: black;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  border-width: 4px;'||chr(10)),
     '  border-width: 4px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  border-radius: 15px;'||chr(10)),
     '  border-radius: 15px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  font-size: 10pt;'||chr(10)),
     '  font-size: 10pt;'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' font-family: "Arial";'||chr(10)),
     ' font-family: "Arial";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  padding-left:15px;'||chr(10)),
     '  padding-left:15px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  padding-top:7px;'||chr(10)),
     '  padding-top:7px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  padding-bottom:7px;'||chr(10)),
     '  padding-bottom:7px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  background-color: #E5E8E3;'||chr(10)),
     '  background-color: #E5E8E3;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  color: black;'||chr(10)),
     '  color: black;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  width: 70%;'||chr(10)),
     '  width: 70%;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('p.awrdesc {'||chr(10)),
     'p.awrdesc {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  color:#000000;'||chr(10)),
     '  color:#000000;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  background-color: lightgreen;'||chr(10)),
     '  background-color: lightgreen;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  border-radius: 15px;'||chr(10)),
     '  border-radius: 15px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  font-size: 8pt;'||chr(10)),
     '  font-size: 8pt;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  width: 50%;'||chr(10)),
     '  width: 50%;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  padding:8px'||chr(10)),
     '  padding:8px'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   '||chr(10)),
     '   '||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('p.awrhints {'||chr(10)),
     'p.awrhints {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  color:#000000;'||chr(10)),
     '  color:#000000;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  background-color: lightblue;'||chr(10)),
     '  background-color: lightblue;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  font-size: 8pt;'||chr(10)),
     '  font-size: 8pt;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  width: 50%;'||chr(10)),
     '  width: 50%;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  padding:8px;'||chr(10)),
     '  padding:8px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  border-radius: 15px;'||chr(10)),
     '  border-radius: 15px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('div.awrcanvas_small{'||chr(10)),
     'div.awrcanvas_small{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   width:600px;height:400px'||chr(10)),
     '   width:600px;height:400px'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('div.awrcanvas_small_right {'||chr(10)),
     'div.awrcanvas_small_right {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   width:400px;height:200px;'||chr(10)),
     '   width:400px;height:200px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   float:right'||chr(10)),
     '   float:right'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('.clearfix:after {'||chr(10)),
     '.clearfix:after {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    display:block;'||chr(10)),
     '    display:block;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    clear:both;'||chr(10)),
     '    clear:both;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' '||chr(10)),
     ' '||chr(10));
  dbms_lob.writeappend(clb, 
     length('/*----- Menu Outline -----*/'||chr(10)),
     '/*----- Menu Outline -----*/'||chr(10));
  dbms_lob.writeappend(clb, 
     length('.menu-bar {'||chr(10)),
     '.menu-bar {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    width:100%;'||chr(10)),
     '    width:100%;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    box-shadow:0px 1px 3px rgba(0,0,0,0.2);'||chr(10)),
     '    box-shadow:0px 1px 3px rgba(0,0,0,0.2);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    background:black;'||chr(10)),
     '    background:black;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    display:inline-block;'||chr(10)),
     '    display:inline-block;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('.menu {'||chr(10)),
     '.menu {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    margin:0px auto;'||chr(10)),
     '    margin:0px auto;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('.menu ul {'||chr(10)),
     '.menu ul {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    list-style-type: none;'||chr(10)),
     '    list-style-type: none;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    margin: 0;'||chr(10)),
     '    margin: 0;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    padding: 0;'||chr(10)),
     '    padding: 0;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    width:100%;'||chr(10)),
     '    width:100%;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    background-color:black;'||chr(10)),
     '    background-color:black;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    text-align: left;'||chr(10)),
     '    text-align: left;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('.menu ul ul li a {'||chr(10)),
     '.menu ul ul li a {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    display: block;'||chr(10)),
     '    display: block;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    background-color:black;'||chr(10)),
     '    background-color:black;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    text-align: left;'||chr(10)),
     '    text-align: left;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    padding: 14px 16px;'||chr(10)),
     '    padding: 14px 16px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    text-decoration: none;'||chr(10)),
     '    text-decoration: none;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    float:left;'||chr(10)),
     '    float:left;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('.menu li a:hover:not(.active) {'||chr(10)),
     '.menu li a:hover:not(.active) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   color:yellow;'||chr(10)),
     '   color:yellow;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   cursor:pointer;'||chr(10)),
     '   cursor:pointer;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('.menu li {'||chr(10)),
     '.menu li {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    margin:0px;'||chr(10)),
     '    margin:0px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    list-style:none;'||chr(10)),
     '    list-style:none;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    font-family:''Arial'';'||chr(10)),
     '    font-family:''Arial'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' '||chr(10)),
     ' '||chr(10));
  dbms_lob.writeappend(clb, 
     length('.menu a {'||chr(10)),
     '.menu a {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    color:white;'||chr(10)),
     '    color:white;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    font-size:10px;'||chr(10)),
     '    font-size:10px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' '||chr(10)),
     ' '||chr(10));
  dbms_lob.writeappend(clb, 
     length('.menu li:hover > a, .menu .active > a {'||chr(10)),
     '.menu li:hover > a, .menu .active > a {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    text-decoration:none;'||chr(10)),
     '    text-decoration:none;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    color:white;'||chr(10)),
     '    color:white;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' '||chr(10)),
     ' '||chr(10));
  dbms_lob.writeappend(clb, 
     length('.menu .arrow {'||chr(10)),
     '.menu .arrow {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    font-size:9px;'||chr(10)),
     '    font-size:9px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    line-height:0%;'||chr(10)),
     '    line-height:0%;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' '||chr(10)),
     ' '||chr(10));
  dbms_lob.writeappend(clb, 
     length('/*----- Top Level -----*/'||chr(10)),
     '/*----- Top Level -----*/'||chr(10));
  dbms_lob.writeappend(clb, 
     length('.menu > ul > li {'||chr(10)),
     '.menu > ul > li {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    float:left;'||chr(10)),
     '    float:left;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    display:block;'||chr(10)),
     '    display:block;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    position:relative;'||chr(10)),
     '    position:relative;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    font-size:12px;'||chr(10)),
     '    font-size:12px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' '||chr(10)),
     ' '||chr(10));
  dbms_lob.writeappend(clb, 
     length('.menu > ul > li > a {'||chr(10)),
     '.menu > ul > li > a {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    padding:10px 40px;'||chr(10)),
     '    padding:10px 40px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    display:inline-block;'||chr(10)),
     '    display:inline-block;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    color:#FFFFFF'||chr(10)),
     '    color:#FFFFFF'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' '||chr(10)),
     ' '||chr(10));
  dbms_lob.writeappend(clb, 
     length('.menu > ul > li:hover > a {'||chr(10)),
     '.menu > ul > li:hover > a {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  background:grey;'||chr(10)),
     '  background:grey;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('.menu > ul > .active> a {'||chr(10)),
     '.menu > ul > .active> a {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  background:#336699;'||chr(10)),
     '  background:#336699;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' '||chr(10)),
     ' '||chr(10));
  dbms_lob.writeappend(clb, 
     length('/*----- Bottom Level -----*/'||chr(10)),
     '/*----- Bottom Level -----*/'||chr(10));
  dbms_lob.writeappend(clb, 
     length('.menu li:hover .sub-menu {'||chr(10)),
     '.menu li:hover .sub-menu {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    z-index:1;'||chr(10)),
     '    z-index:1;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    display:block;'||chr(10)),
     '    display:block;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' '||chr(10)),
     ' '||chr(10));
  dbms_lob.writeappend(clb, 
     length('.sub-menu {'||chr(10)),
     '.sub-menu {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    position:absolute;'||chr(10)),
     '    position:absolute;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    left:0px;'||chr(10)),
     '    left:0px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    z-index:-1;'||chr(10)),
     '    z-index:-1;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    display:none;'||chr(10)),
     '    display:none;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    background:black;'||chr(10)),
     '    background:black;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' '||chr(10)),
     ' '||chr(10));
  dbms_lob.writeappend(clb, 
     length('.sub-menu li {'||chr(10)),
     '.sub-menu li {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    display:inline-block;'||chr(10)),
     '    display:inline-block;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    font-size:11px;'||chr(10)),
     '    font-size:11px;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' '||chr(10)),
     ' '||chr(10));
  dbms_lob.writeappend(clb, 
     length('.sub-menu li a {'||chr(10)),
     '.sub-menu li a {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    display:inline-block;'||chr(10)),
     '    display:inline-block;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' '||chr(10)),
     ' '||chr(10));
  dbms_lob.writeappend(clb, 
     length('.sub-menu li a:hover, .sub-menu .active a {'||chr(10)),
     '.sub-menu li a:hover, .sub-menu .active a {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  background:black;'||chr(10)),
     '  background:black;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
end if;
end;
/

set define on
set define off
declare
  clb clob;
  ver varchar2(20);
begin
 select version into ver from v$instance ;
  if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' then
  delete from gghc_files where ID = 'hc_body.html';
  insert into gghc_files(ID, FILE_CONTENT) values 
  ('hc_body.html',empty_clob()) returning FILE_CONTENT into clb;
  dbms_lob.writeappend(clb, 
     length('<body onload="processHCJSON()">'||chr(10)),
     '<body onload="processHCJSON()">'||chr(10));
  dbms_lob.writeappend(clb, 
     length('<a id="top" style="margin-top:100px; name="top"></a>'||chr(10)),
     '<a id="top" style="margin-top:100px; name="top"></a>'||chr(10));
  dbms_lob.writeappend(clb, 
     length('<div style=";top:0;position:fixed; background-color:#F0F0F0;width:100%" >'||chr(10)),
     '<div style=";top:0;position:fixed; background-color:#F0F0F0;width:100%" >'||chr(10));
  dbms_lob.writeappend(clb, 
     length('<h1 id=hc_title_h1 class="awr_title"> </h1>'||chr(10)),
     '<h1 id=hc_title_h1 class="awr_title"> </h1>'||chr(10));
  dbms_lob.writeappend(clb, 
     length('<h3 id=hc_title_h3 class="awr_title"> </h3>'||chr(10)),
     '<h3 id=hc_title_h3 class="awr_title"> </h3>'||chr(10));
  dbms_lob.writeappend(clb, 
     length('<h3 id=hc_elapsed_time class="awr_title"> </h3>'||chr(10)),
     '<h3 id=hc_elapsed_time class="awr_title"> </h3>'||chr(10));
  dbms_lob.writeappend(clb, 
     length('<div class="menu-bar">'||chr(10)),
     '<div class="menu-bar">'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   <nav class="menu">'||chr(10)),
     '   <nav class="menu">'||chr(10));
  dbms_lob.writeappend(clb, 
     length('<ul class="clearfix" id="menu"> </ul>'||chr(10)),
     '<ul class="clearfix" id="menu"> </ul>'||chr(10));
  dbms_lob.writeappend(clb, 
     length('</nav>'||chr(10)),
     '</nav>'||chr(10));
  dbms_lob.writeappend(clb, 
     length('</div>'||chr(10)),
     '</div>'||chr(10));
  dbms_lob.writeappend(clb, 
     length('<div style="margin-top:5px; float:left">'||chr(10)),
     '<div style="margin-top:5px; float:left">'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   <a style="margin-left:7px" id=current_loc class=''awrexp_medium''> MENU > SUBMENU </a>'||chr(10)),
     '   <a style="margin-left:7px" id=current_loc class=''awrexp_medium''> MENU > SUBMENU </a>'||chr(10));
  dbms_lob.writeappend(clb, 
     length('</div>'||chr(10)),
     '</div>'||chr(10));
  dbms_lob.writeappend(clb, 
     length('<div class="awrbtn">'||chr(10)),
     '<div class="awrbtn">'||chr(10));
  dbms_lob.writeappend(clb, 
     length('<div id="btnAll">'||chr(10)),
     '<div id="btnAll">'||chr(10));
  dbms_lob.writeappend(clb, 
     length('<a id="btnExpand" style="cursor:pointer" class="awrexpbtn" onclick="showHideAll(true)">Expand All</a>'||chr(10)),
     '<a id="btnExpand" style="cursor:pointer" class="awrexpbtn" onclick="showHideAll(true)">Expand All</a>'||chr(10));
  dbms_lob.writeappend(clb, 
     length('<a id="btnCollapse" style="cursor:pointer" class="awrexpbtn" onclick="showHideAll(false)">Collapse All</a>'||chr(10)),
     '<a id="btnCollapse" style="cursor:pointer" class="awrexpbtn" onclick="showHideAll(false)">Collapse All</a>'||chr(10));
  dbms_lob.writeappend(clb, 
     length('<form class ''awrinput'' style=''display:none'' action="#" onsubmit="searchAll()">'||chr(10)),
     '<form class ''awrinput'' style=''display:none'' action="#" onsubmit="searchAll()">'||chr(10));
  dbms_lob.writeappend(clb, 
     length('<input id="searchText" class="awrinput" type="text">'||chr(10)),
     '<input id="searchText" class="awrinput" type="text">'||chr(10));
  dbms_lob.writeappend(clb, 
     length('</form>'||chr(10)),
     '</form>'||chr(10));
  dbms_lob.writeappend(clb, 
     length('<a id="btnSearch" style="cursor:pointer;display:none" class="awrexpbtn" onclick="searchAll()">search</a>'||chr(10)),
     '<a id="btnSearch" style="cursor:pointer;display:none" class="awrexpbtn" onclick="searchAll()">search</a>'||chr(10));
  dbms_lob.writeappend(clb, 
     length('</div>'||chr(10)),
     '</div>'||chr(10));
  dbms_lob.writeappend(clb, 
     length('<div id ="btnConfig">'||chr(10)),
     '<div id ="btnConfig">'||chr(10));
  dbms_lob.writeappend(clb, 
     length('<a id="btnShowJson" style="cursor:pointer" class="awrexpbtn" onclick="showJsonConfig()">JSON</a>'||chr(10)),
     '<a id="btnShowJson" style="cursor:pointer" class="awrexpbtn" onclick="showJsonConfig()">JSON</a>'||chr(10));
  dbms_lob.writeappend(clb, 
     length('<a id="btnExport" style="cursor:pointer" class="awrexpbtn" onclick="exportConfig()">Export</a>'||chr(10)),
     '<a id="btnExport" style="cursor:pointer" class="awrexpbtn" onclick="exportConfig()">Export</a>'||chr(10));
  dbms_lob.writeappend(clb, 
     length('<input id="fileInput" type="file" style="display:none;" />'||chr(10)),
     '<input id="fileInput" type="file" style="display:none;" />'||chr(10));
  dbms_lob.writeappend(clb, 
     length('<a id="btnImport" style="cursor:pointer" class="awrexpbtn"  onclick="document.getElementById(''fileInput'').click();" >Import</a>'||chr(10)),
     '<a id="btnImport" style="cursor:pointer" class="awrexpbtn"  onclick="document.getElementById(''fileInput'').click();" >Import</a>'||chr(10));
  dbms_lob.writeappend(clb, 
     length('<a title=''Apply Changes'' name="a_applyrules" class="awrexpbtnhide" id="btnApplyRules" onclick="applyChanges()" >Apply</a>'||chr(10)),
     '<a title=''Apply Changes'' name="a_applyrules" class="awrexpbtnhide" id="btnApplyRules" onclick="applyChanges()" >Apply</a>'||chr(10));
  dbms_lob.writeappend(clb, 
     length('</div>'||chr(10)),
     '</div>'||chr(10));
  dbms_lob.writeappend(clb, 
     length('</div>'||chr(10)),
     '</div>'||chr(10));
  dbms_lob.writeappend(clb, 
     length('</div>'||chr(10)),
     '</div>'||chr(10));
  dbms_lob.writeappend(clb, 
     length('<div class="outer" id="addtable"></div>'||chr(10)),
     '<div class="outer" id="addtable"></div>'||chr(10));
  dbms_lob.writeappend(clb, 
     length('</body>'||chr(10)),
     '</body>'||chr(10));
end if;
end;
/

set define on
set define off
declare
  clb clob;
  ver varchar2(20);
begin
 select version into ver from v$instance ;
  if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' then
  delete from gghc_files where ID = 'hc.js';
  insert into gghc_files(ID, FILE_CONTENT) values 
  ('hc.js',empty_clob()) returning FILE_CONTENT into clb;
  dbms_lob.writeappend(clb, 
     length('   var JS_VERSION = 1;'||chr(10)),
     '   var JS_VERSION = 1;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var JS_DATE;'||chr(10)),
     '   var JS_DATE;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var g_divObj = {};'||chr(10)),
     '   var g_divObj = {};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var g_divInfo = {};'||chr(10)),
     '   var g_divInfo = {};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var g_menuElements = {};'||chr(10)),
     '   var g_menuElements = {};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var g_manualMenu = {};'||chr(10)),
     '   var g_manualMenu = {};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var g_HcData = {}; '||chr(10)),
     '   var g_HcData = {}; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var g_configRules = {};'||chr(10)),
     '   var g_configRules = {};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var g_loadedMenuItems = [];'||chr(10)),
     '   var g_loadedMenuItems = [];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   '||chr(10)),
     '   '||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function alertLog(exception, msg) {'||chr(10)),
     '  function alertLog(exception, msg) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (exception) {'||chr(10)),
     '     if (exception) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       msg = ''ERROR:''+msg+'':''+exception.name+'':''+exception.message;'||chr(10)),
     '       msg = ''ERROR:''+msg+'':''+exception.name+'':''+exception.message;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (!g_HcData[''STATS''][''js_errors'']) {'||chr(10)),
     '     if (!g_HcData[''STATS''][''js_errors'']) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var errStat = {"NAME": "js_errors",'||chr(10)),
     '       var errStat = {"NAME": "js_errors",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                 "ROWS": [],'||chr(10)),
     '                 "ROWS": [],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                 "COLS": {"ERROR":{"TYPE":1,"COL_NUM":0}},'||chr(10)),
     '                 "COLS": {"ERROR":{"TYPE":1,"COL_NUM":0}},'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                 "NROWS": 0,'||chr(10)),
     '                 "NROWS": 0,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                 "SDESC": "Javascript Load Error"'||chr(10)),
     '                 "SDESC": "Javascript Load Error"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                };'||chr(10)),
     '                };'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       g_HcData[''STATS''][''js_errors''] = errStat;'||chr(10)),
     '       g_HcData[''STATS''][''js_errors''] = errStat;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     };'||chr(10)),
     '     };'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     g_HcData[''STATS''][''js_errors''][''ROWS''].push([msg]);'||chr(10)),
     '     g_HcData[''STATS''][''js_errors''][''ROWS''].push([msg]);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     g_HcData[''STATS''][''js_errors''][''NROWS'']++;'||chr(10)),
     '     g_HcData[''STATS''][''js_errors''][''NROWS'']++;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     console.log(msg);'||chr(10)),
     '     console.log(msg);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   function setFavIcon() {'||chr(10)),
     '   function setFavIcon() {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var favIcon = "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAIAAACQkWg2AAAAA3NCSVQICAjb4U/gAAABb0lEQVQokZVSzUrDQBicb1Nr0x+l0VLRiLRGevIlvHoT8SwKvkBBL4KCbyAoKgiCCKIo4qt4k6KCVXtIWmtDt2m7WQ9Gk2g9dFhYvt3Z5Zv5hizdQD9gfbEBREKVlHDdP38yEPV4IMsVoKNMz8CVPlthonSHwQxlhr0TSzcs3TABfnom/4G9uW1+MyMAZPk5cXkVW1wQD4+tq2vZsL0eXEmjI/GV5cTOluTcOTihdIqs8TzqXLNfxX2pVpgh0qAGhDUdoD7iOHBdS1VJNxicdmR+DkBzd4+SWZrQSBvyl54BBvnNLWIxNlmAEL6tFB0IyfUhvJ07ICJrPI+PltZ4EY9PtXyOkEZ8INCSTWhpDpftTjWVJN2IgDFpN/jRsbq2qr1V+PmFtKpgBADCZbkpdWkR0ahd3KDUWMjW5v5hb1O73UZx3YTyxaSfLMmyCbwrxixEYNhfg0tkKZ3ypIbC1zMaihKswlki+nX9F32n9RM48r1p4ZhvzwAAAABJRU5ErkJggg==";'||chr(10)),
     '      var favIcon = "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAIAAACQkWg2AAAAA3NCSVQICAjb4U/gAAABb0lEQVQokZVSzUrDQBicb1Nr0x+l0VLRiLRGevIlvHoT8SwKvkBBL4KCbyAoKgiCCKIo4qt4k6KCVXtIWmtDt2m7WQ9Gk2g9dFhYvt3Z5Zv5hizdQD9gfbEBREKVlHDdP38yEPV4IMsVoKNMz8CVPlthonSHwQxlhr0TSzcs3TABfnom/4G9uW1+MyMAZPk5cXkVW1wQD4+tq2vZsL0eXEmjI/GV5cTOluTcOTihdIqs8TzqXLNfxX2pVpgh0qAGhDUdoD7iOHBdS1VJNxicdmR+DkBzd4+SWZrQSBvyl54BBvnNLWIxNlmAEL6tFB0IyfUhvJ07ICJrPI+PltZ4EY9PtXyOkEZ8INCSTWhpDpftTjWVJN2IgDFpN/jRsbq2qr1V+PmFtKpgBADCZbkpdWkR0ahd3KDUWMjW5v5hb1O73UZx3YTyxaSfLMmyCbwrxixEYNhfg0tkKZ3ypIbC1zMaihKswlki+nX9F32n9RM48r1p4ZhvzwAAAABJRU5ErkJggg==";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var docHead = document.getElementsByTagName(''head'')[0];       '||chr(10)),
     '      var docHead = document.getElementsByTagName(''head'')[0];       '||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var newLink = document.createElement(''link'');'||chr(10)),
     '      var newLink = document.createElement(''link'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      newLink.rel = ''shortcut icon'';'||chr(10)),
     '      newLink.rel = ''shortcut icon'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      newLink.href = ''data:image/png;base64,''+favIcon;'||chr(10)),
     '      newLink.href = ''data:image/png;base64,''+favIcon;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      docHead.appendChild(newLink);'||chr(10)),
     '      docHead.appendChild(newLink);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   }'||chr(10)),
     '   }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   function loadConfig() {'||chr(10)),
     '   function loadConfig() {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var sections = [''TABLE'',''COLUMN'',''MENU'',''GROUPBY''];'||chr(10)),
     '    var sections = [''TABLE'',''COLUMN'',''MENU'',''GROUPBY''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (g_configRules) { '||chr(10)),
     '    if (g_configRules) { '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       for(var i = 0 ; i < sections.length ; i++) {'||chr(10)),
     '       for(var i = 0 ; i < sections.length ; i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (g_configRules[sections[i]])'||chr(10)),
     '         if (g_configRules[sections[i]])'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           return;'||chr(10)),
     '           return;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var config = document.getElementById("HC_CONFIG");'||chr(10)),
     '     var config = document.getElementById("HC_CONFIG");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (!config) {'||chr(10)),
     '     if (!config) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       for (var i = 0; i < sections.length; i++)'||chr(10)),
     '       for (var i = 0; i < sections.length; i++)'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (!g_configRules[sections[i]])'||chr(10)),
     '         if (!g_configRules[sections[i]])'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           g_configRules[sections[i]] = {};'||chr(10)),
     '           g_configRules[sections[i]] = {};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       return;'||chr(10)),
     '       return;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     g_configRules = parseJSON(config.innerHTML,''loadConfig'');'||chr(10)),
     '     g_configRules = parseJSON(config.innerHTML,''loadConfig'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     for (var i = 0; i < sections.length; i++)'||chr(10)),
     '     for (var i = 0; i < sections.length; i++)'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (!g_configRules[sections[i]])'||chr(10)),
     '       if (!g_configRules[sections[i]])'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         g_configRules[sections[i]] = {};'||chr(10)),
     '         g_configRules[sections[i]] = {};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   }'||chr(10)),
     '   }'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' /*'||chr(10)),
     ' /*'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   function exportConfig1() {'||chr(10)),
     '   function exportConfig1() {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var properties = {type: ''plain/text''}; // Specify the file''s mime-type.'||chr(10)),
     '     var properties = {type: ''plain/text''}; // Specify the file''s mime-type.'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var str = JSON.stringify(getCurrentConfig(),null,2);'||chr(10)),
     '     var str = JSON.stringify(getCurrentConfig(),null,2);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     try {'||chr(10)),
     '     try {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        file = new File(str, "hc_config.json", properties);'||chr(10)),
     '        file = new File(str, "hc_config.json", properties);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     } catch (e) {'||chr(10)),
     '     } catch (e) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         file = new Blob([str], properties);'||chr(10)),
     '         file = new Blob([str], properties);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     url = URL.createObjectURL(file);'||chr(10)),
     '     url = URL.createObjectURL(file);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     document.getElementById(''btnExport'').href = url;'||chr(10)),
     '     document.getElementById(''btnExport'').href = url;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     document.getElementById("btnExport").setAttribute(''class'',''awrexpbtn'');'||chr(10)),
     '     document.getElementById("btnExport").setAttribute(''class'',''awrexpbtn'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   }'||chr(10)),
     '   }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('*/'||chr(10)),
     '*/'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   function exportConfig() {'||chr(10)),
     '   function exportConfig() {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var str = JSON.stringify(getCurrentConfig(),null,2);'||chr(10)),
     '     var str = JSON.stringify(getCurrentConfig(),null,2);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var uriContent = "data:application/text," + encodeURIComponent(str);'||chr(10)),
     '     var uriContent = "data:application/text," + encodeURIComponent(str);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var newWindow = window.open(uriContent, ''config.txt'');'||chr(10)),
     '     var newWindow = window.open(uriContent, ''config.txt'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     document.getElementById("btnExport").setAttribute(''class'',''awrexpbtn'');'||chr(10)),
     '     document.getElementById("btnExport").setAttribute(''class'',''awrexpbtn'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   }'||chr(10)),
     '   }'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' '||chr(10)),
     ' '||chr(10));
  dbms_lob.writeappend(clb, 
     length('   function parseHCJson(str) {'||chr(10)),
     '   function parseHCJson(str) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var begin = ''JSON_BEGIN'';'||chr(10)),
     '     var begin = ''JSON_BEGIN'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var beginl = begin.length;'||chr(10)),
     '     var beginl = begin.length;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var end = ''JSON_END'';'||chr(10)),
     '     var end = ''JSON_END'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var endl = end.length;'||chr(10)),
     '     var endl = end.length;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var boff = str.indexOf(begin,0);'||chr(10)),
     '     var boff = str.indexOf(begin,0);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var eoff = str.indexOf(end,0);'||chr(10)),
     '     var eoff = str.indexOf(end,0);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var count = 0;'||chr(10)),
     '     var count = 0;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var json,parse_error;'||chr(10)),
     '     var json,parse_error;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var data = {};'||chr(10)),
     '     var data = {};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     g_HcData[''STATS''] = {};'||chr(10)),
     '     g_HcData[''STATS''] = {};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     while(boff != -1) {'||chr(10)),
     '     while(boff != -1) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       count++;'||chr(10)),
     '       count++;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var sub = str.substring(boff+beginl,eoff);'||chr(10)),
     '       var sub = str.substring(boff+beginl,eoff);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       parse_error = 0;'||chr(10)),
     '       parse_error = 0;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       try {'||chr(10)),
     '       try {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         json = JSON.parse(sub);'||chr(10)),
     '         json = JSON.parse(sub);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       } catch (e) {'||chr(10)),
     '       } catch (e) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        parse_error = 1;'||chr(10)),
     '        parse_error = 1;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        alertLog(e,''PARSE:''+sub);'||chr(10)),
     '        alertLog(e,''PARSE:''+sub);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (!parse_error) {'||chr(10)),
     '       if (!parse_error) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         for(k in json) {'||chr(10)),
     '         for(k in json) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           switch(k) {'||chr(10)),
     '           switch(k) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           case ''INFO'':'||chr(10)),
     '           case ''INFO'':'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           case ''METADATA'':'||chr(10)),
     '           case ''METADATA'':'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           case ''DOC_LINKS'':'||chr(10)),
     '           case ''DOC_LINKS'':'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           g_HcData[k] = json[k];'||chr(10)),
     '           g_HcData[k] = json[k];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           break;'||chr(10)),
     '           break;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           default:'||chr(10)),
     '           default:'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           g_HcData[''STATS''][k] = json[k];'||chr(10)),
     '           g_HcData[''STATS''][k] = json[k];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           break;'||chr(10)),
     '           break;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           }'||chr(10)),
     '           }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       } '||chr(10)),
     '       } '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       boff = str.indexOf(begin,boff+1);'||chr(10)),
     '       boff = str.indexOf(begin,boff+1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       eoff = str.indexOf(end,eoff+1); }'||chr(10)),
     '       eoff = str.indexOf(end,eoff+1); }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     return g_HcData;'||chr(10)),
     '     return g_HcData;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   }'||chr(10)),
     '   }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   function parseJSON(str, msg) {'||chr(10)),
     '   function parseJSON(str, msg) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var json ;'||chr(10)),
     '     var json ;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var out;'||chr(10)),
     '     var out;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     try {'||chr(10)),
     '     try {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       json = JSON.parse(str);'||chr(10)),
     '       json = JSON.parse(str);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     } catch (e) {'||chr(10)),
     '     } catch (e) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       out = msg+'':JSON parse Error:''+e.name+'':''+e.message;'||chr(10)),
     '       out = msg+'':JSON parse Error:''+e.name+'':''+e.message;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       alertLog(e,out);'||chr(10)),
     '       alertLog(e,out);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       alert(out);'||chr(10)),
     '       alert(out);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     return json;'||chr(10)),
     '     return json;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   }'||chr(10)),
     '   }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   function applyTableRules(tabName, rowData, tabElement, rowElement, '||chr(10)),
     '   function applyTableRules(tabName, rowData, tabElement, rowElement, '||chr(10));
  dbms_lob.writeappend(clb, 
     length('                       divElement)'||chr(10)),
     '                       divElement)'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   {'||chr(10)),
     '   {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var rules = "";'||chr(10)),
     '     var rules = "";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (g_configRules && '||chr(10)),
     '     if (g_configRules && '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         g_configRules["COLUMN"] && '||chr(10)),
     '         g_configRules["COLUMN"] && '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         g_configRules["COLUMN"][tabName]) {'||chr(10)),
     '         g_configRules["COLUMN"][tabName]) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          rules = g_configRules["COLUMN"][tabName];'||chr(10)),
     '          rules = g_configRules["COLUMN"][tabName];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }    '||chr(10)),
     '     }    '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (rules) {'||chr(10)),
     '     if (rules) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       for(var r = 0; r < rules.length; r++) {'||chr(10)),
     '       for(var r = 0; r < rules.length; r++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var rule = rules[r];'||chr(10)),
     '         var rule = rules[r];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var pass = false;'||chr(10)),
     '         var pass = false;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var cols = g_HcData[''STATS''][tabName][''COLS''];'||chr(10)),
     '         var cols = g_HcData[''STATS''][tabName][''COLS''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var colmap = [];'||chr(10)),
     '         var colmap = [];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var ruleStr = rule[''expr''];'||chr(10)),
     '         var ruleStr = rule[''expr''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         for(col in cols) {'||chr(10)),
     '         for(col in cols) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           var colno = cols[col][''COL_NUM''];'||chr(10)),
     '           var colno = cols[col][''COL_NUM''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           var sanitized_col = col.replace(/\$/g,''\\$'');'||chr(10)),
     '           var sanitized_col = col.replace(/\$/g,''\\$'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           var invalid_col_chars = "";'||chr(10)),
     '           var invalid_col_chars = "";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           var re = new RegExp(invalid_col_chars+ '||chr(10)),
     '           var re = new RegExp(invalid_col_chars+ '||chr(10));
  dbms_lob.writeappend(clb, 
     length('                               sanitized_col+'||chr(10)),
     '                               sanitized_col+'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                               invalid_col_chars,"g");'||chr(10)),
     '                               invalid_col_chars,"g");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           var quote = "_QT_";'||chr(10)),
     '           var quote = "_QT_";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           var col_val = rowData[colno];'||chr(10)),
     '           var col_val = rowData[colno];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           var replace_val =  quote + col_val + quote;'||chr(10)),
     '           var replace_val =  quote + col_val + quote;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           var newRuleStr = ruleStr.replace(re,quote+col_val+quote);'||chr(10)),
     '           var newRuleStr = ruleStr.replace(re,quote+col_val+quote);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           if (newRuleStr != ruleStr) {'||chr(10)),
     '           if (newRuleStr != ruleStr) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('             colmap.push(colno);'||chr(10)),
     '             colmap.push(colno);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           }'||chr(10)),
     '           }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           '||chr(10)),
     '           '||chr(10));
  dbms_lob.writeappend(clb, 
     length('           ruleStr = newRuleStr.replace(/_QT_/g,"''");'||chr(10)),
     '           ruleStr = newRuleStr.replace(/_QT_/g,"''");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         try {'||chr(10)),
     '         try {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            pass = eval(ruleStr);'||chr(10)),
     '            pass = eval(ruleStr);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         } catch(e) {'||chr(10)),
     '         } catch(e) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            alertLog(e, ''applyTableRules:''+tabName+'':''+rule[''expr'']+'':''+'||chr(10)),
     '            alertLog(e, ''applyTableRules:''+tabName+'':''+rule[''expr'']+'':''+'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                      ''eval(''+ruleStr+'')'');'||chr(10)),
     '                      ''eval(''+ruleStr+'')'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            pass = false;'||chr(10)),
     '            pass = false;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (pass) {'||chr(10)),
     '         if (pass) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           if (rule[''column-style'']) {'||chr(10)),
     '           if (rule[''column-style'']) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              var tdcols = rowElement.cells;'||chr(10)),
     '              var tdcols = rowElement.cells;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              for (var i = 0 ;i < colmap.length; i++) {'||chr(10)),
     '              for (var i = 0 ;i < colmap.length; i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                 tdcols[colmap[i]].setAttribute(''style'',rule["column-style"]);'||chr(10)),
     '                 tdcols[colmap[i]].setAttribute(''style'',rule["column-style"]);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              }'||chr(10)),
     '              }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           }'||chr(10)),
     '           }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           if (rule[''row-style'']) {'||chr(10)),
     '           if (rule[''row-style'']) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('               rowElement.setAttribute("style",rule["row-style"]+'';'');  '||chr(10)),
     '               rowElement.setAttribute("style",rule["row-style"]+'';'');  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('           }'||chr(10)),
     '           }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           if (rule[''table-style'']) {'||chr(10)),
     '           if (rule[''table-style'']) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('               if (rule[''table-style''] === ''display:none'') {'||chr(10)),
     '               if (rule[''table-style''] === ''display:none'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                 divElement.setAttribute("style",rule["table-style"]+'';'');  '||chr(10)),
     '                 divElement.setAttribute("style",rule["table-style"]+'';'');  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('               } else if(rule[''table-style''] === ''alert'') {'||chr(10)),
     '               } else if(rule[''table-style''] === ''alert'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                 divElement.setAttribute(''data-alert'',''yes'');'||chr(10)),
     '                 divElement.setAttribute(''data-alert'',''yes'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                 var style = rowElement.getAttribute(''style'');'||chr(10)),
     '                 var style = rowElement.getAttribute(''style'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                 rowElement.setAttribute("style",'||chr(10)),
     '                 rowElement.setAttribute("style",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                       ''background-color:orange''+'';''+style);  '||chr(10)),
     '                       ''background-color:orange''+'';''+style);  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('               }'||chr(10)),
     '               }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           }'||chr(10)),
     '           }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           getObj(''h3'',tabName).setAttribute(''class'',''awr_alert'');'||chr(10)),
     '           getObj(''h3'',tabName).setAttribute(''class'',''awr_alert'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   }'||chr(10)),
     '   }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   function createElement(eleTag, eleId, eleClass) {'||chr(10)),
     '   function createElement(eleTag, eleId, eleClass) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var obj = document.createElement(eleTag);'||chr(10)),
     '      var obj = document.createElement(eleTag);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if (eleId) {'||chr(10)),
     '      if (eleId) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        obj.setAttribute("id", eleTag+eleId);'||chr(10)),
     '        obj.setAttribute("id", eleTag+eleId);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        if (eleTag === ''a'') {'||chr(10)),
     '        if (eleTag === ''a'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          obj.setAttribute(''name'',eleId);'||chr(10)),
     '          obj.setAttribute(''name'',eleId);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        }'||chr(10)),
     '        }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if (eleClass) {'||chr(10)),
     '      if (eleClass) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        obj.setAttribute("class", eleClass);'||chr(10)),
     '        obj.setAttribute("class", eleClass);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      return obj;'||chr(10)),
     '      return obj;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   }'||chr(10)),
     '   }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   function getObj(eleTag, eleId) {'||chr(10)),
     '   function getObj(eleTag, eleId) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var obj = document.getElementById(eleTag+eleId);'||chr(10)),
     '      var obj = document.getElementById(eleTag+eleId);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      return obj;'||chr(10)),
     '      return obj;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   }'||chr(10)),
     '   }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   function getId(eleTag, eleId) {'||chr(10)),
     '   function getId(eleTag, eleId) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     return eleTag+eleId;'||chr(10)),
     '     return eleTag+eleId;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   }'||chr(10)),
     '   }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   function createTable(statData) {'||chr(10)),
     '   function createTable(statData) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var rows = statData.ROWS;'||chr(10)),
     '     var rows = statData.ROWS;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var cols = statData.COLS;'||chr(10)),
     '     var cols = statData.COLS;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var cbk = statData.CALLBACK;'||chr(10)),
     '     var cbk = statData.CALLBACK;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var cbk_ctx = statData.CALLBACK_CTX;'||chr(10)),
     '     var cbk_ctx = statData.CALLBACK_CTX;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var colNames = [];  '||chr(10)),
     '     var colNames = [];  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var statName = statData.NAME;'||chr(10)),
     '     var statName = statData.NAME;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var sdesc = statData.SDESC;'||chr(10)),
     '     var sdesc = statData.SDESC;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var tabElement = createElement(''table'',statName,''tdiff'');'||chr(10)),
     '     var tabElement = createElement(''table'',statName,''tdiff'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var tabHead = createElement("thead",statName,"");'||chr(10)),
     '     var tabHead = createElement("thead",statName,"");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var tabBody = createElement("tbody",statName);'||chr(10)),
     '     var tabBody = createElement("tbody",statName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var divElement = getObj(''div'',statName);'||chr(10)),
     '     var divElement = getObj(''div'',statName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var tabId = getId("table",statName);'||chr(10)),
     '     var tabId = getId("table",statName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var conColNum = -1;'||chr(10)),
     '     var conColNum = -1;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var instColNum = -1;'||chr(10)),
     '     var instColNum = -1;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     tabElement.appendChild(tabHead);'||chr(10)),
     '     tabElement.appendChild(tabHead);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     tabElement.appendChild(tabBody);'||chr(10)),
     '     tabElement.appendChild(tabBody);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     tabElement.style.display="table";'||chr(10)),
     '     tabElement.style.display="table";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var row = tabHead.insertRow(-1);'||chr(10)),
     '     var row = tabHead.insertRow(-1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     for (col in cols) {'||chr(10)),
     '     for (col in cols) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (g_HcData[''INFO''][''CDB''] === ''YES'' && '||chr(10)),
     '       if (g_HcData[''INFO''][''CDB''] === ''YES'' && '||chr(10));
  dbms_lob.writeappend(clb, 
     length('              col === ''CON_ID'') {'||chr(10)),
     '              col === ''CON_ID'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         conColNum = cols[col][''COL_NUM''];'||chr(10)),
     '         conColNum = cols[col][''COL_NUM''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         continue;'||chr(10)),
     '         continue;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (g_HcData[''INFO''][''RAC''] === ''YES'' && col === ''INST_ID'') {'||chr(10)),
     '       if (g_HcData[''INFO''][''RAC''] === ''YES'' && col === ''INST_ID'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         instColNum = cols[col][''COL_NUM''];'||chr(10)),
     '         instColNum = cols[col][''COL_NUM''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         continue;'||chr(10)),
     '         continue;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var th = createElement(''th'', tabId+col, ''awrbg'');'||chr(10)),
     '       var th = createElement(''th'', tabId+col, ''awrbg'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       th.setAttribute(''onclick'',"sort(''"+cols[col][''COL_NUM'']+"'',this.id,''"+tabId+"'');");'||chr(10)),
     '       th.setAttribute(''onclick'',"sort(''"+cols[col][''COL_NUM'']+"'',this.id,''"+tabId+"'');");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       th.setAttribute("colNo",col[''COL_NUM'']);'||chr(10)),
     '       th.setAttribute("colNo",col[''COL_NUM'']);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       th.innerHTML = col ;'||chr(10)),
     '       th.innerHTML = col ;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       row.appendChild(th);'||chr(10)),
     '       row.appendChild(th);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       colNames[cols[col][''COL_NUM'']] = col;'||chr(10)),
     '       colNames[cols[col][''COL_NUM'']] = col;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     for (var i = 0; i < rows.length; i++) {'||chr(10)),
     '     for (var i = 0; i < rows.length; i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var rowData = rows[i];'||chr(10)),
     '       var rowData = rows[i];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var rowElement = tabBody.insertRow(-1);'||chr(10)),
     '       var rowElement = tabBody.insertRow(-1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var row_class = (i % 2) ? "awrnc" : "awrc";'||chr(10)),
     '       var row_class = (i % 2) ? "awrnc" : "awrc";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var col_class="";'||chr(10)),
     '       var col_class="";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       rowElement.setAttribute(''class'',row_class);'||chr(10)),
     '       rowElement.setAttribute(''class'',row_class);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (cbk) {'||chr(10)),
     '       if (cbk) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         rowData = cbk(rowData,cbk_ctx);'||chr(10)),
     '         rowData = cbk(rowData,cbk_ctx);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       for(var j = 0; j < rowData.length; j++) {'||chr(10)),
     '       for(var j = 0; j < rowData.length; j++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (conColNum != -1 && conColnum == j) {'||chr(10)),
     '         if (conColNum != -1 && conColnum == j) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           continue;'||chr(10)),
     '           continue;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (instColNum != -1 && instColnum == j) {'||chr(10)),
     '         if (instColNum != -1 && instColnum == j) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           continue;'||chr(10)),
     '           continue;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var colData = rowData[j];'||chr(10)),
     '         var colData = rowData[j];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var ruleTxt = '''';'||chr(10)),
     '         var ruleTxt = '''';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var type = cols[colNames[j]]["TYPE"];'||chr(10)),
     '         var type = cols[colNames[j]]["TYPE"];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         col_class = type === ''2'' ? ''awrright'':'''';'||chr(10)),
     '         col_class = type === ''2'' ? ''awrright'':'''';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var td = createElement(''td'',statName+i+colNames[j], col_class)'||chr(10)),
     '         var td = createElement(''td'',statName+i+colNames[j], col_class)'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         rowElement.appendChild(td);'||chr(10)),
     '         rowElement.appendChild(td);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           td.innerHTML = ''<pre>''+colData+''</pre>'';'||chr(10)),
     '           td.innerHTML = ''<pre>''+colData+''</pre>'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           td.setAttribute(''data-col'', colData);'||chr(10)),
     '           td.setAttribute(''data-col'', colData);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       } '||chr(10)),
     '       } '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       applyTableRules(statName, rowData, tabElement, rowElement, divElement);'||chr(10)),
     '       applyTableRules(statName, rowData, tabElement, rowElement, divElement);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     return tabElement;'||chr(10)),
     '     return tabElement;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function createGroupByTable(statData, gbycols, aggcols) {'||chr(10)),
     '  function createGroupByTable(statData, gbycols, aggcols) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var rows = statData.ROWS;'||chr(10)),
     '    var rows = statData.ROWS;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var cols = statData.COLS;'||chr(10)),
     '    var cols = statData.COLS;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var origStatName = statData.NAME;'||chr(10)),
     '    var origStatName = statData.NAME;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var gbybtn = getObj(''a'',origStatName+''gbybtn'');'||chr(10)),
     '    var gbybtn = getObj(''a'',origStatName+''gbybtn'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var origbtn = getObj(''a'',origStatName+''origbtn'');'||chr(10)),
     '    var origbtn = getObj(''a'',origStatName+''origbtn'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var statName = ''groupby_''+statData.NAME;'||chr(10)),
     '    var statName = ''groupby_''+statData.NAME;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var sdesc = statData.SDESC;'||chr(10)),
     '     var sdesc = statData.SDESC;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var tabElement = createElement(''table'', statName, "tdiff");'||chr(10)),
     '     var tabElement = createElement(''table'', statName, "tdiff");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var tabHead = createElement("thead", statName, "");'||chr(10)),
     '     var tabHead = createElement("thead", statName, "");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var tabBody = createElement("tbody",statName,"");'||chr(10)),
     '     var tabBody = createElement("tbody",statName,"");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var divElement = getObj(''div'',statName);'||chr(10)),
     '     var divElement = getObj(''div'',statName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var tabId = getId("table",statName);'||chr(10)),
     '     var tabId = getId("table",statName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var aggTab = computeGroupBy(statData, gbycols,aggcols);'||chr(10)),
     '     var aggTab = computeGroupBy(statData, gbycols,aggcols);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     rows = aggTab.ROWS;'||chr(10)),
     '     rows = aggTab.ROWS;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     cols = aggTab.COLS;'||chr(10)),
     '     cols = aggTab.COLS;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     tabElement.appendChild(tabHead);'||chr(10)),
     '     tabElement.appendChild(tabHead);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     tabElement.appendChild(tabBody);'||chr(10)),
     '     tabElement.appendChild(tabBody);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     tabElement.style.display="table";'||chr(10)),
     '     tabElement.style.display="table";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var colNo = 0;'||chr(10)),
     '     var colNo = 0;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var row = tabHead.insertRow(-1);'||chr(10)),
     '     var row = tabHead.insertRow(-1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var col_classes = [];'||chr(10)),
     '     var col_classes = [];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     for (col in cols) {'||chr(10)),
     '     for (col in cols) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var colNo =  cols[col][''COL_NUM''];'||chr(10)),
     '       var colNo =  cols[col][''COL_NUM''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var colType =  cols[col][''TYPE''];'||chr(10)),
     '       var colType =  cols[col][''TYPE''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       col_classes[colNo] = colType === ''2'' ? ''awrright'' : '''';'||chr(10)),
     '       col_classes[colNo] = colType === ''2'' ? ''awrright'' : '''';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       colNo = colNo-1;'||chr(10)),
     '       colNo = colNo-1;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (col === ''GROUP_KEY'') '||chr(10)),
     '       if (col === ''GROUP_KEY'') '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         continue;'||chr(10)),
     '         continue;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var th = createElement(''th'',statName+col, ''awrbg'');'||chr(10)),
     '       var th = createElement(''th'',statName+col, ''awrbg'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       th.setAttribute(''onclick'',"sort(''"+colNo+"'',this.id,''"+tabId+"'');");'||chr(10)),
     '       th.setAttribute(''onclick'',"sort(''"+colNo+"'',this.id,''"+tabId+"'');");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       th.setAttribute("colNo",colNo);'||chr(10)),
     '       th.setAttribute("colNo",colNo);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       th.innerHTML = col != ''GROUP_ROWS'' ? col : '' '';'||chr(10)),
     '       th.innerHTML = col != ''GROUP_ROWS'' ? col : '' '';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       row.appendChild(th);'||chr(10)),
     '       row.appendChild(th);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     for (var i = 0; i < rows.length; i++) {'||chr(10)),
     '     for (var i = 0; i < rows.length; i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       txt = "";'||chr(10)),
     '       txt = "";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var rowData = rows[i];'||chr(10)),
     '       var rowData = rows[i];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var rowElement = tabBody.insertRow(-1);'||chr(10)),
     '       var rowElement = tabBody.insertRow(-1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var gtab;'||chr(10)),
     '       var gtab;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var row_class = (i % 2) ? "awrnc" : "awrc";'||chr(10)),
     '       var row_class = (i % 2) ? "awrnc" : "awrc";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var col_class="";'||chr(10)),
     '       var col_class="";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       rowElement.setAttribute(''class'',row_class);'||chr(10)),
     '       rowElement.setAttribute(''class'',row_class);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var aggStatName = statName + rowData[0];'||chr(10)),
     '       var aggStatName = statName + rowData[0];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       for(var j=0; j < rowData.length; j++) {'||chr(10)),
     '       for(var j=0; j < rowData.length; j++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         col_class = "";'||chr(10)),
     '         col_class = "";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         '||chr(10)),
     '         '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var colData = rowData[j];'||chr(10)),
     '         var colData = rowData[j];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (j == cols[''GROUP_ROWS''][''COL_NUM'']) {'||chr(10)),
     '         if (j == cols[''GROUP_ROWS''][''COL_NUM'']) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           var statD = {};'||chr(10)),
     '           var statD = {};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           aggStatName = aggStatName.replace(/ /g,''___'');'||chr(10)),
     '           aggStatName = aggStatName.replace(/ /g,''___'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           statD.ROWS = colData;'||chr(10)),
     '           statD.ROWS = colData;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           statD.NAME = aggStatName'||chr(10)),
     '           statD.NAME = aggStatName'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           statD.COLS = aggTab.BASE_TAB_COLS;'||chr(10)),
     '           statD.COLS = aggTab.BASE_TAB_COLS;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           var txtBtnId = "''a"+statD.NAME+"''";'||chr(10)),
     '           var txtBtnId = "''a"+statD.NAME+"''";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           var gtabId = "''table"+statD.NAME+"''"; '||chr(10)),
     '           var gtabId = "''table"+statD.NAME+"''"; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('           colData = "<a class=''awrexp_small'' id="+txtBtnId+'||chr(10)),
     '           colData = "<a class=''awrexp_small'' id="+txtBtnId+'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                    " href=javascript:toggleId("+gtabId+","+txtBtnId+")>+</a>";'||chr(10)),
     '                    " href=javascript:toggleId("+gtabId+","+txtBtnId+")>+</a>";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           g_HcData[''STATS''][statD.NAME] = statD;'||chr(10)),
     '           g_HcData[''STATS''][statD.NAME] = statD;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           gtab = createTable(statD);'||chr(10)),
     '           gtab = createTable(statD);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           gtab.style.display = "none";'||chr(10)),
     '           gtab.style.display = "none";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (j == cols[''GROUP_KEY''][''COL_NUM'']) {'||chr(10)),
     '         if (j == cols[''GROUP_KEY''][''COL_NUM'']) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           continue;'||chr(10)),
     '           continue;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var td = createElement(''td'', aggStatName+j, col_classes[j]);'||chr(10)),
     '         var td = createElement(''td'', aggStatName+j, col_classes[j]);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         rowElement.appendChild(td);'||chr(10)),
     '         rowElement.appendChild(td);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         td.innerHTML = colData;'||chr(10)),
     '         td.innerHTML = colData;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       } '||chr(10)),
     '       } '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var td = createElement("td",statName+rowData.GROUP_KEY,col_class);'||chr(10)),
     '       var td = createElement("td",statName+rowData.GROUP_KEY,col_class);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       td.innerHTML = gtab.outerHTML;'||chr(10)),
     '       td.innerHTML = gtab.outerHTML;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       rowElement.appendChild(td);'||chr(10)),
     '       rowElement.appendChild(td);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     gbybtn.innerHTML = ''X'';'||chr(10)),
     '     gbybtn.innerHTML = ''X'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     gbybtn.title = ''Delete group by table'';'||chr(10)),
     '     gbybtn.title = ''Delete group by table'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     gbybtn.setAttribute("data-gby-table-id",getId(''table'',statName));'||chr(10)),
     '     gbybtn.setAttribute("data-gby-table-id",getId(''table'',statName));'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     gbybtn.setAttribute("data-stat-name",origStatName);'||chr(10)),
     '     gbybtn.setAttribute("data-stat-name",origStatName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     origbtn.style.display = ''inline-block'';'||chr(10)),
     '     origbtn.style.display = ''inline-block'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     return tabElement;'||chr(10)),
     '     return tabElement;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function createParamsTable(statData, xColName, yColName, valColName) {'||chr(10)),
     '  function createParamsTable(statData, xColName, yColName, valColName) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var rows = statData.ROWS;'||chr(10)),
     '     var rows = statData.ROWS;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var cols = statData.COLS;'||chr(10)),
     '     var cols = statData.COLS;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var statName = statData.NAME;'||chr(10)),
     '     var statName = statData.NAME;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var colNames = {};'||chr(10)),
     '     var colNames = {};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var xColNum = cols[xColName][''COL_NUM''];'||chr(10)),
     '     var xColNum = cols[xColName][''COL_NUM''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var yColNum = cols[yColName][''COL_NUM''];'||chr(10)),
     '     var yColNum = cols[yColName][''COL_NUM''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var valColNum = cols[valColName][''COL_NUM''];'||chr(10)),
     '     var valColNum = cols[valColName][''COL_NUM''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var tabReHash = {};'||chr(10)),
     '     var tabReHash = {};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var colno = 0;'||chr(10)),
     '     var colno = 0;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     colNames[yColName] =  {''TYPE'':''1'', "COL_NUM":colno++};'||chr(10)),
     '     colNames[yColName] =  {''TYPE'':''1'', "COL_NUM":colno++};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     for (var i = 0 ; i < rows.length; i++) {'||chr(10)),
     '     for (var i = 0 ; i < rows.length; i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var xcol = rows[i][xColNum];'||chr(10)),
     '       var xcol = rows[i][xColNum];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var ycol = rows[i][yColNum];'||chr(10)),
     '       var ycol = rows[i][yColNum];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var val = rows[i][valColNum];'||chr(10)),
     '       var val = rows[i][valColNum];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (!tabReHash[ycol]) {'||chr(10)),
     '       if (!tabReHash[ycol]) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         tabReHash[ycol] = {};'||chr(10)),
     '         tabReHash[ycol] = {};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         tabReHash[ycol][yColName] = ycol;'||chr(10)),
     '         tabReHash[ycol][yColName] = ycol;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       tabReHash[ycol][xcol] = val;'||chr(10)),
     '       tabReHash[ycol][xcol] = val;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (!colNames[xcol]) {'||chr(10)),
     '       if (!colNames[xcol]) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         colNames[xcol] = {''TYPE'':''1'', "COL_NUM":colno++};'||chr(10)),
     '         colNames[xcol] = {''TYPE'':''1'', "COL_NUM":colno++};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var rows = [];'||chr(10)),
     '     var rows = [];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     for (param in tabReHash) {'||chr(10)),
     '     for (param in tabReHash) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var row = [];'||chr(10)),
     '       var row = [];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var rowData = tabReHash[param];'||chr(10)),
     '       var rowData = tabReHash[param];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       for(j in colNames) {'||chr(10)),
     '       for(j in colNames) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         row.push(rowData[j]);'||chr(10)),
     '         row.push(rowData[j]);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       } '||chr(10)),
     '       } '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       rows.push(row);'||chr(10)),
     '       rows.push(row);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var newstat = {};'||chr(10)),
     '     var newstat = {};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     newstat[''NAME''] = statName+''_params'';'||chr(10)),
     '     newstat[''NAME''] = statName+''_params'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     newstat[''SDESC''] = statData[''SDESC''];'||chr(10)),
     '     newstat[''SDESC''] = statData[''SDESC''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     newstat[''HINTS''] = ''* - value set by user.''+statData[''HINTS''];'||chr(10)),
     '     newstat[''HINTS''] = ''* - value set by user.''+statData[''HINTS''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     newstat[''DDESC''] = statData[''DDESC''];'||chr(10)),
     '     newstat[''DDESC''] = statData[''DDESC''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     newstat[''COLS''] = colNames;'||chr(10)),
     '     newstat[''COLS''] = colNames;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     newstat[''ROWS''] = rows;'||chr(10)),
     '     newstat[''ROWS''] = rows;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     newstat[''NROWS''] = rows.length;'||chr(10)),
     '     newstat[''NROWS''] = rows.length;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     '||chr(10)),
     '     '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     return createTable(newstat);'||chr(10)),
     '     return createTable(newstat);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function createSummaryTable(statData) {'||chr(10)),
     '  function createSummaryTable(statData) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var nrows = statData.NROWS;'||chr(10)),
     '     var nrows = statData.NROWS;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var rows = statData.ROWS;'||chr(10)),
     '     var rows = statData.ROWS;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var cols = statData.COLS;'||chr(10)),
     '     var cols = statData.COLS;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var statName = statData.NAME;'||chr(10)),
     '     var statName = statData.NAME;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var sdesc = statData.SDESC;'||chr(10)),
     '     var sdesc = statData.SDESC;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var txt = "";'||chr(10)),
     '     var txt = "";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var div = document.createElement(''div'', ''Summary'',"");'||chr(10)),
     '     var div = document.createElement(''div'', ''Summary'',"");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     div.setAttribute("style","margin:10px 10px");'||chr(10)),
     '     div.setAttribute("style","margin:10px 10px");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      '||chr(10)),
     '      '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var tabElement  = '''';'||chr(10)),
     '     var tabElement  = '''';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     txt = "";'||chr(10)),
     '     txt = "";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var count = 0;'||chr(10)),
     '     var count = 0;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var prevTyp;'||chr(10)),
     '     var prevTyp;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     for (var i = 0; i < rows.length; i++) {'||chr(10)),
     '     for (var i = 0; i < rows.length; i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var rowData = rows[i];'||chr(10)),
     '       var rowData = rows[i];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var id_col = rowData[cols[''ID''][''COL_NUM'']];'||chr(10)),
     '       var id_col = rowData[cols[''ID''][''COL_NUM'']];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var text_col = rowData[cols[''TEXT''][''COL_NUM'']];'||chr(10)),
     '       var text_col = rowData[cols[''TEXT''][''COL_NUM'']];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var type_col = rowData[cols[''TYPE''][''COL_NUM'']];'||chr(10)),
     '       var type_col = rowData[cols[''TYPE''][''COL_NUM'']];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var val_col = rowData[cols[''VAL''][''COL_NUM'']];'||chr(10)),
     '       var val_col = rowData[cols[''VAL''][''COL_NUM'']];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var cmt_col = rowData[cols[''COMMENTS''][''COL_NUM'']];'||chr(10)),
     '       var cmt_col = rowData[cols[''COMMENTS''][''COL_NUM'']];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var text_class_id = ''awrnc'';'||chr(10)),
     '       var text_class_id = ''awrnc'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var val_class_id = ''awrc'';'||chr(10)),
     '       var val_class_id = ''awrc'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var cmt_class_id = ''awrc'';'||chr(10)),
     '       var cmt_class_id = ''awrc'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (type_col != ''a'') {'||chr(10)),
     '       if (type_col != ''a'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         text_class_id = ''summary_''+type_col;'||chr(10)),
     '         text_class_id = ''summary_''+type_col;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         val_class_id = ''summary_''+type_col;'||chr(10)),
     '         val_class_id = ''summary_''+type_col;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         cmt_class_id = ''summary_''+type_col;'||chr(10)),
     '         cmt_class_id = ''summary_''+type_col;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var newTab = false;'||chr(10)),
     '       var newTab = false;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (type_col === ''h1'') {'||chr(10)),
     '       if (type_col === ''h1'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (tabElement) {'||chr(10)),
     '         if (tabElement) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           div.appendChild(tabElement);'||chr(10)),
     '           div.appendChild(tabElement);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         tabElement = document.createElement(''table'');'||chr(10)),
     '         tabElement = document.createElement(''table'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         tabElement.setAttribute("id","div2"+eleName);'||chr(10)),
     '         tabElement.setAttribute("id","div2"+eleName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         tabElement.setAttribute("class","tdiff");'||chr(10)),
     '         tabElement.setAttribute("class","tdiff");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         tabElement.style.display="table";'||chr(10)),
     '         tabElement.style.display="table";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var text = document.createElement(''a'');'||chr(10)),
     '         var text = document.createElement(''a'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var val = document.createElement(''a'');'||chr(10)),
     '         var val = document.createElement(''a'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var cmt = document.createElement(''a'');'||chr(10)),
     '         var cmt = document.createElement(''a'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (text_col != ''NULL'') {'||chr(10)),
     '         if (text_col != ''NULL'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           text.innerHTML = text_col;'||chr(10)),
     '           text.innerHTML = text_col;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (val_col != ''NULL'') {'||chr(10)),
     '         if (val_col != ''NULL'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           val.innerHTML = val_col;'||chr(10)),
     '           val.innerHTML = val_col;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (cmt_col != ''NULL'') {'||chr(10)),
     '         if (cmt_col != ''NULL'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           cmt.innerHTML = cmt_col;'||chr(10)),
     '           cmt.innerHTML = cmt_col;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     '||chr(10)),
     '     '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var rowElement = tabElement.insertRow(-1);'||chr(10)),
     '         var rowElement = tabElement.insertRow(-1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var text_col = document.createElement(''td'');'||chr(10)),
     '         var text_col = document.createElement(''td'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var val_col = document.createElement(''td'');'||chr(10)),
     '         var val_col = document.createElement(''td'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var cmt_col = document.createElement(''td'');'||chr(10)),
     '         var cmt_col = document.createElement(''td'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         text_col.setAttribute("width","250px");'||chr(10)),
     '         text_col.setAttribute("width","250px");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         val_col.setAttribute("width","450px");'||chr(10)),
     '         val_col.setAttribute("width","450px");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         cmt_col.setAttribute("width","450px");'||chr(10)),
     '         cmt_col.setAttribute("width","450px");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         text_col.setAttribute("class",text_class_id);'||chr(10)),
     '         text_col.setAttribute("class",text_class_id);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         val_col.setAttribute("class",val_class_id);'||chr(10)),
     '         val_col.setAttribute("class",val_class_id);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         cmt_col.setAttribute("class",cmt_class_id);'||chr(10)),
     '         cmt_col.setAttribute("class",cmt_class_id);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         text_col.appendChild(text);'||chr(10)),
     '         text_col.appendChild(text);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         val_col.appendChild(val);'||chr(10)),
     '         val_col.appendChild(val);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         cmt_col.appendChild(cmt);'||chr(10)),
     '         cmt_col.appendChild(cmt);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         rowElement.appendChild(text_col);'||chr(10)),
     '         rowElement.appendChild(text_col);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         rowElement.appendChild(val_col);'||chr(10)),
     '         rowElement.appendChild(val_col);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         rowElement.appendChild(cmt_col);'||chr(10)),
     '         rowElement.appendChild(cmt_col);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       } else if (type_col === ''h2'') {'||chr(10)),
     '       } else if (type_col === ''h2'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (tabElement) {'||chr(10)),
     '         if (tabElement) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           div.appendChild(tabElement);'||chr(10)),
     '           div.appendChild(tabElement);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var eleName = count ;'||chr(10)),
     '         var eleName = count ;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var nexteleName = count + 1;'||chr(10)),
     '         var nexteleName = count + 1;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         count++;'||chr(10)),
     '         count++;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var txt = "<a name=\""+eleName+"\" class=\"awrexp\" id="+"\"btn"+eleName+"\""+"onclick=\"toggleId(''div2"+nexteleName+"'',''btn"+eleName+"'');\" style=\" cursor:pointer; margin-right: 10px\">+</a>"'||chr(10)),
     '         var txt = "<a name=\""+eleName+"\" class=\"awrexp\" id="+"\"btn"+eleName+"\""+"onclick=\"toggleId(''div2"+nexteleName+"'',''btn"+eleName+"'');\" style=\" cursor:pointer; margin-right: 10px\">+</a>"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         tabElement = document.createElement(''table'');'||chr(10)),
     '         tabElement = document.createElement(''table'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         tabElement.setAttribute("id","div2"+eleName);'||chr(10)),
     '         tabElement.setAttribute("id","div2"+eleName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         tabElement.setAttribute("class","tdiff");'||chr(10)),
     '         tabElement.setAttribute("class","tdiff");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         tabElement.style.display="table";'||chr(10)),
     '         tabElement.style.display="table";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var text = document.createElement(''a'');'||chr(10)),
     '         var text = document.createElement(''a'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var val = document.createElement(''a'');'||chr(10)),
     '         var val = document.createElement(''a'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var cmt = document.createElement(''a'');'||chr(10)),
     '         var cmt = document.createElement(''a'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (text_col != ''NULL'') {'||chr(10)),
     '         if (text_col != ''NULL'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           text.innerHTML = txt + text_col;'||chr(10)),
     '           text.innerHTML = txt + text_col;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (val_col != ''NULL'') {'||chr(10)),
     '         if (val_col != ''NULL'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           val.innerHTML = val_col;'||chr(10)),
     '           val.innerHTML = val_col;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (cmt_col != ''NULL'') {'||chr(10)),
     '         if (cmt_col != ''NULL'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           cmt.innerHTML = cmt_col;'||chr(10)),
     '           cmt.innerHTML = cmt_col;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var rowElement = tabElement.insertRow(-1);'||chr(10)),
     '         var rowElement = tabElement.insertRow(-1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var text_col = document.createElement(''td'');'||chr(10)),
     '         var text_col = document.createElement(''td'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var val_col = document.createElement(''td'');'||chr(10)),
     '         var val_col = document.createElement(''td'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var cmt_col = document.createElement(''td'');'||chr(10)),
     '         var cmt_col = document.createElement(''td'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         text_col.setAttribute("width","250px");'||chr(10)),
     '         text_col.setAttribute("width","250px");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         val_col.setAttribute("width","450px");'||chr(10)),
     '         val_col.setAttribute("width","450px");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         cmt_col.setAttribute("width","450px");'||chr(10)),
     '         cmt_col.setAttribute("width","450px");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         text_col.setAttribute("class",text_class_id);'||chr(10)),
     '         text_col.setAttribute("class",text_class_id);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         val_col.setAttribute("class",val_class_id);'||chr(10)),
     '         val_col.setAttribute("class",val_class_id);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         cmt_col.setAttribute("class",cmt_class_id);'||chr(10)),
     '         cmt_col.setAttribute("class",cmt_class_id);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         text_col.appendChild(text);'||chr(10)),
     '         text_col.appendChild(text);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         val_col.appendChild(val);'||chr(10)),
     '         val_col.appendChild(val);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         cmt_col.appendChild(cmt);'||chr(10)),
     '         cmt_col.appendChild(cmt);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         rowElement.appendChild(text_col);'||chr(10)),
     '         rowElement.appendChild(text_col);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         rowElement.appendChild(val_col);'||chr(10)),
     '         rowElement.appendChild(val_col);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         rowElement.appendChild(cmt_col);'||chr(10)),
     '         rowElement.appendChild(cmt_col);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       } else {'||chr(10)),
     '       } else {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (prevTyp === ''h2'') {'||chr(10)),
     '       if (prevTyp === ''h2'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (tabElement) {'||chr(10)),
     '         if (tabElement) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           div.appendChild(tabElement);'||chr(10)),
     '           div.appendChild(tabElement);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var eleName = count;'||chr(10)),
     '         var eleName = count;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         count++;'||chr(10)),
     '         count++;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         tabElement = document.createElement(''table'');'||chr(10)),
     '         tabElement = document.createElement(''table'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         tabElement.setAttribute("id","div2"+eleName);'||chr(10)),
     '         tabElement.setAttribute("id","div2"+eleName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         tabElement.setAttribute("class","tdiff");'||chr(10)),
     '         tabElement.setAttribute("class","tdiff");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         tabElement.style.display="none"'||chr(10)),
     '         tabElement.style.display="none"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var rowElement = tabElement.insertRow(-1);'||chr(10)),
     '       var rowElement = tabElement.insertRow(-1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       type_col = ''pre'';'||chr(10)),
     '       type_col = ''pre'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var text = document.createElement(type_col);'||chr(10)),
     '       var text = document.createElement(type_col);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var val = document.createElement(type_col);'||chr(10)),
     '       var val = document.createElement(type_col);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var cmt = document.createElement(type_col);'||chr(10)),
     '       var cmt = document.createElement(type_col);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (text_col != ''NULL'') {'||chr(10)),
     '       if (text_col != ''NULL'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         text.innerHTML = text_col;'||chr(10)),
     '         text.innerHTML = text_col;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (newTab) {'||chr(10)),
     '         if (newTab) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           text.innerHTML = txt + text_col;'||chr(10)),
     '           text.innerHTML = txt + text_col;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (val_col != ''NULL'') {'||chr(10)),
     '       if (val_col != ''NULL'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         val.innerHTML = val_col;'||chr(10)),
     '         val.innerHTML = val_col;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (cmt_col != ''NULL'') {'||chr(10)),
     '       if (cmt_col != ''NULL'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         cmt.innerHTML = cmt_col;'||chr(10)),
     '         cmt.innerHTML = cmt_col;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var text_col = document.createElement(''td'');'||chr(10)),
     '       var text_col = document.createElement(''td'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var val_col = document.createElement(''td'');'||chr(10)),
     '       var val_col = document.createElement(''td'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var cmt_col = document.createElement(''td'');'||chr(10)),
     '       var cmt_col = document.createElement(''td'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       text_col.setAttribute("width","250px");'||chr(10)),
     '       text_col.setAttribute("width","250px");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       val_col.setAttribute("width","450px");'||chr(10)),
     '       val_col.setAttribute("width","450px");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       cmt_col.setAttribute("width","450px");'||chr(10)),
     '       cmt_col.setAttribute("width","450px");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       text_col.setAttribute("class",text_class_id);'||chr(10)),
     '       text_col.setAttribute("class",text_class_id);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       val_col.setAttribute("class",val_class_id);'||chr(10)),
     '       val_col.setAttribute("class",val_class_id);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       cmt_col.setAttribute("class",cmt_class_id);'||chr(10)),
     '       cmt_col.setAttribute("class",cmt_class_id);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       text_col.appendChild(text);'||chr(10)),
     '       text_col.appendChild(text);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       val_col.appendChild(val);'||chr(10)),
     '       val_col.appendChild(val);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       cmt_col.appendChild(cmt);'||chr(10)),
     '       cmt_col.appendChild(cmt);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       rowElement.appendChild(text_col);'||chr(10)),
     '       rowElement.appendChild(text_col);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       rowElement.appendChild(val_col);'||chr(10)),
     '       rowElement.appendChild(val_col);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       rowElement.appendChild(cmt_col);'||chr(10)),
     '       rowElement.appendChild(cmt_col);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       txt = "";'||chr(10)),
     '       txt = "";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     prevTyp = type_col;'||chr(10)),
     '     prevTyp = type_col;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     div.appendChild(tabElement);'||chr(10)),
     '     div.appendChild(tabElement);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     return div;'||chr(10)),
     '     return div;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   function addGroupByRow(statName, grpRowId) {'||chr(10)),
     '   function addGroupByRow(statName, grpRowId) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var tabId = getId(''table'',statName);'||chr(10)),
     '     var tabId = getId(''table'',statName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var grpRow = document.getElementById(grpRowId);'||chr(10)),
     '     var grpRow = document.getElementById(grpRowId);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var td = grpRow.getElementsByTagName(''td'');'||chr(10)),
     '     var td = grpRow.getElementsByTagName(''td'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var gbk = "";'||chr(10)),
     '     var gbk = "";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var aggcols = "";'||chr(10)),
     '     var aggcols = "";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var gbk_comma = '''';'||chr(10)),
     '     var gbk_comma = '''';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var agg_comma = '''';'||chr(10)),
     '     var agg_comma = '''';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var gbkJson = [];'||chr(10)),
     '     var gbkJson = [];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var aggJson = [];'||chr(10)),
     '     var aggJson = [];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     for(var i = 0 ; i < td.length - 2; i++) {'||chr(10)),
     '     for(var i = 0 ; i < td.length - 2; i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var col = td[i].getAttribute(''col-name'');'||chr(10)),
     '        var col = td[i].getAttribute(''col-name'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var cbk = td[i].getElementsByTagName(''input'')[0]; '||chr(10)),
     '        var cbk = td[i].getElementsByTagName(''input'')[0]; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('        if (cbk.checked == true) {'||chr(10)),
     '        if (cbk.checked == true) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          gbkJson.push(col);'||chr(10)),
     '          gbkJson.push(col);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          gbk += gbk_comma+col;'||chr(10)),
     '          gbk += gbk_comma+col;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          gbk_comma = '','';'||chr(10)),
     '          gbk_comma = '','';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          continue;'||chr(10)),
     '          continue;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        }'||chr(10)),
     '        }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var sel = td[i].getElementsByTagName(''select'')[0]; '||chr(10)),
     '        var sel = td[i].getElementsByTagName(''select'')[0]; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var val = sel.options[sel.selectedIndex].value;'||chr(10)),
     '        var val = sel.options[sel.selectedIndex].value;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        if (val) {'||chr(10)),
     '        if (val) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          var str = val+''(''+col+'')'';'||chr(10)),
     '          var str = val+''(''+col+'')'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          aggJson.push(str);'||chr(10)),
     '          aggJson.push(str);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          aggcols += agg_comma+str;'||chr(10)),
     '          aggcols += agg_comma+str;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          agg_comma = '','';'||chr(10)),
     '          agg_comma = '','';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        }   '||chr(10)),
     '        }   '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     g_configRules[''GROUPBY''][statName] = {"KEY_COLS":gbkJson,'||chr(10)),
     '     g_configRules[''GROUPBY''][statName] = {"KEY_COLS":gbkJson,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                                           "AGG_COLS":aggJson};'||chr(10)),
     '                                           "AGG_COLS":aggJson};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var confTabGroupBy = getObj(''table'',''groupby'');'||chr(10)),
     '     var confTabGroupBy = getObj(''table'',''groupby'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var row = confTabGroupBy.insertRow(-1);'||chr(10)),
     '     var row = confTabGroupBy.insertRow(-1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var td1 = createElement(''td'',"",''awrc'');'||chr(10)),
     '     var td1 = createElement(''td'',"",''awrc'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var td2 = createElement(''td'',"",''awrc'');'||chr(10)),
     '     var td2 = createElement(''td'',"",''awrc'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var td3 = createElement(''td'',"",''awrc'');'||chr(10)),
     '     var td3 = createElement(''td'',"",''awrc'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var td4 = createElement(''td'',"",''awrc'');'||chr(10)),
     '     var td4 = createElement(''td'',"",''awrc'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var btn3 = "<a class=''awrexp_small'' title=''delete row'' onclick=\"deleteRow(getId(''table'',''groupby''),this);\" >X</a>"'||chr(10)),
     '     var btn3 = "<a class=''awrexp_small'' title=''delete row'' onclick=\"deleteRow(getId(''table'',''groupby''),this);\" >X</a>"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     td1.innerHTML = statName;'||chr(10)),
     '     td1.innerHTML = statName;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     td2.innerHTML = gbk;'||chr(10)),
     '     td2.innerHTML = gbk;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     td3.innerHTML = aggcols;'||chr(10)),
     '     td3.innerHTML = aggcols;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     td4.innerHTML = btn3;'||chr(10)),
     '     td4.innerHTML = btn3;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     row.appendChild(td1);'||chr(10)),
     '     row.appendChild(td1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     row.appendChild(td2);'||chr(10)),
     '     row.appendChild(td2);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     row.appendChild(td3);'||chr(10)),
     '     row.appendChild(td3);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     row.appendChild(td4);'||chr(10)),
     '     row.appendChild(td4);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  '||chr(10)),
     '  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     getObj(getId(''table'',statName)).deleteRow(1);'||chr(10)),
     '     getObj(getId(''table'',statName)).deleteRow(1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var gbyTab = createGroupByTable(g_HcData[''STATS''][statName], gbkJson, aggJson);'||chr(10)),
     '     var gbyTab = createGroupByTable(g_HcData[''STATS''][statName], gbkJson, aggJson);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var tabOrig = getObj(''table'',statName);'||chr(10)),
     '     var tabOrig = getObj(''table'',statName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var div2 = getObj(''div'',statName+''div2'')'||chr(10)),
     '     var div2 = getObj(''div'',statName+''div2'')'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     div2.insertBefore(gbyTab, tabOrig);'||chr(10)),
     '     div2.insertBefore(gbyTab, tabOrig);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var aOrigBtn = getObj(''a'',statName+''origbtn'');'||chr(10)),
     '     var aOrigBtn = getObj(''a'',statName+''origbtn'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     aOrigBtn.style.display = ''inline-block'';'||chr(10)),
     '     aOrigBtn.style.display = ''inline-block'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     toggleId(getId(''table'',statName),"");'||chr(10)),
     '     toggleId(getId(''table'',statName),"");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   }'||chr(10)),
     '   }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   function addToBtnTable(statName, btn) {'||chr(10)),
     '   function addToBtnTable(statName, btn) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var row = getObj(''table'',statName+''table2'')'||chr(10)),
     '     var row = getObj(''table'',statName+''table2'')'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                         .getElementsByTagName(''tr'')[0];'||chr(10)),
     '                         .getElementsByTagName(''tr'')[0];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var colno = row.cells.length;'||chr(10)),
     '     var colno = row.cells.length;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     '||chr(10)),
     '     '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var td = createElement(''td'',statName+''table2col''+colno,''awrnc'');'||chr(10)),
     '     var td = createElement(''td'',statName+''table2col''+colno,''awrnc'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     td.appendChild(btn);'||chr(10)),
     '     td.appendChild(btn);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     row.appendChild(td);'||chr(10)),
     '     row.appendChild(td);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   }'||chr(10)),
     '   }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   function displayGroupByOptions(statName) {'||chr(10)),
     '   function displayGroupByOptions(statName) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var gbybtn = getObj(''a'',statName+''gbybtn'');'||chr(10)),
     '     var gbybtn = getObj(''a'',statName+''gbybtn'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var mode = gbybtn.innerHTML;'||chr(10)),
     '     var mode = gbybtn.innerHTML;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (mode === ''X'') {'||chr(10)),
     '     if (mode === ''X'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var origStatName = gbybtn.getAttribute(''data-stat-name'');      '||chr(10)),
     '       var origStatName = gbybtn.getAttribute(''data-stat-name'');      '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var gbyTable = gbybtn.getAttribute(''data-gby-table-id'');      '||chr(10)),
     '       var gbyTable = gbybtn.getAttribute(''data-gby-table-id'');      '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var origbtn = getObj(''a'',origStatName+''origbtn'');'||chr(10)),
     '       var origbtn = getObj(''a'',origStatName+''origbtn'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       gbyTable = document.getElementById(gbyTable);'||chr(10)),
     '       gbyTable = document.getElementById(gbyTable);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       gbyTable.parentNode.removeChild(gbyTable);'||chr(10)),
     '       gbyTable.parentNode.removeChild(gbyTable);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       delete g_configRules[''GROUPBY''][origStatName] ;'||chr(10)),
     '       delete g_configRules[''GROUPBY''][origStatName] ;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var tabElement = getObj(''table'',''groupby'');'||chr(10)),
     '       var tabElement = getObj(''table'',''groupby'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       loadGroupByConfigTable(tabElement);'||chr(10)),
     '       loadGroupByConfigTable(tabElement);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       gbybtn.innerHTML = ''G'';'||chr(10)),
     '       gbybtn.innerHTML = ''G'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       gbybtn.title = "Create Group by Table";'||chr(10)),
     '       gbybtn.title = "Create Group by Table";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       showId(getId(''table'',origStatName));'||chr(10)),
     '       showId(getId(''table'',origStatName));'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       origbtn.style.display = ''none'';'||chr(10)),
     '       origbtn.style.display = ''none'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     } else { '||chr(10)),
     '     } else { '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     showId(getId(''table'',statName),'''');'||chr(10)),
     '     showId(getId(''table'',statName),'''');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (getObj(''tr'',statName+"group-by-row")) {'||chr(10)),
     '     if (getObj(''tr'',statName+"group-by-row")) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       return; '||chr(10)),
     '       return; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var tabObj = getObj("table",statName);'||chr(10)),
     '     var tabObj = getObj("table",statName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var tabId = getId("table",statName);'||chr(10)),
     '     var tabId = getId("table",statName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var thead = tabObj.getElementsByTagName(''thead'')[0];'||chr(10)),
     '     var thead = tabObj.getElementsByTagName(''thead'')[0];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var header = thead.getElementsByTagName(''tr'')[0];'||chr(10)),
     '     var header = thead.getElementsByTagName(''tr'')[0];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var cols = g_HcData[''STATS''][statName][''COLS'']; '||chr(10)),
     '     var cols = g_HcData[''STATS''][statName][''COLS'']; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var row1 = createElement("tr", statName+"group-by-row","");'||chr(10)),
     '     var row1 = createElement("tr", statName+"group-by-row","");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var aggfuncs = ["","count", "max","min", "sum","avg"];'||chr(10)),
     '     var aggfuncs = ["","count", "max","min", "sum","avg"];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var btnOk = "<a class=''awrexp_small'' title=''apply'' onclick=\"addGroupByRow(''"+statName+"'',''"+row1.id+"'');\" >OK</a>"'||chr(10)),
     '     var btnOk = "<a class=''awrexp_small'' title=''apply'' onclick=\"addGroupByRow(''"+statName+"'',''"+row1.id+"'');\" >OK</a>"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var btnCancel = "<a class=''awrexp_small'' title=''discard'' onclick=\"deleteRow(''"+tabId+"'',this);\" >cancel</a>"'||chr(10)),
     '     var btnCancel = "<a class=''awrexp_small'' title=''discard'' onclick=\"deleteRow(''"+tabId+"'',this);\" >cancel</a>"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     for (col in cols) {'||chr(10)),
     '     for (col in cols) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var td = createElement(''td'',statName+''group-by-row''+col,''awrc'');'||chr(10)),
     '       var td = createElement(''td'',statName+''group-by-row''+col,''awrc'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       td.setAttribute(''col-name'',col);'||chr(10)),
     '       td.setAttribute(''col-name'',col);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var opt = document.createElement(''input'');'||chr(10)),
     '       var opt = document.createElement(''input'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       opt.setAttribute("type", "checkbox");'||chr(10)),
     '       opt.setAttribute("type", "checkbox");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       opt.setAttribute("value", col);'||chr(10)),
     '       opt.setAttribute("value", col);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       opt.setAttribute("title","groupby key");'||chr(10)),
     '       opt.setAttribute("title","groupby key");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       opt.setAttribute("select-id", getId(''select'',statName+''group-by-row''+''aggsel1''+col));'||chr(10)),
     '       opt.setAttribute("select-id", getId(''select'',statName+''group-by-row''+''aggsel1''+col));'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       opt.onchange = function(event) {'||chr(10)),
     '       opt.onchange = function(event) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           var cbk = event.target;'||chr(10)),
     '           var cbk = event.target;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           var selId = cbk.getAttribute(''select-id'');'||chr(10)),
     '           var selId = cbk.getAttribute(''select-id'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           toggleId(selId,"");'||chr(10)),
     '           toggleId(selId,"");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var sel = createElement("select",statName+''group-by-row''+''aggsel1''+col,"");'||chr(10)),
     '       var sel = createElement("select",statName+''group-by-row''+''aggsel1''+col,"");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        sel.setAttribute("title","aggregate");'||chr(10)),
     '        sel.setAttribute("title","aggregate");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        for (var i = 0 ; i < aggfuncs.length; i++) {'||chr(10)),
     '        for (var i = 0 ; i < aggfuncs.length; i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          var option = document.createElement(''option'');'||chr(10)),
     '          var option = document.createElement(''option'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          option.text = aggfuncs[i];'||chr(10)),
     '          option.text = aggfuncs[i];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          sel.appendChild(option);'||chr(10)),
     '          sel.appendChild(option);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        }'||chr(10)),
     '        }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       td.appendChild(opt);'||chr(10)),
     '       td.appendChild(opt);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       td.appendChild(sel);'||chr(10)),
     '       td.appendChild(sel);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       row1.appendChild(td);'||chr(10)),
     '       row1.appendChild(td);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var td = createElement(''td'',"", ''awrc'');'||chr(10)),
     '     var td = createElement(''td'',"", ''awrc'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     td.innerHTML = btnOk;'||chr(10)),
     '     td.innerHTML = btnOk;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     row1.appendChild(td);'||chr(10)),
     '     row1.appendChild(td);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     td = createElement(''td'',"", ''awrc'');'||chr(10)),
     '     td = createElement(''td'',"", ''awrc'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     td.innerHTML = btnCancel;'||chr(10)),
     '     td.innerHTML = btnCancel;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     row1.appendChild(td);'||chr(10)),
     '     row1.appendChild(td);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     thead.appendChild(row1);'||chr(10)),
     '     thead.appendChild(row1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   }'||chr(10)),
     '   }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    '||chr(10)),
     '    '||chr(10));
  dbms_lob.writeappend(clb, 
     length('   function extractColData(statName, colName) {'||chr(10)),
     '   function extractColData(statName, colName) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var statData = g_HcData[''STATS''][statName];'||chr(10)),
     '     var statData = g_HcData[''STATS''][statName];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (!statData) '||chr(10)),
     '     if (!statData) '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       return;'||chr(10)),
     '       return;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var colno = statData[''COLS''][colName] ? statData[''COLS''][colName][''COL_NUM''] : -1;'||chr(10)),
     '     var colno = statData[''COLS''][colName] ? statData[''COLS''][colName][''COL_NUM''] : -1;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (colno == -1)'||chr(10)),
     '     if (colno == -1)'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       return;'||chr(10)),
     '       return;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var arr = [];'||chr(10)),
     '     var arr = [];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     for(var i = 0 ; i < statData.NROWS; i++) {'||chr(10)),
     '     for(var i = 0 ; i < statData.NROWS; i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       arr[i]= statData[''ROWS''][i][colno];'||chr(10)),
     '       arr[i]= statData[''ROWS''][i][colno];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     return arr;'||chr(10)),
     '     return arr;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   }'||chr(10)),
     '   }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   function getCanvasDefaultOptions(title) {'||chr(10)),
     '   function getCanvasDefaultOptions(title) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var defOptions = {'||chr(10)),
     '      var defOptions = {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        legend: {'||chr(10)),
     '        legend: {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            display: true,'||chr(10)),
     '            display: true,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            position:''right'','||chr(10)),
     '            position:''right'','||chr(10));
  dbms_lob.writeappend(clb, 
     length('            labels: {'||chr(10)),
     '            labels: {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            boxWidth:10,'||chr(10)),
     '            boxWidth:10,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                fontColor: ''rgb(51, 102, 204)'','||chr(10)),
     '                fontColor: ''rgb(51, 102, 204)'','||chr(10));
  dbms_lob.writeappend(clb, 
     length('                fontSize:10'||chr(10)),
     '                fontSize:10'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            }'||chr(10)),
     '            }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        },'||chr(10)),
     '        },'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           title: {'||chr(10)),
     '           title: {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            display: true,'||chr(10)),
     '            display: true,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            fontSize :12,'||chr(10)),
     '            fontSize :12,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            text: title'||chr(10)),
     '            text: title'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        }'||chr(10)),
     '        }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    };'||chr(10)),
     '    };'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    return defOptions;'||chr(10)),
     '    return defOptions;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   }'||chr(10)),
     '   }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   function hasCharts () {'||chr(10)),
     '   function hasCharts () {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      return false; '||chr(10)),
     '      return false; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('   }'||chr(10)),
     '   }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  '||chr(10)),
     '  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('   function getChecksCanvas(parObj) {'||chr(10)),
     '   function getChecksCanvas(parObj) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var canv = createElement(''canvas'',''report_check'',''awrcanvas_small'');'||chr(10)),
     '      var canv = createElement(''canvas'',''report_check'',''awrcanvas_small'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var candiv = createElement(''div'',''report_checkcanvas'',''awrcanvas_small'');'||chr(10)),
     '      var candiv = createElement(''div'',''report_checkcanvas'',''awrcanvas_small'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var canvOptions = getCanvasDefaultOptions(''System Health Checks'');'||chr(10)),
     '      var canvOptions = getCanvasDefaultOptions(''System Health Checks'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      candiv.appendChild(canv);'||chr(10)),
     '      candiv.appendChild(canv);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      parObj.appendChild(candiv);'||chr(10)),
     '      parObj.appendChild(candiv);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var colors = {''GREEN'' :''green'', ''RED'':''red'',''YELLOW'':''orange'','||chr(10)),
     '      var colors = {''GREEN'' :''green'', ''RED'':''red'',''YELLOW'':''orange'','||chr(10));
  dbms_lob.writeappend(clb, 
     length('                     ''INFO'': ''blue''};'||chr(10)),
     '                     ''INFO'': ''blue''};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var custom_labels = {''GREEN'' :''Pass(GREEN)'', '||chr(10)),
     '      var custom_labels = {''GREEN'' :''Pass(GREEN)'', '||chr(10));
  dbms_lob.writeappend(clb, 
     length('                           ''RED'':''Fail(RED)'','||chr(10)),
     '                           ''RED'':''Fail(RED)'','||chr(10));
  dbms_lob.writeappend(clb, 
     length('                           ''YELLOW'':''Take a look(YELLOW)'','||chr(10)),
     '                           ''YELLOW'':''Take a look(YELLOW)'','||chr(10));
  dbms_lob.writeappend(clb, 
     length('                           ''INFO'': ''Information(INFO)''};'||chr(10)),
     '                           ''INFO'': ''Information(INFO)''};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      canv.style.cursor = ''pointer'';'||chr(10)),
     '      canv.style.cursor = ''pointer'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      canv.onclick = function(evt) {'||chr(10)),
     '      canv.onclick = function(evt) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        window.location.href= ''#checks'';'||chr(10)),
     '        window.location.href= ''#checks'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      };'||chr(10)),
     '      };'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var flags = extractColData(''report_check'',''FLAG'');'||chr(10)),
     '      var flags = extractColData(''report_check'',''FLAG'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var pie = {};'||chr(10)),
     '      var pie = {};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      for (var i = 0 ; i < flags.length; i++) {'||chr(10)),
     '      for (var i = 0 ; i < flags.length; i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (flags[i] === ''FADE'') '||chr(10)),
     '         if (flags[i] === ''FADE'') '||chr(10));
  dbms_lob.writeappend(clb, 
     length('           continue;'||chr(10)),
     '           continue;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (pie[flags[i]]) '||chr(10)),
     '         if (pie[flags[i]]) '||chr(10));
  dbms_lob.writeappend(clb, 
     length('           pie[flags[i]]++;'||chr(10)),
     '           pie[flags[i]]++;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         else'||chr(10)),
     '         else'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           pie[flags[i]] = 1;'||chr(10)),
     '           pie[flags[i]] = 1;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var labels = [];'||chr(10)),
     '      var labels = [];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var data = [];'||chr(10)),
     '      var data = [];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var selColors = [];'||chr(10)),
     '      var selColors = [];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var j = 0;'||chr(10)),
     '      var j = 0;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      for(k in pie) {'||chr(10)),
     '      for(k in pie) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        labels[j] = custom_labels[k]? custom_labels[k] : k;'||chr(10)),
     '        labels[j] = custom_labels[k]? custom_labels[k] : k;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        data[j] = pie[k];'||chr(10)),
     '        data[j] = pie[k];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        selColors[j] = colors[k] ? colors[k] : ''purple'';'||chr(10)),
     '        selColors[j] = colors[k] ? colors[k] : ''purple'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        j++;'||chr(10)),
     '        j++;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var data = {'||chr(10)),
     '      var data = {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         datasets: [{'||chr(10)),
     '         datasets: [{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            fill:false,'||chr(10)),
     '            fill:false,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            data: data,'||chr(10)),
     '            data: data,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        backgroundColor: selColors,'||chr(10)),
     '        backgroundColor: selColors,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        label: ''Health Checks'' // for legend'||chr(10)),
     '        label: ''Health Checks'' // for legend'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    ],'||chr(10)),
     '    ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    labels:labels '||chr(10)),
     '    labels:labels '||chr(10));
  dbms_lob.writeappend(clb, 
     length('};'||chr(10)),
     '};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('var healthChart = new Chart(canv,{'||chr(10)),
     'var healthChart = new Chart(canv,{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    type: ''pie'','||chr(10)),
     '    type: ''pie'','||chr(10));
  dbms_lob.writeappend(clb, 
     length('    data: data,'||chr(10)),
     '    data: data,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    options: canvOptions'||chr(10)),
     '    options: canvOptions'||chr(10));
  dbms_lob.writeappend(clb, 
     length('});'||chr(10)),
     '});'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     return healthChart;'||chr(10)),
     '     return healthChart;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   function getMessagesCanvas(parObj) {'||chr(10)),
     '   function getMessagesCanvas(parObj) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var canv = createElement(''canvas'',''109'',''awrcanvas_small'');'||chr(10)),
     '      var canv = createElement(''canvas'',''109'',''awrcanvas_small'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var candiv = createElement(''div'',''109msgcanvas'',''awrcanvas_small'');'||chr(10)),
     '      var candiv = createElement(''div'',''109msgcanvas'',''awrcanvas_small'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var canvOptions = getCanvasDefaultOptions(''Capture Messages'');'||chr(10)),
     '      var canvOptions = getCanvasDefaultOptions(''Capture Messages'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      candiv.appendChild(canv);'||chr(10)),
     '      candiv.appendChild(canv);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      parObj.appendChild(candiv);'||chr(10)),
     '      parObj.appendChild(candiv);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var msgsCap = extractColData(''109'',''MSGS_CAPTURED'');'||chr(10)),
     '      var msgsCap = extractColData(''109'',''MSGS_CAPTURED'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var msgsEnq = extractColData(''109'',''MSGS_ENQUEUED'');'||chr(10)),
     '      var msgsEnq = extractColData(''109'',''MSGS_ENQUEUED'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var msgsSent = extractColData(''109'',''MSGS_SENT'');'||chr(10)),
     '      var msgsSent = extractColData(''109'',''MSGS_SENT'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var capNames = extractColData(''109'',''CAPTURE_NAME'');'||chr(10)),
     '      var capNames = extractColData(''109'',''CAPTURE_NAME'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var data = {'||chr(10)),
     '      var data = {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         datasets: [{'||chr(10)),
     '         datasets: [{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            fill:false,'||chr(10)),
     '            fill:false,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            data: msgsCap,'||chr(10)),
     '            data: msgsCap,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            backgroundColor: "green",'||chr(10)),
     '            backgroundColor: "green",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            label: ''Messages Captured '' // for legend'||chr(10)),
     '            label: ''Messages Captured '' // for legend'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           },{'||chr(10)),
     '           },{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            fill:false,'||chr(10)),
     '            fill:false,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            data: msgsEnq,'||chr(10)),
     '            data: msgsEnq,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            backgroundColor: "red",'||chr(10)),
     '            backgroundColor: "red",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            label: ''Messages Enqueued'' // for legend'||chr(10)),
     '            label: ''Messages Enqueued'' // for legend'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           },{'||chr(10)),
     '           },{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            fill:false,'||chr(10)),
     '            fill:false,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            data: msgsSent,'||chr(10)),
     '            data: msgsSent,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            backgroundColor: "orange",'||chr(10)),
     '            backgroundColor: "orange",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            label: ''Messages Sent'' // for legend'||chr(10)),
     '            label: ''Messages Sent'' // for legend'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           }'||chr(10)),
     '           }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         ],'||chr(10)),
     '         ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         labels:capNames '||chr(10)),
     '         labels:capNames '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     };'||chr(10)),
     '     };'||chr(10));
  dbms_lob.writeappend(clb, 
     length('var msgsChart = new Chart(canv,{'||chr(10)),
     'var msgsChart = new Chart(canv,{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    type: ''bar'','||chr(10)),
     '    type: ''bar'','||chr(10));
  dbms_lob.writeappend(clb, 
     length('    data: data,'||chr(10)),
     '    data: data,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    options: canvOptions'||chr(10)),
     '    options: canvOptions'||chr(10));
  dbms_lob.writeappend(clb, 
     length('});'||chr(10)),
     '});'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     return msgsChart;'||chr(10)),
     '     return msgsChart;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   function getMemoryCanvas(parObj) {'||chr(10)),
     '   function getMemoryCanvas(parObj) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var canv = createElement(''canvas'',''109'',''awrcanvas_small'');'||chr(10)),
     '      var canv = createElement(''canvas'',''109'',''awrcanvas_small'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var candiv = createElement(''div'',''109canvas'',''awrcanvas_small'');'||chr(10)),
     '      var candiv = createElement(''div'',''109canvas'',''awrcanvas_small'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var canvOptions = getCanvasDefaultOptions(''Capture Memory'');'||chr(10)),
     '      var canvOptions = getCanvasDefaultOptions(''Capture Memory'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      candiv.appendChild(canv);'||chr(10)),
     '      candiv.appendChild(canv);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      parObj.appendChild(candiv);'||chr(10)),
     '      parObj.appendChild(candiv);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var usedMem = extractColData(''109'',''Used [MB]'');'||chr(10)),
     '      var usedMem = extractColData(''109'',''Used [MB]'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var allocMem = extractColData(''109'',''Alloced [MB]'');'||chr(10)),
     '      var allocMem = extractColData(''109'',''Alloced [MB]'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var capNames = extractColData(''109'',''CAPTURE_NAME'');'||chr(10)),
     '      var capNames = extractColData(''109'',''CAPTURE_NAME'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var data = {'||chr(10)),
     '      var data = {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         datasets: [{'||chr(10)),
     '         datasets: [{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            fill:false,'||chr(10)),
     '            fill:false,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            data: allocMem,'||chr(10)),
     '            data: allocMem,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        backgroundColor: "green",'||chr(10)),
     '        backgroundColor: "green",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        label: ''Allocated Memory[MB] '' // for legend'||chr(10)),
     '        label: ''Allocated Memory[MB] '' // for legend'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    },{'||chr(10)),
     '    },{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        fill:false,'||chr(10)),
     '        fill:false,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        data: usedMem,'||chr(10)),
     '        data: usedMem,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        backgroundColor: "red",'||chr(10)),
     '        backgroundColor: "red",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        label: ''Used Memory[MB]'' // for legend'||chr(10)),
     '        label: ''Used Memory[MB]'' // for legend'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    ],'||chr(10)),
     '    ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    labels:capNames '||chr(10)),
     '    labels:capNames '||chr(10));
  dbms_lob.writeappend(clb, 
     length('};'||chr(10)),
     '};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('var memChart = new Chart(canv,{'||chr(10)),
     'var memChart = new Chart(canv,{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    type: ''bar'','||chr(10)),
     '    type: ''bar'','||chr(10));
  dbms_lob.writeappend(clb, 
     length('    data: data,'||chr(10)),
     '    data: data,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    options: canvOptions'||chr(10)),
     '    options: canvOptions'||chr(10));
  dbms_lob.writeappend(clb, 
     length('});'||chr(10)),
     '});'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     return memChart;'||chr(10)),
     '     return memChart;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   function getScnCanvas(parObj) {'||chr(10)),
     '   function getScnCanvas(parObj) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var canv = createElement(''canvas'',''030'',''awrcanvas_small'');'||chr(10)),
     '      var canv = createElement(''canvas'',''030'',''awrcanvas_small'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var candiv = createElement(''div'',''030canvas'',''awrcanvas_small'');'||chr(10)),
     '      var candiv = createElement(''div'',''030canvas'',''awrcanvas_small'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var canvOptions = getCanvasDefaultOptions(''Capture SCNs'');'||chr(10)),
     '      var canvOptions = getCanvasDefaultOptions(''Capture SCNs'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      candiv.appendChild(canv);'||chr(10)),
     '      candiv.appendChild(canv);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      parObj.appendChild(candiv);'||chr(10)),
     '      parObj.appendChild(candiv);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var firstScn = extractColData(''030'',''FIRST_SCN'');'||chr(10)),
     '      var firstScn = extractColData(''030'',''FIRST_SCN'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var capturedScn = extractColData(''030'',''CAPTURED_SCN'');'||chr(10)),
     '      var capturedScn = extractColData(''030'',''CAPTURED_SCN'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var reqCkptScn = extractColData(''030'',''REQUIRED_CHECKPOINT_SCN'');'||chr(10)),
     '      var reqCkptScn = extractColData(''030'',''REQUIRED_CHECKPOINT_SCN'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var capNames = extractColData(''030'',''CAPTURE_NAME'');'||chr(10)),
     '      var capNames = extractColData(''030'',''CAPTURE_NAME'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var currentScn = [];'||chr(10)),
     '      var currentScn = [];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var curr_scns = extractColData(''002'',''CURRENT_SCN'');'||chr(10)),
     '      var curr_scns = extractColData(''002'',''CURRENT_SCN'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var curr_scn = curr_scns[0];'||chr(10)),
     '      var curr_scn = curr_scns[0];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      for (var i = 0 ; i < firstScn.length; i++) '||chr(10)),
     '      for (var i = 0 ; i < firstScn.length; i++) '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         currentScn[i] = curr_scn;'||chr(10)),
     '         currentScn[i] = curr_scn;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var data = {'||chr(10)),
     '      var data = {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         datasets: [{'||chr(10)),
     '         datasets: [{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            fill:false,'||chr(10)),
     '            fill:false,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            data: currentScn,'||chr(10)),
     '            data: currentScn,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        backgroundColor: "green",'||chr(10)),
     '        backgroundColor: "green",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        label: ''Current Scn'' // for legend'||chr(10)),
     '        label: ''Current Scn'' // for legend'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    },{'||chr(10)),
     '    },{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        fill:false,'||chr(10)),
     '        fill:false,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        data: capturedScn,'||chr(10)),
     '        data: capturedScn,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        backgroundColor: "#FF6600",'||chr(10)),
     '        backgroundColor: "#FF6600",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        label: ''Captured Scn'' // for legend'||chr(10)),
     '        label: ''Captured Scn'' // for legend'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    },{'||chr(10)),
     '    },{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        fill:false,'||chr(10)),
     '        fill:false,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        data: reqCkptScn,'||chr(10)),
     '        data: reqCkptScn,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        backgroundColor: "blue",'||chr(10)),
     '        backgroundColor: "blue",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        label: ''Req Ckpt Scn'' // for legend'||chr(10)),
     '        label: ''Req Ckpt Scn'' // for legend'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    },{'||chr(10)),
     '    },{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        fill:false,'||chr(10)),
     '        fill:false,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        data: firstScn,'||chr(10)),
     '        data: firstScn,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        backgroundColor: "orange",'||chr(10)),
     '        backgroundColor: "orange",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        label: ''First Scn'' // for legend'||chr(10)),
     '        label: ''First Scn'' // for legend'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }],'||chr(10)),
     '    }],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    labels:capNames '||chr(10)),
     '    labels:capNames '||chr(10));
  dbms_lob.writeappend(clb, 
     length('};'||chr(10)),
     '};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('var scnChart = new Chart(canv,{'||chr(10)),
     'var scnChart = new Chart(canv,{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    type: ''bar'','||chr(10)),
     '    type: ''bar'','||chr(10));
  dbms_lob.writeappend(clb, 
     length('    data: data,'||chr(10)),
     '    data: data,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    options: canvOptions'||chr(10)),
     '    options: canvOptions'||chr(10));
  dbms_lob.writeappend(clb, 
     length('});'||chr(10)),
     '});'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     return scnChart;'||chr(10)),
     '     return scnChart;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function linkTables(tabList) {'||chr(10)),
     '  function linkTables(tabList) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var tabs = tabList.split(",");'||chr(10)),
     '    var tabs = tabList.split(",");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var result = "";'||chr(10)),
     '    var result = "";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var linksJson = g_HcData[''DOC_LINKS''];'||chr(10)),
     '    var linksJson = g_HcData[''DOC_LINKS''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (!linksJson) {'||chr(10)),
     '    if (!linksJson) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      return tabList;'||chr(10)),
     '      return tabList;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var sep = '''';'||chr(10)),
     '    var sep = '''';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    for(tab in tabs) {'||chr(10)),
     '    for(tab in tabs) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var tName = tabs[tab];'||chr(10)),
     '      var tName = tabs[tab];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if (!tName) {'||chr(10)),
     '      if (!tName) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        continue;'||chr(10)),
     '        continue;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      tName = tName.trim();'||chr(10)),
     '      tName = tName.trim();'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      tName = tName.toUpperCase();'||chr(10)),
     '      tName = tName.toUpperCase();'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if (linksJson[tName]) {'||chr(10)),
     '      if (linksJson[tName]) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        result +=  sep+" <a target=''_blank'' href="+linksJson[tName]+">"+tName+"</a>";'||chr(10)),
     '        result +=  sep+" <a target=''_blank'' href="+linksJson[tName]+">"+tName+"</a>";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        sep = '' | '';'||chr(10)),
     '        sep = '' | '';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      } else {'||chr(10)),
     '      } else {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        if (tName.search(/^X\$/i) == -1 && '||chr(10)),
     '        if (tName.search(/^X\$/i) == -1 && '||chr(10));
  dbms_lob.writeappend(clb, 
     length('            tName.search(/^LOGMNR/i) == -1 &&'||chr(10)),
     '            tName.search(/^LOGMNR/i) == -1 &&'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            tName.search(/^GGHC_/i) == -1) {'||chr(10)),
     '            tName.search(/^GGHC_/i) == -1) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          result +=  sep+ "<a>" +tName+"</a>";'||chr(10)),
     '          result +=  sep+ "<a>" +tName+"</a>";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          sep = '' | '';'||chr(10)),
     '          sep = '' | '';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        }'||chr(10)),
     '        }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      } '||chr(10)),
     '      } '||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    return result;'||chr(10)),
     '    return result;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   function populateOneStat(statData) {'||chr(10)),
     '   function populateOneStat(statData) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       try {'||chr(10)),
     '       try {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (!statData)'||chr(10)),
     '       if (!statData)'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         return;'||chr(10)),
     '         return;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var nrows = statData.NROWS;'||chr(10)),
     '       var nrows = statData.NROWS;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var hints = statData.HINTS;'||chr(10)),
     '       var hints = statData.HINTS;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var desc = statData.DDESC;'||chr(10)),
     '       var desc = statData.DDESC;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var statName = statData.NAME;'||chr(10)),
     '       var statName = statData.NAME;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var trunc = statData.COLUMN_TRUNCATED;'||chr(10)),
     '       var trunc = statData.COLUMN_TRUNCATED;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var divId = getId("div",statName);'||chr(10)),
     '       var divId = getId("div",statName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (nrows == 0) {'||chr(10)),
     '       if (nrows == 0) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         return;'||chr(10)),
     '         return;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var tabExclude = "";'||chr(10)),
     '       var tabExclude = "";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       '||chr(10)),
     '       '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (g_configRules && g_configRules["TABLE"]) {'||chr(10)),
     '       if (g_configRules && g_configRules["TABLE"]) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var tabRule = g_configRules["TABLE"][statName];'||chr(10)),
     '         var tabRule = g_configRules["TABLE"][statName];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (tabRule) {'||chr(10)),
     '         if (tabRule) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           tabExclude = tabRule["exclude"];'||chr(10)),
     '           tabExclude = tabRule["exclude"];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           if (tabExclude) {'||chr(10)),
     '           if (tabExclude) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('             return;'||chr(10)),
     '             return;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           }'||chr(10)),
     '           }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var divElement = document.getElementById(divId);'||chr(10)),
     '       var divElement = document.getElementById(divId);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (divElement) {'||chr(10)),
     '       if (divElement) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         return;'||chr(10)),
     '         return;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var statTable = document.getElementById("addtable");'||chr(10)),
     '       var statTable = document.getElementById("addtable");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      '||chr(10)),
     '      '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var div = document.createElement(''div'');'||chr(10)),
     '       var div = document.createElement(''div'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       div.setAttribute("id",divId);'||chr(10)),
     '       div.setAttribute("id",divId);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       div.setAttribute("class","awrtopdiv");'||chr(10)),
     '       div.setAttribute("class","awrtopdiv");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       div.setAttribute("data-name",statName);'||chr(10)),
     '       div.setAttribute("data-name",statName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (trunc) {'||chr(10)),
     '       if (trunc) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         div.setAttribute("data-truncated",trunc);'||chr(10)),
     '         div.setAttribute("data-truncated",trunc);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       document.getElementById("addtable").appendChild(div);'||chr(10)),
     '       document.getElementById("addtable").appendChild(div);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       g_divObj[divId] = div;'||chr(10)),
     '       g_divObj[divId] = div;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var aBtn = createElement("a",statName+"collapse","awrexp");'||chr(10)),
     '       var aBtn = createElement("a",statName+"collapse","awrexp");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       aBtn.name = statName;'||chr(10)),
     '       aBtn.name = statName;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       aBtn.setAttribute("onclick","toggleDiv(''"+statName+"'')");'||chr(10)),
     '       aBtn.setAttribute("onclick","toggleDiv(''"+statName+"'')");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       aBtn.innerHTML = "-";'||chr(10)),
     '       aBtn.innerHTML = "-";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var header ;'||chr(10)),
     '       var header ;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var header_class = ''awr'';'||chr(10)),
     '       var header_class = ''awr'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (statData.INTERNAL) {'||chr(10)),
     '       if (statData.INTERNAL) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         header_class = ''awr_internal'';'||chr(10)),
     '         header_class = ''awr_internal'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       } '||chr(10)),
     '       } '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       header = createElement("h3",statName,header_class);'||chr(10)),
     '       header = createElement("h3",statName,header_class);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       '||chr(10)),
     '       '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       header.innerHTML = "<a title=''"+statName+"''>"+statData.SDESC+"</a>" ; '||chr(10)),
     '       header.innerHTML = "<a title=''"+statName+"''>"+statData.SDESC+"</a>" ; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var rows_header = createElement("h3",statName+''_rows'',"awr_rows_hide");'||chr(10)),
     '       var rows_header = createElement("h3",statName+''_rows'',"awr_rows_hide");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       rows_header.innerHTML = "[" + nrows +" row(s)] "; '||chr(10)),
     '       rows_header.innerHTML = "[" + nrows +" row(s)] "; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       rows_header.title = nrows + " rows(s)";'||chr(10)),
     '       rows_header.title = nrows + " rows(s)";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var tables_header;'||chr(10)),
     '       var tables_header;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (statData.TABLES) {'||chr(10)),
     '       if (statData.TABLES) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         tables_header = createElement("h3",statName+''_tabs'',''awr_tabs'');'||chr(10)),
     '         tables_header = createElement("h3",statName+''_tabs'',''awr_tabs'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var tabs = linkTables(statData.TABLES);'||chr(10)),
     '         var tabs = linkTables(statData.TABLES);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (tabs) {'||chr(10)),
     '         if (tabs) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           tables_header.innerHTML = "["+tabs+"]";'||chr(10)),
     '           tables_header.innerHTML = "["+tabs+"]";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       '||chr(10)),
     '       '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       div.appendChild(aBtn);'||chr(10)),
     '       div.appendChild(aBtn);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       div.appendChild(header);'||chr(10)),
     '       div.appendChild(header);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       div.appendChild(rows_header);'||chr(10)),
     '       div.appendChild(rows_header);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (tables_header) {'||chr(10)),
     '       if (tables_header) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         div.appendChild(tables_header);'||chr(10)),
     '         div.appendChild(tables_header);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var div2 = createElement(''div'',statName+"div2","contentDiv");'||chr(10)),
     '       var div2 = createElement(''div'',statName+"div2","contentDiv");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       div2.setAttribute("statName",statName);'||chr(10)),
     '       div2.setAttribute("statName",statName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       div.appendChild(div2);'||chr(10)),
     '       div.appendChild(div2);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var tab2 = createElement(''table'',statName+''table2'',''tdiff_btn'');'||chr(10)),
     '       var tab2 = createElement(''table'',statName+''table2'',''tdiff_btn'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       div2.appendChild(tab2);'||chr(10)),
     '       div2.appendChild(tab2);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var tab2Row = tab2.insertRow(-1);'||chr(10)),
     '       var tab2Row = tab2.insertRow(-1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var aGbyBtn = createElement("a", statName+''gbybtn'',"awrexp_small");'||chr(10)),
     '       var aGbyBtn = createElement("a", statName+''gbybtn'',"awrexp_small");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       aGbyBtn.name = statName;'||chr(10)),
     '       aGbyBtn.name = statName;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       aGbyBtn.setAttribute("onclick","displayGroupByOptions(''"+statName+"'')");'||chr(10)),
     '       aGbyBtn.setAttribute("onclick","displayGroupByOptions(''"+statName+"'')");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       aGbyBtn.title = "Create Group by Table";'||chr(10)),
     '       aGbyBtn.title = "Create Group by Table";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       aGbyBtn.innerHTML = "G";'||chr(10)),
     '       aGbyBtn.innerHTML = "G";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       addToBtnTable(statName, aGbyBtn);'||chr(10)),
     '       addToBtnTable(statName, aGbyBtn);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (nrows <= 1 ) {'||chr(10)),
     '       if (nrows <= 1 ) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         aGbyBtn.style.display = ''none'';'||chr(10)),
     '         aGbyBtn.style.display = ''none'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var aOrigBtn = createElement("a", statName+''origbtn'',"awrexp_small");'||chr(10)),
     '       var aOrigBtn = createElement("a", statName+''origbtn'',"awrexp_small");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       aOrigBtn.name = statName;'||chr(10)),
     '       aOrigBtn.name = statName;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       aOrigBtn.setAttribute("onclick","toggleId(''table"+statName+"'','''')");'||chr(10)),
     '       aOrigBtn.setAttribute("onclick","toggleId(''table"+statName+"'','''')");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       aOrigBtn.innerHTML = "O";'||chr(10)),
     '       aOrigBtn.innerHTML = "O";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       aOrigBtn.title = "Show Original Table";'||chr(10)),
     '       aOrigBtn.title = "Show Original Table";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       addToBtnTable(statName, aOrigBtn);'||chr(10)),
     '       addToBtnTable(statName, aOrigBtn);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       aOrigBtn.style.display = "none";'||chr(10)),
     '       aOrigBtn.style.display = "none";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (desc && desc != "NONE") {'||chr(10)),
     '       if (desc && desc != "NONE") {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var descP = createElement("p", statName+''desc'',''awrdesc'');'||chr(10)),
     '         var descP = createElement("p", statName+''desc'',''awrdesc'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         descP.setAttribute("parent",statData.NAME);'||chr(10)),
     '         descP.setAttribute("parent",statData.NAME);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         descP.innerHTML = desc;'||chr(10)),
     '         descP.innerHTML = desc;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (!statData[''DDESC_SHOW'']){'||chr(10)),
     '         if (!statData[''DDESC_SHOW'']){'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           descP.style.display = "none";'||chr(10)),
     '           descP.style.display = "none";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         div2.appendChild(descP);'||chr(10)),
     '         div2.appendChild(descP);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var aDescBtn = createElement("a", statName+''descbtn'',"awrexp_desc_small");'||chr(10)),
     '         var aDescBtn = createElement("a", statName+''descbtn'',"awrexp_desc_small");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         aDescBtn.name = statName;'||chr(10)),
     '         aDescBtn.name = statName;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         aDescBtn.setAttribute("onclick","toggleId(''"+getId(''p'',statName+''desc'')+"'')");'||chr(10)),
     '         aDescBtn.setAttribute("onclick","toggleId(''"+getId(''p'',statName+''desc'')+"'')");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var titleDesc = desc.substring(0,200);'||chr(10)),
     '         var titleDesc = desc.substring(0,200);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (desc.length > 200) {'||chr(10)),
     '         if (desc.length > 200) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            titleDesc += "...";'||chr(10)),
     '            titleDesc += "...";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         aDescBtn.title = titleDesc;'||chr(10)),
     '         aDescBtn.title = titleDesc;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         aDescBtn.innerHTML = "D";'||chr(10)),
     '         aDescBtn.innerHTML = "D";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         addToBtnTable(statName, aDescBtn);'||chr(10)),
     '         addToBtnTable(statName, aDescBtn);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (g_HcData[''STATS''][statName] &&'||chr(10)),
     '       if (g_HcData[''STATS''][statName] &&'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           g_HcData[''STATS''][statName][''ERROR'']) {'||chr(10)),
     '           g_HcData[''STATS''][statName][''ERROR'']) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          if (div)'||chr(10)),
     '          if (div)'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            div.setAttribute(''data-alert'',''yes'');'||chr(10)),
     '            div.setAttribute(''data-alert'',''yes'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       switch(statName) {'||chr(10)),
     '       switch(statName) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       case ''report_summary'': '||chr(10)),
     '       case ''report_summary'': '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (hasCharts()) {'||chr(10)),
     '         if (hasCharts()) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           getChecksCanvas(div2);'||chr(10)),
     '           getChecksCanvas(div2);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           getScnCanvas(div2);'||chr(10)),
     '           getScnCanvas(div2);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           getMemoryCanvas(div2);'||chr(10)),
     '           getMemoryCanvas(div2);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           getMessagesCanvas(div2);'||chr(10)),
     '           getMessagesCanvas(div2);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (div &&'||chr(10)),
     '         if (div &&'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            div.getAttribute(''data-alert'') === ''yes'')'||chr(10)),
     '            div.getAttribute(''data-alert'') === ''yes'')'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         {'||chr(10)),
     '         {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           div2.appendChild(createTable(statData));'||chr(10)),
     '           div2.appendChild(createTable(statData));'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         } else {'||chr(10)),
     '         } else {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           div2.appendChild(createSummaryTable(statData));'||chr(10)),
     '           div2.appendChild(createSummaryTable(statData));'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           aGbyBtn.style.display = ''none'';'||chr(10)),
     '           aGbyBtn.style.display = ''none'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         break;'||chr(10)),
     '         break;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       case ''cp_param'':'||chr(10)),
     '       case ''cp_param'':'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         div2.appendChild(createParamsTable(statData, '||chr(10)),
     '         div2.appendChild(createParamsTable(statData, '||chr(10));
  dbms_lob.writeappend(clb, 
     length('                                    ''CAPTURE_NAME'',''PARAMETER'',''VALUE''));'||chr(10)),
     '                                    ''CAPTURE_NAME'',''PARAMETER'',''VALUE''));'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         aGbyBtn.style.display = ''none'';'||chr(10)),
     '         aGbyBtn.style.display = ''none'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         break;'||chr(10)),
     '         break;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       case ''ap_param'':'||chr(10)),
     '       case ''ap_param'':'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         div2.appendChild(createParamsTable(statData, '||chr(10)),
     '         div2.appendChild(createParamsTable(statData, '||chr(10));
  dbms_lob.writeappend(clb, 
     length('                                    ''APPLY_NAME'',''PARAMETER'',''VALUE''));'||chr(10)),
     '                                    ''APPLY_NAME'',''PARAMETER'',''VALUE''));'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         aGbyBtn.style.display = ''none'';'||chr(10)),
     '         aGbyBtn.style.display = ''none'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         break;'||chr(10)),
     '         break;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       default:'||chr(10)),
     '       default:'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var tabObj = createTable(statData);'||chr(10)),
     '         var tabObj = createTable(statData);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         div2.appendChild(tabObj);'||chr(10)),
     '         div2.appendChild(tabObj);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (g_configRules["GROUPBY"] &&'||chr(10)),
     '         if (g_configRules["GROUPBY"] &&'||chr(10));
  dbms_lob.writeappend(clb, 
     length('             g_configRules["GROUPBY"][statName]) '||chr(10)),
     '             g_configRules["GROUPBY"][statName]) '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         {'||chr(10)),
     '         {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('/*'||chr(10)),
     '/*'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           var aEditBtn = createElement("a");'||chr(10)),
     '           var aEditBtn = createElement("a");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           aEditBtn.name = statName;'||chr(10)),
     '           aEditBtn.name = statName;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           aEditBtn.setAttribute("class","awrexp_small");'||chr(10)),
     '           aEditBtn.setAttribute("class","awrexp_small");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           aEditBtn.setAttribute("id","btn"+statName);'||chr(10)),
     '           aEditBtn.setAttribute("id","btn"+statName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           aEditBtn.setAttribute("onclick","toggleId(''table"+statName+"'','''')");'||chr(10)),
     '           aEditBtn.setAttribute("onclick","toggleId(''table"+statName+"'','''')");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            aEditBtn.innerHTML = "O";'||chr(10)),
     '            aEditBtn.innerHTML = "O";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            aEditBtn.title = "Show Original Table";'||chr(10)),
     '            aEditBtn.title = "Show Original Table";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            div.insertBefore(aEditBtn,div2);'||chr(10)),
     '            div.insertBefore(aEditBtn,div2);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('*/'||chr(10)),
     '*/'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            var gby=g_configRules["GROUPBY"][statName];'||chr(10)),
     '            var gby=g_configRules["GROUPBY"][statName];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            div2.insertBefore(createGroupByTable(statData,gby[''KEY_COLS''],'||chr(10)),
     '            div2.insertBefore(createGroupByTable(statData,gby[''KEY_COLS''],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                                                       gby[''AGG_COLS'']),'||chr(10)),
     '                                                       gby[''AGG_COLS'']),'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                             tabObj);'||chr(10)),
     '                             tabObj);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            toggleId(getId(''table'',statName),'''');'||chr(10)),
     '            toggleId(getId(''table'',statName),'''');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         } '||chr(10)),
     '         } '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         break;'||chr(10)),
     '         break;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  '||chr(10)),
     '  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (hints && hints != "NONE") {'||chr(10)),
     '       if (hints && hints != "NONE") {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var hintP = createElement("p", statName+''hint'',''awrhints'');'||chr(10)),
     '         var hintP = createElement("p", statName+''hint'',''awrhints'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         hintP.setAttribute("parent",statData.NAME);'||chr(10)),
     '         hintP.setAttribute("parent",statData.NAME);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         hintP.innerHTML = hints;'||chr(10)),
     '         hintP.innerHTML = hints;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         hintP.contentEditable = true;'||chr(10)),
     '         hintP.contentEditable = true;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (!statData[''HINTS_SHOW'']){'||chr(10)),
     '         if (!statData[''HINTS_SHOW'']){'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           hintP.style.display = "none";'||chr(10)),
     '           hintP.style.display = "none";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         div2.appendChild(hintP);'||chr(10)),
     '         div2.appendChild(hintP);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var aHintBtn = createElement("a", statName+''hintbtn'',"awrexp_hint_small");'||chr(10)),
     '         var aHintBtn = createElement("a", statName+''hintbtn'',"awrexp_hint_small");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         aHintBtn.name = statName;'||chr(10)),
     '         aHintBtn.name = statName;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         aHintBtn.setAttribute("onclick","toggleId(''"+getId(''p'',statName+''hint'')+"'')");'||chr(10)),
     '         aHintBtn.setAttribute("onclick","toggleId(''"+getId(''p'',statName+''hint'')+"'')");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var titleHint = hints.substring(0,200);'||chr(10)),
     '         var titleHint = hints.substring(0,200);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (hints.length > 200) {'||chr(10)),
     '         if (hints.length > 200) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            titleHint += "...";'||chr(10)),
     '            titleHint += "...";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         aHintBtn.title = titleHint;'||chr(10)),
     '         aHintBtn.title = titleHint;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         aHintBtn.innerHTML = "H";'||chr(10)),
     '         aHintBtn.innerHTML = "H";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         addToBtnTable(statName, aHintBtn);'||chr(10)),
     '         addToBtnTable(statName, aHintBtn);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var aTop = document.createElement("a");'||chr(10)),
     '       var aTop = document.createElement("a");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       aTop.setAttribute("class","awrbtt");'||chr(10)),
     '       aTop.setAttribute("class","awrbtt");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       aTop.setAttribute("id","btntop"+statName);'||chr(10)),
     '       aTop.setAttribute("id","btntop"+statName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       aTop.href = "#top";'||chr(10)),
     '       aTop.href = "#top";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       aTop.innerHTML = "Back to Top";'||chr(10)),
     '       aTop.innerHTML = "Back to Top";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       div2.appendChild(aTop);'||chr(10)),
     '       div2.appendChild(aTop);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       } catch (e) {'||chr(10)),
     '       } catch (e) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         alertLog(e, ''populateOneStat:''+(statData ? statData[''NAME'']:""));'||chr(10)),
     '         alertLog(e, ''populateOneStat:''+(statData ? statData[''NAME'']:""));'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   }'||chr(10)),
     '   }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   '||chr(10)),
     '   '||chr(10));
  dbms_lob.writeappend(clb, 
     length('   function setCallBacks() {'||chr(10)),
     '   function setCallBacks() {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if (g_HcData[''STATS''][''report_check'']) {'||chr(10)),
     '      if (g_HcData[''STATS''][''report_check'']) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          g_HcData[''STATS''][''report_check''][''CALLBACK''] = addStatLink;'||chr(10)),
     '          g_HcData[''STATS''][''report_check''][''CALLBACK''] = addStatLink;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          g_HcData[''STATS''][''report_check''][''CALLBACK_CTX''] = {''STAT_ID_COL'':5,'||chr(10)),
     '          g_HcData[''STATS''][''report_check''][''CALLBACK_CTX''] = {''STAT_ID_COL'':5,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                                                      ''LINK_COLS'':[5]};'||chr(10)),
     '                                                      ''LINK_COLS'':[5]};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   }'||chr(10)),
     '   }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   '||chr(10)),
     '   '||chr(10));
  dbms_lob.writeappend(clb, 
     length('   function populateStatInfo(infoId) {'||chr(10)),
     '   function populateStatInfo(infoId) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var infoarr = g_HcData[''METADATA''][''INFO''][infoId];'||chr(10)),
     '     var infoarr = g_HcData[''METADATA''][''INFO''][infoId];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (!infoarr || g_divInfo[infoId]) {'||chr(10)),
     '     if (!infoarr || g_divInfo[infoId]) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       return;'||chr(10)),
     '       return;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var lines = '''';'||chr(10)),
     '     var lines = '''';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     for (ln in infoarr) {'||chr(10)),
     '     for (ln in infoarr) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       lines += infoarr[ln] + ''<br>''; '||chr(10)),
     '       lines += infoarr[ln] + ''<br>''; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (lines) {'||chr(10)),
     '     if (lines) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var infoP = createElement("p", infoId+''_info'',''awr_info'');'||chr(10)),
     '       var infoP = createElement("p", infoId+''_info'',''awr_info'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       infoP.innerHTML = lines;'||chr(10)),
     '       infoP.innerHTML = lines;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       document.getElementById(''addtable'').appendChild(infoP);'||chr(10)),
     '       document.getElementById(''addtable'').appendChild(infoP);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       g_divInfo[infoId] = infoP;'||chr(10)),
     '       g_divInfo[infoId] = infoP;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   }'||chr(10)),
     '   }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   function showStatInfo(infoId) {'||chr(10)),
     '   function showStatInfo(infoId) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var infoP = g_divInfo[infoId];'||chr(10)),
     '     var infoP = g_divInfo[infoId];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (!infoP) {'||chr(10)),
     '     if (!infoP) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       return;'||chr(10)),
     '       return;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     infoP.style.display = "block";'||chr(10)),
     '     infoP.style.display = "block";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   }'||chr(10)),
     '   }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   function populateStats(statsData) {'||chr(10)),
     '   function populateStats(statsData) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var level1 = g_HcData[''METADATA''][''LEVEL1''];'||chr(10)),
     '     var level1 = g_HcData[''METADATA''][''LEVEL1''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var level2 = g_HcData[''METADATA''][''LEVEL2''];'||chr(10)),
     '     var level2 = g_HcData[''METADATA''][''LEVEL2''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var statsData = g_HcData[''STATS''];'||chr(10)),
     '     var statsData = g_HcData[''STATS''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     loadConfig();'||chr(10)),
     '     loadConfig();'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     setCallBacks();'||chr(10)),
     '     setCallBacks();'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     '||chr(10)),
     '     '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     for (menuItem in level1) {'||chr(10)),
     '     for (menuItem in level1) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var arr = level1[menuItem];'||chr(10)),
     '       var arr = level1[menuItem];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       for (var j = 0; j < arr.length; j++) {'||chr(10)),
     '       for (var j = 0; j < arr.length; j++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (Array.isArray(arr[j])) {'||chr(10)),
     '         if (Array.isArray(arr[j])) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           populateStatInfo(arr[j][0]);'||chr(10)),
     '           populateStatInfo(arr[j][0]);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           continue;'||chr(10)),
     '           continue;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var statName = getStatName(arr[j]);'||chr(10)),
     '         var statName = getStatName(arr[j]);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var statData = statsData[statName];'||chr(10)),
     '         var statData = statsData[statName];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (statData) {'||chr(10)),
     '         if (statData) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           g_HcData[''STATS''][statName][''MENU''] = menuItem;'||chr(10)),
     '           g_HcData[''STATS''][statName][''MENU''] = menuItem;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           var divId = getId(''div'',statData.NAME);'||chr(10)),
     '           var divId = getId(''div'',statData.NAME);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           populateOneStat(statData);'||chr(10)),
     '           populateOneStat(statData);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           if (g_divObj[divId]) {'||chr(10)),
     '           if (g_divObj[divId]) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              g_divObj[divId].setAttribute(''data-menu'',menuItem);'||chr(10)),
     '              g_divObj[divId].setAttribute(''data-menu'',menuItem);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           }'||chr(10)),
     '           }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    } '||chr(10)),
     '    } '||chr(10));
  dbms_lob.writeappend(clb, 
     length('    '||chr(10)),
     '    '||chr(10));
  dbms_lob.writeappend(clb, 
     length('    for (menuItem in level2) {'||chr(10)),
     '    for (menuItem in level2) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var arr = level2[menuItem];'||chr(10)),
     '       var arr = level2[menuItem];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       for (var j = 0; j < arr.length; j++) {'||chr(10)),
     '       for (var j = 0; j < arr.length; j++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (Array.isArray(arr[j])) {'||chr(10)),
     '         if (Array.isArray(arr[j])) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           populateStatInfo(arr[j]);'||chr(10)),
     '           populateStatInfo(arr[j]);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           continue;'||chr(10)),
     '           continue;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var statName = getStatName(arr[j]);'||chr(10)),
     '         var statName = getStatName(arr[j]);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var statData = statsData[statName];'||chr(10)),
     '         var statData = statsData[statName];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (statData) {'||chr(10)),
     '         if (statData) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            g_HcData[''STATS''][statName][''MENU''] = menuItem;'||chr(10)),
     '            g_HcData[''STATS''][statName][''MENU''] = menuItem;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            var divId = ''div''+statData.NAME;'||chr(10)),
     '            var divId = ''div''+statData.NAME;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            populateOneStat(statData);'||chr(10)),
     '            populateOneStat(statData);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            if (g_divObj[divId]) {'||chr(10)),
     '            if (g_divObj[divId]) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              g_divObj[divId].setAttribute(''data-menu'',menuItem);'||chr(10)),
     '              g_divObj[divId].setAttribute(''data-menu'',menuItem);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            }'||chr(10)),
     '            }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         } '||chr(10)),
     '         } '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    } '||chr(10)),
     '    } '||chr(10));
  dbms_lob.writeappend(clb, 
     length(' '||chr(10)),
     ' '||chr(10));
  dbms_lob.writeappend(clb, 
     length('    hideAllStats(''auto'');'||chr(10)),
     '    hideAllStats(''auto'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function showStat(statName) {'||chr(10)),
     '  function showStat(statName) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var divId = getId("div",statName);'||chr(10)),
     '    var divId = getId("div",statName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (g_divObj[divId]) {'||chr(10)),
     '    if (g_divObj[divId]) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      g_divObj[divId].style.display = "block";'||chr(10)),
     '      g_divObj[divId].style.display = "block";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  '||chr(10)),
     '  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('  '||chr(10)),
     '  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function populateMenu() {'||chr(10)),
     '  function populateMenu() {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var level1 = g_HcData[''METADATA''][''LEVEL1''];'||chr(10)),
     '    var level1 = g_HcData[''METADATA''][''LEVEL1''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var level2 = g_HcData[''METADATA''][''LEVEL2''];'||chr(10)),
     '    var level2 = g_HcData[''METADATA''][''LEVEL2''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var statsData = g_HcData[''STATS''];'||chr(10)),
     '    var statsData = g_HcData[''STATS''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var active = true;'||chr(10)),
     '    var active = true;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    for (menuItem in level1) {'||chr(10)),
     '    for (menuItem in level1) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var arr = level1[menuItem];'||chr(10)),
     '       var arr = level1[menuItem];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       for (var j = 0; j < arr.length; j++) {'||chr(10)),
     '       for (var j = 0; j < arr.length; j++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (Array.isArray(arr[j])) {'||chr(10)),
     '         if (Array.isArray(arr[j])) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           continue;'||chr(10)),
     '           continue;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var statName = getStatName(arr[j]);'||chr(10)),
     '         var statName = getStatName(arr[j]);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var divId = getId("div",statName);'||chr(10)),
     '         var divId = getId("div",statName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         addMenuItem(menuItem, true);'||chr(10)),
     '         addMenuItem(menuItem, true);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (document.getElementById(divId)) {'||chr(10)),
     '         if (document.getElementById(divId)) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           if (g_menuElements[menuItem]) {'||chr(10)),
     '           if (g_menuElements[menuItem]) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('             g_menuElements[menuItem].style.display = ''block'';'||chr(10)),
     '             g_menuElements[menuItem].style.display = ''block'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           }'||chr(10)),
     '           }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           if (active) {'||chr(10)),
     '           if (active) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('             showMenuItem(menuItem);'||chr(10)),
     '             showMenuItem(menuItem);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           }'||chr(10)),
     '           }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           active = false;'||chr(10)),
     '           active = false;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           break;'||chr(10)),
     '           break;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    } '||chr(10)),
     '    } '||chr(10));
  dbms_lob.writeappend(clb, 
     length('    for (menuItem in level2) {'||chr(10)),
     '    for (menuItem in level2) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var arr = level2[menuItem];'||chr(10)),
     '       var arr = level2[menuItem];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var arrMenu = menuItem.split('':'');'||chr(10)),
     '       var arrMenu = menuItem.split('':'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var parentMenuItem = arrMenu[0];'||chr(10)),
     '       var parentMenuItem = arrMenu[0];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       for (var j = 0; j < arr.length; j++) {'||chr(10)),
     '       for (var j = 0; j < arr.length; j++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (Array.isArray(arr[j])) {'||chr(10)),
     '         if (Array.isArray(arr[j])) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           continue;'||chr(10)),
     '           continue;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var statName = getStatName(arr[j]);'||chr(10)),
     '         var statName = getStatName(arr[j]);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var divId = getId("div",statName);'||chr(10)),
     '         var divId = getId("div",statName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (document.getElementById(divId)) {'||chr(10)),
     '         if (document.getElementById(divId)) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           addMenuItem(menuItem, true);'||chr(10)),
     '           addMenuItem(menuItem, true);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           if (g_menuElements[menuItem]) {'||chr(10)),
     '           if (g_menuElements[menuItem]) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('             if (g_menuElements[parentMenuItem]) {'||chr(10)),
     '             if (g_menuElements[parentMenuItem]) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('               g_menuElements[parentMenuItem].style.display = ''block'';'||chr(10)),
     '               g_menuElements[parentMenuItem].style.display = ''block'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('               g_menuElements[menuItem].style.display = ''block'';'||chr(10)),
     '               g_menuElements[menuItem].style.display = ''block'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('             } '||chr(10)),
     '             } '||chr(10));
  dbms_lob.writeappend(clb, 
     length('           }'||chr(10)),
     '           }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           break;'||chr(10)),
     '           break;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       populateConfig();'||chr(10)),
     '       populateConfig();'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    } '||chr(10)),
     '    } '||chr(10));
  dbms_lob.writeappend(clb, 
     length('    addMenuItem("REPORT-MAP:HINTS/DESCRIPTION",false);'||chr(10)),
     '    addMenuItem("REPORT-MAP:HINTS/DESCRIPTION",false);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    '||chr(10)),
     '    '||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (alerts().length) {'||chr(10)),
     '    if (alerts().length) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      addMenuItem("REPORT-MAP:ALERTS",false);'||chr(10)),
     '      addMenuItem("REPORT-MAP:ALERTS",false);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (truncates().length) {'||chr(10)),
     '    if (truncates().length) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      addMenuItem("REPORT-MAP:TRUNCATES",false);'||chr(10)),
     '      addMenuItem("REPORT-MAP:TRUNCATES",false);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    } '||chr(10)),
     '    } '||chr(10));
  dbms_lob.writeappend(clb, 
     length('    addMenuItem("REPORT-MAP:CONFIG",false);'||chr(10)),
     '    addMenuItem("REPORT-MAP:CONFIG",false);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    addMenuItem("REPORT-MAP",false);'||chr(10)),
     '    addMenuItem("REPORT-MAP",false);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    document'||chr(10)),
     '    document'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      .getElementById(''fileInput'')'||chr(10)),
     '      .getElementById(''fileInput'')'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      .addEventListener( ''change'','||chr(10)),
     '      .addEventListener( ''change'','||chr(10));
  dbms_lob.writeappend(clb, 
     length('        function () {'||chr(10)),
     '        function () {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            var fr = new FileReader();'||chr(10)),
     '            var fr = new FileReader();'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            fr.onload = function () {'||chr(10)),
     '            fr.onload = function () {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                g_configRules = parseJSON(this.result, ''config reload'');'||chr(10)),
     '                g_configRules = parseJSON(this.result, ''config reload'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                removeDivs();      '||chr(10)),
     '                removeDivs();      '||chr(10));
  dbms_lob.writeappend(clb, 
     length('                processHCJSON();'||chr(10)),
     '                processHCJSON();'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                document.getElementById(''aREPORT-MAP:CONFIG'').click();'||chr(10)),
     '                document.getElementById(''aREPORT-MAP:CONFIG'').click();'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   document.getElementById("btnApplyRules").setAttribute(''class'',''awrexpbtnhide'');'||chr(10)),
     '   document.getElementById("btnApplyRules").setAttribute(''class'',''awrexpbtnhide'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            };'||chr(10)),
     '            };'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            fr.readAsText(this.files[0]);'||chr(10)),
     '            fr.readAsText(this.files[0]);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        }'||chr(10)),
     '        }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    );'||chr(10)),
     '    );'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function truncates() {'||chr(10)),
     '  function truncates() {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var truncArr = [];'||chr(10)),
     '    var truncArr = [];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    for (divId in g_divObj) {'||chr(10)),
     '    for (divId in g_divObj) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var isTrunc = g_divObj[divId].getAttribute(''data-truncated'');'||chr(10)),
     '      var isTrunc = g_divObj[divId].getAttribute(''data-truncated'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if (isTrunc) {'||chr(10)),
     '      if (isTrunc) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         truncArr.push(g_divObj[divId]);'||chr(10)),
     '         truncArr.push(g_divObj[divId]);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    return truncArr;'||chr(10)),
     '    return truncArr;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function alerts() {'||chr(10)),
     '  function alerts() {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var alertArr = [];'||chr(10)),
     '    var alertArr = [];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    for (divId in  g_divObj) {'||chr(10)),
     '    for (divId in  g_divObj) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var isAlert = g_divObj[divId].getAttribute(''data-alert'');'||chr(10)),
     '      var isAlert = g_divObj[divId].getAttribute(''data-alert'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if (isAlert) {'||chr(10)),
     '      if (isAlert) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         alertArr.push(g_divObj[divId]);'||chr(10)),
     '         alertArr.push(g_divObj[divId]);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    return alertArr;'||chr(10)),
     '    return alertArr;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function setTag(obj, tag) {'||chr(10)),
     '  function setTag(obj, tag) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var tags = obj.getAttribute(''data-tags'');'||chr(10)),
     '     var tags = obj.getAttribute(''data-tags'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (!tags) {'||chr(10)),
     '     if (!tags) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       tags= [];'||chr(10)),
     '       tags= [];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     for (var i = 0; i < tags.length; i++) {'||chr(10)),
     '     for (var i = 0; i < tags.length; i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        if (tags[i] === tag)'||chr(10)),
     '        if (tags[i] === tag)'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          return;'||chr(10)),
     '          return;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     tags.push(tag);'||chr(10)),
     '     tags.push(tag);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     obj.setAttribute(''data-tags'',tags);'||chr(10)),
     '     obj.setAttribute(''data-tags'',tags);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function hasTag(obj, tag) {'||chr(10)),
     '  function hasTag(obj, tag) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var tags = obj.getAttribute(''data-tags'');'||chr(10)),
     '     var tags = obj.getAttribute(''data-tags'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (!tags) {'||chr(10)),
     '     if (!tags) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       return false;'||chr(10)),
     '       return false;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     for (var i = 0; i < tags.length; i++) {'||chr(10)),
     '     for (var i = 0; i < tags.length; i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        if (tags[i] === tag)'||chr(10)),
     '        if (tags[i] === tag)'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          return true;'||chr(10)),
     '          return true;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     return false;'||chr(10)),
     '     return false;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  '||chr(10)),
     '  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function addMenuItem(menuItem, auto) {'||chr(10)),
     '  function addMenuItem(menuItem, auto) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    try {'||chr(10)),
     '    try {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var menu = document.getElementById("menu");'||chr(10)),
     '    var menu = document.getElementById("menu");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var inMenuItem = menuItem;'||chr(10)),
     '    var inMenuItem = menuItem;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var parentMenuItem;'||chr(10)),
     '    var parentMenuItem;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var parentMenuEle;'||chr(10)),
     '    var parentMenuEle;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var arrMenu = menuItem.split('':'');    '||chr(10)),
     '    var arrMenu = menuItem.split('':'');    '||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (arrMenu.length > 1) {'||chr(10)),
     '    if (arrMenu.length > 1) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      menuItem = arrMenu[1];'||chr(10)),
     '      menuItem = arrMenu[1];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      parentMenuItem = arrMenu[0];'||chr(10)),
     '      parentMenuItem = arrMenu[0];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      parentMenuEle = document.getElementById("li"+parentMenuItem);'||chr(10)),
     '      parentMenuEle = document.getElementById("li"+parentMenuItem);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if (!parentMenuEle) {'||chr(10)),
     '      if (!parentMenuEle) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        addMenuItem(parentMenuItem, auto);'||chr(10)),
     '        addMenuItem(parentMenuItem, auto);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        parentMenuEle = document.getElementById("li"+parentMenuItem);'||chr(10)),
     '        parentMenuEle = document.getElementById("li"+parentMenuItem);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        if (!parentMenuEle) {'||chr(10)),
     '        if (!parentMenuEle) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          return;'||chr(10)),
     '          return;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        }'||chr(10)),
     '        }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (g_configRules) {'||chr(10)),
     '    if (g_configRules) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if (g_configRules["MENU"] && g_configRules["MENU"][inMenuItem]) {'||chr(10)),
     '      if (g_configRules["MENU"] && g_configRules["MENU"][inMenuItem]) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        if (g_configRules["MENU"][inMenuItem]["exclude"]) {'||chr(10)),
     '        if (g_configRules["MENU"][inMenuItem]["exclude"]) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          return;'||chr(10)),
     '          return;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        }'||chr(10)),
     '        }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (document.getElementById("li"+inMenuItem)) {'||chr(10)),
     '    if (document.getElementById("li"+inMenuItem)) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      return;'||chr(10)),
     '      return;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    g_loadedMenuItems.push(inMenuItem);'||chr(10)),
     '    g_loadedMenuItems.push(inMenuItem);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var li = createElement("li",inMenuItem,"");'||chr(10)),
     '    var li = createElement("li",inMenuItem,"");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var menuId = getId("li",inMenuItem);'||chr(10)),
     '    var menuId = getId("li",inMenuItem);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var txt = document.createElement("a");'||chr(10)),
     '    var txt = document.createElement("a");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    li.id = menuId;'||chr(10)),
     '    li.id = menuId;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (auto) {'||chr(10)),
     '    if (auto) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      li.style.display = ''none'';'||chr(10)),
     '      li.style.display = ''none'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    txt.id = "a"+inMenuItem;'||chr(10)),
     '    txt.id = "a"+inMenuItem;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    txt.innerHTML = menuItem;'||chr(10)),
     '    txt.innerHTML = menuItem;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    txt.onclick = function() { showMenuItem(inMenuItem) };'||chr(10)),
     '    txt.onclick = function() { showMenuItem(inMenuItem) };'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    txt.href = ''#menu_''+inMenuItem;'||chr(10)),
     '    txt.href = ''#menu_''+inMenuItem;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  '||chr(10)),
     '  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (parentMenuItem) {'||chr(10)),
     '    if (parentMenuItem) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      li.setAttribute("menu-level","L2");'||chr(10)),
     '      li.setAttribute("menu-level","L2");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      li.setAttribute("menu-parent",parentMenuItem);'||chr(10)),
     '      li.setAttribute("menu-parent",parentMenuItem);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    } else {'||chr(10)),
     '    } else {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      li.setAttribute("menu-level","L1");'||chr(10)),
     '      li.setAttribute("menu-level","L1");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (auto) {'||chr(10)),
     '    if (auto) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      li.setAttribute("data-auto", "auto");'||chr(10)),
     '      li.setAttribute("data-auto", "auto");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    } else {'||chr(10)),
     '    } else {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      li.setAttribute("data-auto", "manual");'||chr(10)),
     '      li.setAttribute("data-auto", "manual");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      g_manualMenu[inMenuItem] = 1;'||chr(10)),
     '      g_manualMenu[inMenuItem] = 1;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    li.appendChild(txt);'||chr(10)),
     '    li.appendChild(txt);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    '||chr(10)),
     '    '||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (parentMenuItem) {'||chr(10)),
     '    if (parentMenuItem) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var subMenuEle = document.getElementById("ul"+parentMenuItem);'||chr(10)),
     '      var subMenuEle = document.getElementById("ul"+parentMenuItem);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if (subMenuEle) {'||chr(10)),
     '      if (subMenuEle) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        subMenuEle.appendChild(li);'||chr(10)),
     '        subMenuEle.appendChild(li);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      } else {'||chr(10)),
     '      } else {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var ul = document.createElement(''ul'');'||chr(10)),
     '        var ul = document.createElement(''ul'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        ul.setAttribute("class","sub-menu");'||chr(10)),
     '        ul.setAttribute("class","sub-menu");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        ul.id = "ul"+parentMenuItem;'||chr(10)),
     '        ul.id = "ul"+parentMenuItem;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        ul.appendChild(li);'||chr(10)),
     '        ul.appendChild(li);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        parentMenuEle.appendChild(ul);'||chr(10)),
     '        parentMenuEle.appendChild(ul);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var parentTxtEle = document.getElementById("a"+parentMenuItem);'||chr(10)),
     '        var parentTxtEle = document.getElementById("a"+parentMenuItem);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        parentTxtEle.innerHTML += ''<span class="arrow">&#9660;</span> ''; '||chr(10)),
     '        parentTxtEle.innerHTML += ''<span class="arrow">&#9660;</span> ''; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    } else {'||chr(10)),
     '    } else {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      menu.appendChild(li);'||chr(10)),
     '      menu.appendChild(li);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    g_menuElements[inMenuItem] = li;'||chr(10)),
     '    g_menuElements[inMenuItem] = li;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    } catch(e) {'||chr(10)),
     '    } catch(e) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      alertLog(e,''addMenuItem:''+inMenuItem+'':''+auto);'||chr(10)),
     '      alertLog(e,''addMenuItem:''+inMenuItem+'':''+auto);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function getStatName(num) {'||chr(10)),
     '  function getStatName(num) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     '||chr(10)),
     '     '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     return num;'||chr(10)),
     '     return num;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function highlightMenuItem(menuItem) {'||chr(10)),
     '  function highlightMenuItem(menuItem) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var menu = document.getElementById("menu");'||chr(10)),
     '    var menu = document.getElementById("menu");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var nodes = menu.childNodes;'||chr(10)),
     '    var nodes = menu.childNodes;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    for(var i = 0 ; i < nodes.length; i++) {'||chr(10)),
     '    for(var i = 0 ; i < nodes.length; i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (nodes[i].nodeName === "LI") {'||chr(10)),
     '     if (nodes[i].nodeName === "LI") {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       nodes[i].setAttribute("class","inactive");'||chr(10)),
     '       nodes[i].setAttribute("class","inactive");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var newItem = document.getElementById("li"+menuItem);'||chr(10)),
     '    var newItem = document.getElementById("li"+menuItem);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (newItem) {'||chr(10)),
     '    if (newItem) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      newItem.setAttribute("class","active");'||chr(10)),
     '      newItem.setAttribute("class","active");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (newItem.getAttribute(''menu-level'') === ''L2'') {'||chr(10)),
     '     if (newItem.getAttribute(''menu-level'') === ''L2'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var parentItem = newItem.getAttribute("menu-parent");'||chr(10)),
     '        var parentItem = newItem.getAttribute("menu-parent");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var parentItemEle = document.getElementById("li"+parentItem);'||chr(10)),
     '        var parentItemEle = document.getElementById("li"+parentItem);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        if (parentItemEle) {'||chr(10)),
     '        if (parentItemEle) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          parentItemEle.setAttribute("class","active");'||chr(10)),
     '          parentItemEle.setAttribute("class","active");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        } '||chr(10)),
     '        } '||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function showMenuItem(menuItem) {'||chr(10)),
     '  function showMenuItem(menuItem) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    try {'||chr(10)),
     '    try {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var auto = g_menuElements[menuItem].getAttribute("data-auto");'||chr(10)),
     '      var auto = g_menuElements[menuItem].getAttribute("data-auto");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      highlightMenuItem(menuItem);'||chr(10)),
     '      highlightMenuItem(menuItem);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      hideAllStats(auto);'||chr(10)),
     '      hideAllStats(auto);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var current_loc = menuItem.replace('':'','' > '');'||chr(10)),
     '      var current_loc = menuItem.replace('':'','' > '');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      document.getElementById(''current_loc'').innerHTML="MENU: "+current_loc;'||chr(10)),
     '      document.getElementById(''current_loc'').innerHTML="MENU: "+current_loc;'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' '||chr(10)),
     ' '||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if (auto === ''auto'') {'||chr(10)),
     '      if (auto === ''auto'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        showAutoMenuItem(menuItem);'||chr(10)),
     '        showAutoMenuItem(menuItem);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      } else {'||chr(10)),
     '      } else {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        showManualMenuItem(menuItem);'||chr(10)),
     '        showManualMenuItem(menuItem);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    } catch(e) {'||chr(10)),
     '    } catch(e) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      alertLog(e, "showMenuItem:"+menuItem);'||chr(10)),
     '      alertLog(e, "showMenuItem:"+menuItem);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function showManualMenuItem(menuItem) {'||chr(10)),
     '  function showManualMenuItem(menuItem) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     switch(menuItem) {'||chr(10)),
     '     switch(menuItem) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     case "REPORT-MAP:CONFIG":'||chr(10)),
     '     case "REPORT-MAP:CONFIG":'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      showStat(''CONFIG'');'||chr(10)),
     '      showStat(''CONFIG'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      document.getElementById("btnConfig").style.display = "block";'||chr(10)),
     '      document.getElementById("btnConfig").style.display = "block";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      break;'||chr(10)),
     '      break;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     case "REPORT-MAP:HINTS/DESCRIPTION":'||chr(10)),
     '     case "REPORT-MAP:HINTS/DESCRIPTION":'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      document.getElementById("btnAll").style.display = "block";'||chr(10)),
     '      document.getElementById("btnAll").style.display = "block";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var hints = document.getElementsByTagName("p");'||chr(10)),
     '      var hints = document.getElementsByTagName("p");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      for (var i = 0 ; i < hints.length; i++) {'||chr(10)),
     '      for (var i = 0 ; i < hints.length; i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var hintClass = hints[i].getAttribute("class");'||chr(10)),
     '        var hintClass = hints[i].getAttribute("class");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var hintParent = hints[i].getAttribute("parent");'||chr(10)),
     '        var hintParent = hints[i].getAttribute("parent");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        if (hintClass === ''awrhints'' || hintClass === ''awrdesc'') {'||chr(10)),
     '        if (hintClass === ''awrhints'' || hintClass === ''awrdesc'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          showStat(hintParent);'||chr(10)),
     '          showStat(hintParent);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        }'||chr(10)),
     '        }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      break;'||chr(10)),
     '      break;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     case "REPORT-MAP:ALERTS":'||chr(10)),
     '     case "REPORT-MAP:ALERTS":'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      document.getElementById("btnAll").style.display = "block";'||chr(10)),
     '      document.getElementById("btnAll").style.display = "block";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var alertArr = alerts();'||chr(10)),
     '      var alertArr = alerts();'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      for (var i = 0 ; i < alertArr.length; i++) {'||chr(10)),
     '      for (var i = 0 ; i < alertArr.length; i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          var statName = alertArr[i].getAttribute("data-name");'||chr(10)),
     '          var statName = alertArr[i].getAttribute("data-name");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          showStat(statName);'||chr(10)),
     '          showStat(statName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      break;'||chr(10)),
     '      break;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     case "REPORT-MAP:TRUNCATES":'||chr(10)),
     '     case "REPORT-MAP:TRUNCATES":'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      document.getElementById("btnAll").style.display = "block";'||chr(10)),
     '      document.getElementById("btnAll").style.display = "block";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var truncArr = truncates();'||chr(10)),
     '      var truncArr = truncates();'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      for (var i = 0 ; i < truncArr.length; i++) {'||chr(10)),
     '      for (var i = 0 ; i < truncArr.length; i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          var statName = truncArr[i].getAttribute("data-name");'||chr(10)),
     '          var statName = truncArr[i].getAttribute("data-name");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          showStat(statName);'||chr(10)),
     '          showStat(statName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      break;'||chr(10)),
     '      break;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     case ''REPORT-MAP'':'||chr(10)),
     '     case ''REPORT-MAP'':'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      document.getElementById("btnAll").style.display = "block";'||chr(10)),
     '      document.getElementById("btnAll").style.display = "block";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var statName = ''report_map'';'||chr(10)),
     '      var statName = ''report_map'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var rptData = g_HcData[''STATS''][statName];'||chr(10)),
     '      var rptData = g_HcData[''STATS''][statName];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      g_HcData[''STATS''][statName][''MENU''] = ''REPORT-MAP'';'||chr(10)),
     '      g_HcData[''STATS''][statName][''MENU''] = ''REPORT-MAP'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var divId = getId(''div'',statName);'||chr(10)),
     '      var divId = getId(''div'',statName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var rptDiv = g_divObj[divId];'||chr(10)),
     '      var rptDiv = g_divObj[divId];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if (!rptDiv) {'||chr(10)),
     '      if (!rptDiv) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          populateOneStat(rptData);'||chr(10)),
     '          populateOneStat(rptData);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          if (g_divObj[divId]) {'||chr(10)),
     '          if (g_divObj[divId]) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            setTag(g_divObj[divId],''REPORT-MAP'');'||chr(10)),
     '            setTag(g_divObj[divId],''REPORT-MAP'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          }'||chr(10)),
     '          }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      showStat(statName);'||chr(10)),
     '      showStat(statName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      break;'||chr(10)),
     '      break;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     case "SEARCH":'||chr(10)),
     '     case "SEARCH":'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      document.getElementById("btnAll").style.display = "block";'||chr(10)),
     '      document.getElementById("btnAll").style.display = "block";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var searchArr = searchStats();'||chr(10)),
     '      var searchArr = searchStats();'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if(!searchArr)'||chr(10)),
     '      if(!searchArr)'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        return;'||chr(10)),
     '        return;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      for (var i = 0 ; i < searchArr.length; i++) {'||chr(10)),
     '      for (var i = 0 ; i < searchArr.length; i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          var statName = searchArr[i];'||chr(10)),
     '          var statName = searchArr[i];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          showStat(statName);'||chr(10)),
     '          showStat(statName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      break;'||chr(10)),
     '      break;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     case "JS-ERRORS":'||chr(10)),
     '     case "JS-ERRORS":'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      document.getElementById("btnAll").style.display = "block";'||chr(10)),
     '      document.getElementById("btnAll").style.display = "block";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var divId = getId(''div'',''js_errors'');'||chr(10)),
     '         var divId = getId(''div'',''js_errors'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         populateOneStat(g_HcData[''STATS''][''js_errors'']);'||chr(10)),
     '         populateOneStat(g_HcData[''STATS''][''js_errors'']);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (g_divObj[divId]) {'||chr(10)),
     '         if (g_divObj[divId]) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            g_divObj[divId].setAttribute(''data-menu'',''JS-ERRORS'');'||chr(10)),
     '            g_divObj[divId].setAttribute(''data-menu'',''JS-ERRORS'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         showStat(''js_errors'');'||chr(10)),
     '         showStat(''js_errors'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      break;'||chr(10)),
     '      break;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function showAutoMenuItem(menuItem) {'||chr(10)),
     '  function showAutoMenuItem(menuItem) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var level1 = g_HcData[''METADATA''][''LEVEL1''];'||chr(10)),
     '    var level1 = g_HcData[''METADATA''][''LEVEL1''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var level2 = g_HcData[''METADATA''][''LEVEL2''];'||chr(10)),
     '    var level2 = g_HcData[''METADATA''][''LEVEL2''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var statsData = g_HcData[''STATS''];'||chr(10)),
     '    var statsData = g_HcData[''STATS''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var arr ;'||chr(10)),
     '    var arr ;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var menuElement = document.getElementById("li"+menuItem);'||chr(10)),
     '    var menuElement = document.getElementById("li"+menuItem);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var menuItemLvl = menuElement.getAttribute(''menu-level'');'||chr(10)),
     '    var menuItemLvl = menuElement.getAttribute(''menu-level'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    arr = level1[menuItem];'||chr(10)),
     '    arr = level1[menuItem];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (!arr) {'||chr(10)),
     '    if (!arr) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      arr = level2[menuItem];'||chr(10)),
     '      arr = level2[menuItem];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (arr) {'||chr(10)),
     '    if (arr) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      for(var i = 0 ; i < arr.length; i++) {'||chr(10)),
     '      for(var i = 0 ; i < arr.length; i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         if (Array.isArray(arr[i])) {'||chr(10)),
     '         if (Array.isArray(arr[i])) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           populateStatInfo(arr[i][0]);'||chr(10)),
     '           populateStatInfo(arr[i][0]);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           showStatInfo(arr[i][0]);'||chr(10)),
     '           showStatInfo(arr[i][0]);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           continue;'||chr(10)),
     '           continue;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var statName = getStatName(arr[i]);'||chr(10)),
     '        var statName = getStatName(arr[i]);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        if (statsData[statName]) {'||chr(10)),
     '        if (statsData[statName]) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          populateOneStat(statsData[statName]);'||chr(10)),
     '          populateOneStat(statsData[statName]);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          showStat(statName);'||chr(10)),
     '          showStat(statName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        }'||chr(10)),
     '        }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function showAllStats() {'||chr(10)),
     '  function showAllStats() {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    for (i in g_divObj) {'||chr(10)),
     '    for (i in g_divObj) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      g_divObj[i].style.display = "block";'||chr(10)),
     '      g_divObj[i].style.display = "block";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function hideAllStats(auto) {'||chr(10)),
     '  function hideAllStats(auto) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    for (t in g_divInfo) {'||chr(10)),
     '    for (t in g_divInfo) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      g_divInfo[t].style.display = "none";'||chr(10)),
     '      g_divInfo[t].style.display = "none";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    for (i in g_divObj) {'||chr(10)),
     '    for (i in g_divObj) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      g_divObj[i].style.display = "none";'||chr(10)),
     '      g_divObj[i].style.display = "none";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (auto === "manual") {'||chr(10)),
     '    if (auto === "manual") {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      document.getElementById("btnAll").style.display = "none";'||chr(10)),
     '      document.getElementById("btnAll").style.display = "none";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      document.getElementById("btnConfig").style.display = "none";'||chr(10)),
     '      document.getElementById("btnConfig").style.display = "none";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    } else {'||chr(10)),
     '    } else {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      document.getElementById("btnAll").style.display = "block";'||chr(10)),
     '      document.getElementById("btnAll").style.display = "block";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      document.getElementById("btnConfig").style.display = "none";'||chr(10)),
     '      document.getElementById("btnConfig").style.display = "none";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function hideDiv(statName) {'||chr(10)),
     '  function hideDiv(statName) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var tables_header = getObj(getId("h3",statName+"_tabs"));'||chr(10)),
     '    var tables_header = getObj(getId("h3",statName+"_tabs"));'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var rows_header = getObj(getId("h3",statName+"_rows"));'||chr(10)),
     '    var rows_header = getObj(getId("h3",statName+"_rows"));'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var btn = getObj("a",statName+"collapse");'||chr(10)),
     '    var btn = getObj("a",statName+"collapse");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    getObj("div",statName+"div2").style.display="none";'||chr(10)),
     '    getObj("div",statName+"div2").style.display="none";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    btn.innerHTML = "+" ;'||chr(10)),
     '    btn.innerHTML = "+" ;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (tables_header) {'||chr(10)),
     '    if (tables_header) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      tables_header.setAttribute(''class'',  ''awr_tabs_hide'') ;'||chr(10)),
     '      tables_header.setAttribute(''class'',  ''awr_tabs_hide'') ;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (rows_header) {'||chr(10)),
     '    if (rows_header) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      rows_header.setAttribute(''class'',  ''awr_rows'') ;'||chr(10)),
     '      rows_header.setAttribute(''class'',  ''awr_rows'') ;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function showDiv(statName) {'||chr(10)),
     '  function showDiv(statName) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var tables_header = getObj(getId("h3",statName+"_tabs"));'||chr(10)),
     '    var tables_header = getObj(getId("h3",statName+"_tabs"));'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var rows_header = getObj(getId("h3",statName+"_rows"));'||chr(10)),
     '    var rows_header = getObj(getId("h3",statName+"_rows"));'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var btn = getObj("a",statName+"collapse");'||chr(10)),
     '    var btn = getObj("a",statName+"collapse");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    getObj("div",statName+"div2").style.display="block";'||chr(10)),
     '    getObj("div",statName+"div2").style.display="block";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    btn.innerHTML = "-" ;'||chr(10)),
     '    btn.innerHTML = "-" ;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (tables_header) {'||chr(10)),
     '    if (tables_header) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      tables_header.setAttribute(''class'',  ''awr_tabs'') ;'||chr(10)),
     '      tables_header.setAttribute(''class'',  ''awr_tabs'') ;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (rows_header) {'||chr(10)),
     '    if (rows_header) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      rows_header.setAttribute(''class'',  ''awr_rows_hide'') ;'||chr(10)),
     '      rows_header.setAttribute(''class'',  ''awr_rows_hide'') ;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function toggleRowClass(rowObj) {'||chr(10)),
     '  function toggleRowClass(rowObj) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var cls = rowObj.getAttribute(''class'');'||chr(10)),
     '    var cls = rowObj.getAttribute(''class'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (cls === ''awrnc'') {'||chr(10)),
     '    if (cls === ''awrnc'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      cls = ''awrc'';'||chr(10)),
     '      cls = ''awrc'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    } else {'||chr(10)),
     '    } else {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      cls = ''awrnc'';'||chr(10)),
     '      cls = ''awrnc'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    rowObj.setAttribute(''class'',cls);'||chr(10)),
     '    rowObj.setAttribute(''class'',cls);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function showId(eleId, txtBtnId) {'||chr(10)),
     '  function showId(eleId, txtBtnId) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var ele = document.getElementById(eleId);'||chr(10)),
     '    var ele = document.getElementById(eleId);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var style = ele.style.display;'||chr(10)),
     '    var style = ele.style.display;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var txt = txtBtnId ? document.getElementById(txtBtnId) : "";'||chr(10)),
     '    var txt = txtBtnId ? document.getElementById(txtBtnId) : "";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    ele.style.display = ''block''; '||chr(10)),
     '    ele.style.display = ''block''; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (txt)'||chr(10)),
     '    if (txt)'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      txt.innerHTML="-";'||chr(10)),
     '      txt.innerHTML="-";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function toggleId(eleId, txtBtnId) {'||chr(10)),
     '  function toggleId(eleId, txtBtnId) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var ele = document.getElementById(eleId);'||chr(10)),
     '    var ele = document.getElementById(eleId);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var style = ele.style.display;'||chr(10)),
     '    var style = ele.style.display;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var txt = txtBtnId ? document.getElementById(txtBtnId) : "";'||chr(10)),
     '    var txt = txtBtnId ? document.getElementById(txtBtnId) : "";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    '||chr(10)),
     '    '||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (style == ''none'') {'||chr(10)),
     '    if (style == ''none'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      ele.style.display = ''block''; '||chr(10)),
     '      ele.style.display = ''block''; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if (txt)'||chr(10)),
     '      if (txt)'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        txt.innerHTML="-";'||chr(10)),
     '        txt.innerHTML="-";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    } else {'||chr(10)),
     '    } else {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      ele.style.display = ''none''; '||chr(10)),
     '      ele.style.display = ''none''; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if (txt)'||chr(10)),
     '      if (txt)'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        txt.innerHTML="+";'||chr(10)),
     '        txt.innerHTML="+";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function toggleDiv(statName) {'||chr(10)),
     '  function toggleDiv(statName) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var style = getObj("div",statName+"div2").style.display;'||chr(10)),
     '    var style = getObj("div",statName+"div2").style.display;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var tables_header = getObj("h3",statName+"_tabs");'||chr(10)),
     '    var tables_header = getObj("h3",statName+"_tabs");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var rows_header = getObj("h3",statName+"_rows");'||chr(10)),
     '    var rows_header = getObj("h3",statName+"_rows");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (style == ''none'') {'||chr(10)),
     '    if (style == ''none'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      showDiv(statName);'||chr(10)),
     '      showDiv(statName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if (tables_header) {'||chr(10)),
     '      if (tables_header) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       tables_header.setAttribute(''class'',  ''awr_tabs_hide'') ; '||chr(10)),
     '       tables_header.setAttribute(''class'',  ''awr_tabs_hide'') ; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if (rows_header) {'||chr(10)),
     '      if (rows_header) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       rows_header.setAttribute(''class'',  ''awr_rows'') ; '||chr(10)),
     '       rows_header.setAttribute(''class'',  ''awr_rows'') ; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    } else {'||chr(10)),
     '    } else {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      hideDiv(statName);'||chr(10)),
     '      hideDiv(statName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if (tables_header) {'||chr(10)),
     '      if (tables_header) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       tables_header.setAttribute(''class'',  ''awr_tabs'') ; '||chr(10)),
     '       tables_header.setAttribute(''class'',  ''awr_tabs'') ; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if (rows_header) {'||chr(10)),
     '      if (rows_header) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       rows_header.setAttribute(''class'',  ''awr_rows_hide'') ; '||chr(10)),
     '       rows_header.setAttribute(''class'',  ''awr_rows_hide'') ; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function setWindowProperties() {'||chr(10)),
     '  function setWindowProperties() {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var ver, title, gn, gn1, inst1, inst, beg_rep_time;'||chr(10)),
     '    var ver, title, gn, gn1, inst1, inst, beg_rep_time;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (g_HcData[''INFO'']) {'||chr(10)),
     '    if (g_HcData[''INFO'']) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        ver = g_HcData[''INFO''][''VERSION''];'||chr(10)),
     '        ver = g_HcData[''INFO''][''VERSION''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        gn = g_HcData[''INFO''][''GLOBAL_NAME'']; '||chr(10)),
     '        gn = g_HcData[''INFO''][''GLOBAL_NAME'']; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('        inst = g_HcData[''INFO''][''INSTANCE_NAME''];'||chr(10)),
     '        inst = g_HcData[''INFO''][''INSTANCE_NAME''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        host = g_HcData[''INFO''][''HOST_NAME''];'||chr(10)),
     '        host = g_HcData[''INFO''][''HOST_NAME''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        beg_rep_time = g_HcData[''INFO''][''BEGIN_REPORT_TIME''];'||chr(10)),
     '        beg_rep_time = g_HcData[''INFO''][''BEGIN_REPORT_TIME''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        duration = Math.ceil(g_HcData[''INFO''][''DURATION'']/1000);'||chr(10)),
     '        duration = Math.ceil(g_HcData[''INFO''][''DURATION'']/1000);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    } '||chr(10)),
     '    } '||chr(10));
  dbms_lob.writeappend(clb, 
     length('    title = ''Oracle GoldenGate Integrated Extract/Replicat Health Check'';'||chr(10)),
     '    title = ''Oracle GoldenGate Integrated Extract/Replicat Health Check'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    inst1 = ''Instance - ''+inst;'||chr(10)),
     '    inst1 = ''Instance - ''+inst;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    gn1 = ''Database - ''+gn;'||chr(10)),
     '    gn1 = ''Database - ''+gn;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    host1 = ''Host - ''+host;'||chr(10)),
     '    host1 = ''Host - ''+host;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    duration1 = ''(''+duration+'' secs)'';'||chr(10)),
     '    duration1 = ''(''+duration+'' secs)'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    document.title = ''OGG HC:'' + inst +''-''+ beg_rep_time;'||chr(10)),
     '    document.title = ''OGG HC:'' + inst +''-''+ beg_rep_time;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                        '||chr(10)),
     '                        '||chr(10));
  dbms_lob.writeappend(clb, 
     length('    document.getElementById(''hc_title_h1'').innerHTML = title;'||chr(10)),
     '    document.getElementById(''hc_title_h1'').innerHTML = title;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    document.getElementById(''hc_title_h3'').innerHTML ='||chr(10)),
     '    document.getElementById(''hc_title_h3'').innerHTML ='||chr(10));
  dbms_lob.writeappend(clb, 
     length('                 gn1 + '' | ''+ inst1+'' | ''+host1+'' | ''+beg_rep_time+'' ''+duration1;'||chr(10)),
     '                 gn1 + '' | ''+ inst1+'' | ''+host1+'' | ''+beg_rep_time+'' ''+duration1;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    window.onhashchange=function(){gotoAnchor(window.location.href)};'||chr(10)),
     '    window.onhashchange=function(){gotoAnchor(window.location.href)};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function processHCJSON() {'||chr(10)),
     '  function processHCJSON() {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    setFavIcon();'||chr(10)),
     '    setFavIcon();'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (!g_HcData.STATS) {'||chr(10)),
     '    if (!g_HcData.STATS) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var localJSON = document.getElementById("HC_JSON");'||chr(10)),
     '      var localJSON = document.getElementById("HC_JSON");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if (localJSON) {'||chr(10)),
     '      if (localJSON) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        processHCJSONStr(localJSON.innerHTML);'||chr(10)),
     '        processHCJSONStr(localJSON.innerHTML);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    } '||chr(10)),
     '    } '||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (!g_HcData.STATS) {'||chr(10)),
     '    if (!g_HcData.STATS) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      alert(''HC_JSON:not found'');'||chr(10)),
     '      alert(''HC_JSON:not found'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   '||chr(10)),
     '   '||chr(10));
  dbms_lob.writeappend(clb, 
     length('    populateStats(g_HcData.STATS);'||chr(10)),
     '    populateStats(g_HcData.STATS);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    populateMenu();'||chr(10)),
     '    populateMenu();'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    generateReportMap();'||chr(10)),
     '    generateReportMap();'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    setWindowProperties();'||chr(10)),
     '    setWindowProperties();'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    gotoAnchor(window.location.href);'||chr(10)),
     '    gotoAnchor(window.location.href);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (g_HcData[''STATS''][''js_errors'']) {'||chr(10)),
     '    if (g_HcData[''STATS''][''js_errors'']) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      addMenuItem("JS-ERRORS",false);'||chr(10)),
     '      addMenuItem("JS-ERRORS",false);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function gotoAnchor(url) {'||chr(10)),
     '  function gotoAnchor(url) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var arr = url.split(''#'');'||chr(10)),
     '    var arr = url.split(''#'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (arr.length < 2) {'||chr(10)),
     '    if (arr.length < 2) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if (g_loadedMenuItems.length)'||chr(10)),
     '      if (g_loadedMenuItems.length)'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        showMenuItem(g_loadedMenuItems[0]);'||chr(10)),
     '        showMenuItem(g_loadedMenuItems[0]);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      return;'||chr(10)),
     '      return;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var anchor = arr[1];'||chr(10)),
     '    var anchor = arr[1];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (anchor.search(/^menu/i) != -1) {'||chr(10)),
     '    if (anchor.search(/^menu/i) != -1) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var menu = anchor.split(''_'');'||chr(10)),
     '      var menu = anchor.split(''_'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var top = document.getElementById(''top''); //Getting Y of target element'||chr(10)),
     '      var top = document.getElementById(''top''); //Getting Y of target element'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var top_offset = top.style.offsetTop;'||chr(10)),
     '      var top_offset = top.style.offsetTop;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var top_margin = top.style.marginTop; //Getting Y of target element'||chr(10)),
     '      var top_margin = top.style.marginTop; //Getting Y of target element'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var scrollOffset = top_offset+top_margin;'||chr(10)),
     '      var scrollOffset = top_offset+top_margin;'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' '||chr(10)),
     ' '||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if (menu[1]) {'||chr(10)),
     '      if (menu[1]) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        showMenuItem(menu[1]);'||chr(10)),
     '        showMenuItem(menu[1]);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        window.scrollTo(0, scrollOffset);  '||chr(10)),
     '        window.scrollTo(0, scrollOffset);  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('      } else {'||chr(10)),
     '      } else {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    } else {'||chr(10)),
     '    } else {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var menu = getMenuItem(anchor);'||chr(10)),
     '      var menu = getMenuItem(anchor);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if (menu) {'||chr(10)),
     '      if (menu) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        showMenuItem(menu); '||chr(10)),
     '        showMenuItem(menu); '||chr(10));
  dbms_lob.writeappend(clb, 
     length('      } '||chr(10)),
     '      } '||chr(10));
  dbms_lob.writeappend(clb, 
     length('      window.location.href= ''#''+anchor;'||chr(10)),
     '      window.location.href= ''#''+anchor;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      window.scrollBy(0, -1*scrollOffset);  '||chr(10)),
     '      window.scrollBy(0, -1*scrollOffset);  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function getMenuItem(statName) {'||chr(10)),
     '  function getMenuItem(statName) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var divId = ''div''+statName;'||chr(10)),
     '    var divId = ''div''+statName;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var statDiv = g_divObj[divId];'||chr(10)),
     '    var statDiv = g_divObj[divId];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (statDiv) {'||chr(10)),
     '    if (statDiv) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      return statDiv.getAttribute(''data-menu'');'||chr(10)),
     '      return statDiv.getAttribute(''data-menu'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    } else {'||chr(10)),
     '    } else {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      return '''';'||chr(10)),
     '      return '''';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function removeDivs() {'||chr(10)),
     '  function removeDivs() {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    for(id in g_divObj) {'||chr(10)),
     '    for(id in g_divObj) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var elem = g_divObj[id];'||chr(10)),
     '      var elem = g_divObj[id];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      elem.parentNode.removeChild(elem)'||chr(10)),
     '      elem.parentNode.removeChild(elem)'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    for(id in g_menuElements) {'||chr(10)),
     '    for(id in g_menuElements) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var elem = g_menuElements[id];'||chr(10)),
     '      var elem = g_menuElements[id];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      elem.parentNode.removeChild(elem)'||chr(10)),
     '      elem.parentNode.removeChild(elem)'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    g_divObj = {};'||chr(10)),
     '    g_divObj = {};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    g_menuElements = {};'||chr(10)),
     '    g_menuElements = {};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function processHCJSONStr(statsJSON) {'||chr(10)),
     '  function processHCJSONStr(statsJSON) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    g_HcData = parseHCJson(statsJSON);'||chr(10)),
     '    g_HcData = parseHCJson(statsJSON);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function loadJSONFile(callback) {   '||chr(10)),
     '  function loadJSONFile(callback) {   '||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var xobj = new XMLHttpRequest();'||chr(10)),
     '    var xobj = new XMLHttpRequest();'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    xobj.overrideMimeType("application/json");'||chr(10)),
     '    xobj.overrideMimeType("application/json");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    xobj.open(''GET'', ''hc1.json'', false); '||chr(10)),
     '    xobj.open(''GET'', ''hc1.json'', false); '||chr(10));
  dbms_lob.writeappend(clb, 
     length('    xobj.onreadystatechange = function () {'||chr(10)),
     '    xobj.onreadystatechange = function () {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (xobj.readyState == 4 ) {'||chr(10)),
     '     if (xobj.readyState == 4 ) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       callback(xobj.responseText);'||chr(10)),
     '       callback(xobj.responseText);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    };'||chr(10)),
     '    };'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    xobj.send(null);  '||chr(10)),
     '    xobj.send(null);  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function showHideAll(show) {'||chr(10)),
     '  function showHideAll(show) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var div2s = document.getElementsByClassName("contentDiv");'||chr(10)),
     '    var div2s = document.getElementsByClassName("contentDiv");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    for (var i = 0 ; i < div2s.length; i++) {'||chr(10)),
     '    for (var i = 0 ; i < div2s.length; i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var statName = div2s[i].getAttribute(''statName'');'||chr(10)),
     '      var statName = div2s[i].getAttribute(''statName'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if (show) {'||chr(10)),
     '      if (show) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        showDiv(statName);'||chr(10)),
     '        showDiv(statName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      } else {'||chr(10)),
     '      } else {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        hideDiv(statName);'||chr(10)),
     '        hideDiv(statName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function createExcludedMenuTable() {'||chr(10)),
     '  function createExcludedMenuTable() {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var menuRuleColumns = [''Menu Item'',''Submenu Item''];'||chr(10)),
     '       var menuRuleColumns = [''Menu Item'',''Submenu Item''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var div2 = document.createElement("div");'||chr(10)),
     '       var div2 = document.createElement("div");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var divHelp = createElement("div","menurules"+"help",'''');'||chr(10)),
     '       var divHelp = createElement("div","menurules"+"help",'''');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var divHelpId = getId(''div'',''menurules''+''help'');'||chr(10)),
     '       var divHelpId = getId(''div'',''menurules''+''help'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var helpBtn = "<a class=''awrexp'' id=menurulesHelpBtn href=javascript:toggleId(''"+divHelpId+"'','''')>?</a>";'||chr(10)),
     '       var helpBtn = "<a class=''awrexp'' id=menurulesHelpBtn href=javascript:toggleId(''"+divHelpId+"'','''')>?</a>";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       div2.setAttribute(''class'',''awrexcludediv'');'||chr(10)),
     '       div2.setAttribute(''class'',''awrexcludediv'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var descP = document.createElement("pre");'||chr(10)),
     '       var descP = document.createElement("pre");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       descP.setAttribute("class","awrdesc");'||chr(10)),
     '       descP.setAttribute("class","awrdesc");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       descP.innerHTML = '||chr(10)),
     '       descP.innerHTML = '||chr(10));
  dbms_lob.writeappend(clb, 
     length('"Exclude a menu item or a sub-menu item.\nIf the ''Submenu Item'' is not specified  then the entire Menu Item is excluded\n"; '||chr(10)),
     '"Exclude a menu item or a sub-menu item.\nIf the ''Submenu Item'' is not specified  then the entire Menu Item is excluded\n"; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var header = document.createElement("h3");'||chr(10)),
     '       var header = document.createElement("h3");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       header.setAttribute("class","awr");'||chr(10)),
     '       header.setAttribute("class","awr");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       header.setAttribute("id","excludemenutable_h3");'||chr(10)),
     '       header.setAttribute("id","excludemenutable_h3");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       header.setAttribute("style","margin-bottom: 5px ;margin-top:10px");'||chr(10)),
     '       header.setAttribute("style","margin-bottom: 5px ;margin-top:10px");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       header.innerHTML = "Menu Items Exclusions";'||chr(10)),
     '       header.innerHTML = "Menu Items Exclusions";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var btn1 = "<a title=''Add New Exclusion'' name=\"a_menurules\" class=\"awrexpbtn\" id="+"\"btn_menurules\""+"onclick=\"addRowExcludeMenu(''menurules'');\" >Add</a>"'||chr(10)),
     '       var btn1 = "<a title=''Add New Exclusion'' name=\"a_menurules\" class=\"awrexpbtn\" id="+"\"btn_menurules\""+"onclick=\"addRowExcludeMenu(''menurules'');\" >Add</a>"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var btn3 = "<a class=''awrexp_small'' title=''delete row'' onclick=\"deleteRow(''menurules'',this);\" >X</a>"'||chr(10)),
     '       var btn3 = "<a class=''awrexp_small'' title=''delete row'' onclick=\"deleteRow(''menurules'',this);\" >X</a>"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var tabElement = document.createElement(''table'');'||chr(10)),
     '       var tabElement = document.createElement(''table'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       tabElement.setAttribute("id","menurules");'||chr(10)),
     '       tabElement.setAttribute("id","menurules");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       tabElement.setAttribute("class","awrexcludetab");'||chr(10)),
     '       tabElement.setAttribute("class","awrexcludetab");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       txt = "";'||chr(10)),
     '       txt = "";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       for (var c = 0; c < menuRuleColumns.length; c++) {'||chr(10)),
     '       for (var c = 0; c < menuRuleColumns.length; c++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         txt += "<th class=\"awrbg\">"+menuRuleColumns[c]+"</th>"; '||chr(10)),
     '         txt += "<th class=\"awrbg\">"+menuRuleColumns[c]+"</th>"; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       tabElement.insertRow(-1).innerHTML =txt ;'||chr(10)),
     '       tabElement.insertRow(-1).innerHTML =txt ;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       for(menu in g_configRules["MENU"]) {'||chr(10)),
     '       for(menu in g_configRules["MENU"]) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          var rules = g_configRules["MENU"][menu];'||chr(10)),
     '          var rules = g_configRules["MENU"][menu];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          var arr = menu.split('':'');'||chr(10)),
     '          var arr = menu.split('':'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          var mainmenu = arr[0];'||chr(10)),
     '          var mainmenu = arr[0];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          var submenu = arr[1] ? arr[1] : "";'||chr(10)),
     '          var submenu = arr[1] ? arr[1] : "";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         '||chr(10)),
     '         '||chr(10));
  dbms_lob.writeappend(clb, 
     length('          if (rules["exclude"]) {'||chr(10)),
     '          if (rules["exclude"]) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('             var rowElement = tabElement.insertRow(-1);'||chr(10)),
     '             var rowElement = tabElement.insertRow(-1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('             rowElement.setAttribute("class","awrc");'||chr(10)),
     '             rowElement.setAttribute("class","awrc");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              txt = "";'||chr(10)),
     '              txt = "";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              txt += "<td>"+mainmenu+"</td>";  '||chr(10)),
     '              txt += "<td>"+mainmenu+"</td>";  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('              txt += "<td>"+submenu+"</td>";  '||chr(10)),
     '              txt += "<td>"+submenu+"</td>";  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('              txt += "<td>"+btn3+"</td>";  '||chr(10)),
     '              txt += "<td>"+btn3+"</td>";  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('              rowElement.innerHTML =txt ;'||chr(10)),
     '              rowElement.innerHTML =txt ;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          } '||chr(10)),
     '          } '||chr(10));
  dbms_lob.writeappend(clb, 
     length('        }'||chr(10)),
     '        }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        div2.innerHTML += helpBtn;'||chr(10)),
     '        div2.innerHTML += helpBtn;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        div2.appendChild(divHelp);'||chr(10)),
     '        div2.appendChild(divHelp);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        divHelp.style.display = ''none'';'||chr(10)),
     '        divHelp.style.display = ''none'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        divHelp.appendChild(descP);'||chr(10)),
     '        divHelp.appendChild(descP);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        div2.innerHTML += btn1;'||chr(10)),
     '        div2.innerHTML += btn1;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        div2.appendChild(header);'||chr(10)),
     '        div2.appendChild(header);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        div2.appendChild(tabElement);'||chr(10)),
     '        div2.appendChild(tabElement);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        return div2;'||chr(10)),
     '        return div2;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function createColumnRulesTable() {'||chr(10)),
     '  function createColumnRulesTable() {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var colRuleColumns = '||chr(10)),
     '     var colRuleColumns = '||chr(10));
  dbms_lob.writeappend(clb, 
     length('   [''Stat ID'',''Rule'', ''column-style'',''row-style'', ''table-style''];'||chr(10)),
     '   [''Stat ID'',''Rule'', ''column-style'',''row-style'', ''table-style''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var div2 = createElement("div","",''awrexcludediv'');'||chr(10)),
     '       var div2 = createElement("div","",''awrexcludediv'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var divHelp = createElement("div","columnrules"+"help",'''');'||chr(10)),
     '       var divHelp = createElement("div","columnrules"+"help",'''');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var divHelpId = getId(''div'',''columnrules''+''help'');'||chr(10)),
     '       var divHelpId = getId(''div'',''columnrules''+''help'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var helpBtn = "<a class=''awrexp'' id=columnrulesHelpBtn href=javascript:toggleId(''"+divHelpId+"'','''')>?</a>";'||chr(10)),
     '       var helpBtn = "<a class=''awrexp'' id=columnrulesHelpBtn href=javascript:toggleId(''"+divHelpId+"'','''')>?</a>";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var descP = createElement("pre","",''awrdesc'');'||chr(10)),
     '       var descP = createElement("pre","",''awrdesc'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       div2.innerHTML += helpBtn;'||chr(10)),
     '       div2.innerHTML += helpBtn;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       div2.appendChild(divHelp);'||chr(10)),
     '       div2.appendChild(divHelp);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        divHelp.style.display = ''none'';'||chr(10)),
     '        divHelp.style.display = ''none'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       divHelp.appendChild(descP);'||chr(10)),
     '       divHelp.appendChild(descP);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       descP.innerHTML = "Add rules on any table.\nThere can be any number of rules on a single table and they will be applied one after the other in the order they appear in the rules table.\n"'||chr(10)),
     '       descP.innerHTML = "Add rules on any table.\nThere can be any number of rules on a single table and they will be applied one after the other in the order they appear in the rules table.\n"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       descP.innerHTML += "It can be an expression using the values of the columns in a row.\n\ne.g NAME === ''streams_pool_size'' && VALUE <= 100000 \n where NAME and VALUE are column names of the table. \n\n"'||chr(10)),
     '       descP.innerHTML += "It can be an expression using the values of the columns in a row.\n\ne.g NAME === ''streams_pool_size'' && VALUE <= 100000 \n where NAME and VALUE are column names of the table. \n\n"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       descP.innerHTML += "NOTE: Use ''==='' for string comparison. ''=='' for number comparison\nUse ''&&'' for logical and and ''||'' for logical or. The exprssion can use\nparanthesis for enforcing order of evaluation.\n\n"'||chr(10)),
     '       descP.innerHTML += "NOTE: Use ''==='' for string comparison. ''=='' for number comparison\nUse ''&&'' for logical and and ''||'' for logical or. The exprssion can use\nparanthesis for enforcing order of evaluation.\n\n"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       descP.innerHTML += "If the expression evaluates to true, then the ''table-style'' or ''row-style'' or ''style'' is applied on the table or row or on the column \n in that order of precedence. "'||chr(10)),
     '       descP.innerHTML += "If the expression evaluates to true, then the ''table-style'' or ''row-style'' or ''style'' is applied on the table or row or on the column \n in that order of precedence. "'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       descP.innerHTML += "If more than one column appears in the \nexpression, then the ''style'' value would be applied to all the columns \nif the expression evaluates to true.\n\ncolor:green - color the column value green \ncolor:red - color the column value red \n"'||chr(10)),
     '       descP.innerHTML += "If more than one column appears in the \nexpression, then the ''style'' value would be applied to all the columns \nif the expression evaluates to true.\n\ncolor:green - color the column value green \ncolor:red - color the column value red \n"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       descP.innerHTML += "color:orange - color the column value orange\ndisplay:none - do not show the column or row or table depending on \nwhere it is selected (''style'' or ''row-style'' or ''table-style'')\n"'||chr(10)),
     '       descP.innerHTML += "color:orange - color the column value orange\ndisplay:none - do not show the column or row or table depending on \nwhere it is selected (''style'' or ''row-style'' or ''table-style'')\n"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       descP.innerHTML += "alert - Show the table containing this column under ''Alerts'' Menu Item.\n\n ''Column Rules'' is still work in progress. It can get very complicated and hence a clear evaluation precedence needs to be defined.\n";'||chr(10)),
     '       descP.innerHTML += "alert - Show the table containing this column under ''Alerts'' Menu Item.\n\n ''Column Rules'' is still work in progress. It can get very complicated and hence a clear evaluation precedence needs to be defined.\n";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var header = createElement("h3","columnrules","awr");'||chr(10)),
     '       var header = createElement("h3","columnrules","awr");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       header.setAttribute("style","margin-bottom: 5px ;margin-top:10px");'||chr(10)),
     '       header.setAttribute("style","margin-bottom: 5px ;margin-top:10px");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       header.innerHTML = "Column Rules ";'||chr(10)),
     '       header.innerHTML = "Column Rules ";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var btn1 = "<a title=''Add New Rule'' name=\"a_columnrules1\" class=\"awrexpbtn\" id="+"\"btn_add_columnrules\""+"onclick=\"addColumnRule(getId(''table'',''columnrules''));\" >Add</a>";'||chr(10)),
     '       var btn1 = "<a title=''Add New Rule'' name=\"a_columnrules1\" class=\"awrexpbtn\" id="+"\"btn_add_columnrules\""+"onclick=\"addColumnRule(getId(''table'',''columnrules''));\" >Add</a>";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var btn3 = "<a class=''awrexp_small'' title=''delete row'' onclick=\"deleteRow(getId(''table'',''columnrules''),this);\" >X</a>";'||chr(10)),
     '       var btn3 = "<a class=''awrexp_small'' title=''delete row'' onclick=\"deleteRow(getId(''table'',''columnrules''),this);\" >X</a>";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var tabElement = createElement(''table'',"columnrules","awrexcludetab");'||chr(10)),
     '       var tabElement = createElement(''table'',"columnrules","awrexcludetab");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       txt = "";'||chr(10)),
     '       txt = "";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       for (var c = 0; c < colRuleColumns.length; c++) {'||chr(10)),
     '       for (var c = 0; c < colRuleColumns.length; c++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         txt += "<th class=\"awrbg\">"+colRuleColumns[c]+"</th>"; '||chr(10)),
     '         txt += "<th class=\"awrbg\">"+colRuleColumns[c]+"</th>"; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       tabElement.insertRow(-1).innerHTML =txt ;'||chr(10)),
     '       tabElement.insertRow(-1).innerHTML =txt ;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       for(tab in g_configRules["COLUMN"]) {'||chr(10)),
     '       for(tab in g_configRules["COLUMN"]) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          var rules = g_configRules["COLUMN"][tab];'||chr(10)),
     '          var rules = g_configRules["COLUMN"][tab];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          var statName = tab;'||chr(10)),
     '          var statName = tab;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          for (var i = 0; i < rules.length; i++) {'||chr(10)),
     '          for (var i = 0; i < rules.length; i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              txt = "";'||chr(10)),
     '              txt = "";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              var rule = rules[i];'||chr(10)),
     '              var rule = rules[i];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              var expr = rule[''expr''];'||chr(10)),
     '              var expr = rule[''expr''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              var rowElement = tabElement.insertRow(-1);'||chr(10)),
     '              var rowElement = tabElement.insertRow(-1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              rowElement.setAttribute(''data-tab'',statName);'||chr(10)),
     '              rowElement.setAttribute(''data-tab'',statName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              rowElement.setAttribute("class","awrc");'||chr(10)),
     '              rowElement.setAttribute("class","awrc");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              txt += "<td>"+statName+"</td>";  '||chr(10)),
     '              txt += "<td>"+statName+"</td>";  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('              txt += "<td>"+expr+"</td>";  '||chr(10)),
     '              txt += "<td>"+expr+"</td>";  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('              for (var c = 2 ; c < colRuleColumns.length; c++ ) {'||chr(10)),
     '              for (var c = 2 ; c < colRuleColumns.length; c++ ) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                var val = rule[colRuleColumns[c]];'||chr(10)),
     '                var val = rule[colRuleColumns[c]];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                if (!val) {'||chr(10)),
     '                if (!val) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                  val = "";'||chr(10)),
     '                  val = "";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                } '||chr(10)),
     '                } '||chr(10));
  dbms_lob.writeappend(clb, 
     length('                txt += "<td>"+ val+"</td>";  '||chr(10)),
     '                txt += "<td>"+ val+"</td>";  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('              }'||chr(10)),
     '              }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              txt += "<td>"+btn3+"</td>";  '||chr(10)),
     '              txt += "<td>"+btn3+"</td>";  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('              rowElement.innerHTML =txt ;'||chr(10)),
     '              rowElement.innerHTML =txt ;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           }'||chr(10)),
     '           }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        }'||chr(10)),
     '        }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var colHint=createElement(''div'',''columnrules''+''hint'',''awrdesc'');'||chr(10)),
     '        var colHint=createElement(''div'',''columnrules''+''hint'',''awrdesc'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        colHint.style.display = ''none'';'||chr(10)),
     '        colHint.style.display = ''none'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        div2.innerHTML += btn1;'||chr(10)),
     '        div2.innerHTML += btn1;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        div2.appendChild(header);'||chr(10)),
     '        div2.appendChild(header);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        div2.appendChild(tabElement);'||chr(10)),
     '        div2.appendChild(tabElement);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        div2.appendChild(colHint);'||chr(10)),
     '        div2.appendChild(colHint);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        return div2;'||chr(10)),
     '        return div2;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function loadGroupByConfigTable(tabElement) {'||chr(10)),
     '  function loadGroupByConfigTable(tabElement) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var txt = "";'||chr(10)),
     '       var txt = "";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var btn3 = "<a class=''awrexp_small'' title=''delete row'' onclick=\"deleteRow(getId(''table'',''groupby''),this);\" >X</a>"'||chr(10)),
     '       var btn3 = "<a class=''awrexp_small'' title=''delete row'' onclick=\"deleteRow(getId(''table'',''groupby''),this);\" >X</a>"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var groupbyCols = [''Stat ID'',''Group By Key'',''Aggregates''];'||chr(10)),
     '       var groupbyCols = [''Stat ID'',''Group By Key'',''Aggregates''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       tabElement.innerHTML = "";'||chr(10)),
     '       tabElement.innerHTML = "";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       for (var c = 0; c < groupbyCols.length; c++) {'||chr(10)),
     '       for (var c = 0; c < groupbyCols.length; c++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         txt += "<th class=\"awrbg\">"+groupbyCols[c]+"</th>"; '||chr(10)),
     '         txt += "<th class=\"awrbg\">"+groupbyCols[c]+"</th>"; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       tabElement.insertRow(-1).innerHTML =txt ;'||chr(10)),
     '       tabElement.insertRow(-1).innerHTML =txt ;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       for(statName in g_configRules["GROUPBY"]) {'||chr(10)),
     '       for(statName in g_configRules["GROUPBY"]) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          var keyarr = g_configRules["GROUPBY"][statName][''KEY_COLS''];'||chr(10)),
     '          var keyarr = g_configRules["GROUPBY"][statName][''KEY_COLS''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          var aggarr = g_configRules["GROUPBY"][statName][''AGG_COLS''];'||chr(10)),
     '          var aggarr = g_configRules["GROUPBY"][statName][''AGG_COLS''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          var gbkey = '''';'||chr(10)),
     '          var gbkey = '''';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          var agg = '''';'||chr(10)),
     '          var agg = '''';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          var comma ='''';'||chr(10)),
     '          var comma ='''';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          txt = '''';'||chr(10)),
     '          txt = '''';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          for(var gk = 0; gk < keyarr.length; gk++) {'||chr(10)),
     '          for(var gk = 0; gk < keyarr.length; gk++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('             gbkey += comma + keyarr[gk];'||chr(10)),
     '             gbkey += comma + keyarr[gk];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('             comma = '','';'||chr(10)),
     '             comma = '','';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          }'||chr(10)),
     '          }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          comma = '''';'||chr(10)),
     '          comma = '''';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          for(var ak = 0; ak < aggarr.length; ak++) {'||chr(10)),
     '          for(var ak = 0; ak < aggarr.length; ak++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('             agg += comma + aggarr[ak];'||chr(10)),
     '             agg += comma + aggarr[ak];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('             comma = '','';'||chr(10)),
     '             comma = '','';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          }'||chr(10)),
     '          }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          var rowElement = tabElement.insertRow(-1);'||chr(10)),
     '          var rowElement = tabElement.insertRow(-1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          rowElement.setAttribute("class","awrc");'||chr(10)),
     '          rowElement.setAttribute("class","awrc");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          txt += "<td>"+statName+"</td>";  '||chr(10)),
     '          txt += "<td>"+statName+"</td>";  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('          txt += "<td>"+gbkey+"</td>";  '||chr(10)),
     '          txt += "<td>"+gbkey+"</td>";  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('          txt += "<td>"+agg+"</td>";  '||chr(10)),
     '          txt += "<td>"+agg+"</td>";  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('          txt += "<td>"+btn3+"</td>";  '||chr(10)),
     '          txt += "<td>"+btn3+"</td>";  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('          rowElement.innerHTML =txt ;'||chr(10)),
     '          rowElement.innerHTML =txt ;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        }'||chr(10)),
     '        }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function createGroupByConfigTable() {'||chr(10)),
     '  function createGroupByConfigTable() {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var div2 = document.createElement("div");'||chr(10)),
     '       var div2 = document.createElement("div");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var divHelp = createElement("div","groupbyrules"+"help",'''');'||chr(10)),
     '       var divHelp = createElement("div","groupbyrules"+"help",'''');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var divHelpId = getId(''div'',''groupbyrules''+''help'');'||chr(10)),
     '       var divHelpId = getId(''div'',''groupbyrules''+''help'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var helpBtn = "<a class=''awrexp'' id=groupbyrulesHelpBtn href=javascript:toggleId(''"+divHelpId+"'','''')>?</a>";'||chr(10)),
     '       var helpBtn = "<a class=''awrexp'' id=groupbyrulesHelpBtn href=javascript:toggleId(''"+divHelpId+"'','''')>?</a>";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       div2.setAttribute(''class'',''awrexcludediv'');'||chr(10)),
     '       div2.setAttribute(''class'',''awrexcludediv'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var descP = document.createElement("pre");'||chr(10)),
     '       var descP = document.createElement("pre");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       descP.setAttribute("class","awrdesc");'||chr(10)),
     '       descP.setAttribute("class","awrdesc");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       descP.innerHTML = "Group by keys and aggregates <br>";'||chr(10)),
     '       descP.innerHTML = "Group by keys and aggregates <br>";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       descP.innerHTML += "Goto any stat and click ''G'' button to add group by";'||chr(10)),
     '       descP.innerHTML += "Goto any stat and click ''G'' button to add group by";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       div2.innerHTML += helpBtn;'||chr(10)),
     '       div2.innerHTML += helpBtn;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       div2.appendChild(divHelp);'||chr(10)),
     '       div2.appendChild(divHelp);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        divHelp.style.display = ''none'';'||chr(10)),
     '        divHelp.style.display = ''none'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       divHelp.appendChild(descP);'||chr(10)),
     '       divHelp.appendChild(descP);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var header = document.createElement("h3");'||chr(10)),
     '       var header = document.createElement("h3");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       header.setAttribute("class","awr");'||chr(10)),
     '       header.setAttribute("class","awr");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       header.setAttribute("id","groupby_h3");'||chr(10)),
     '       header.setAttribute("id","groupby_h3");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       header.setAttribute("style","margin-bottom: 5px ;margin-top:10px");'||chr(10)),
     '       header.setAttribute("style","margin-bottom: 5px ;margin-top:10px");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       header.innerHTML = "Group By ";'||chr(10)),
     '       header.innerHTML = "Group By ";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var tabElement = createElement(''table'',''groupby'',''awrexcludetab'');'||chr(10)),
     '       var tabElement = createElement(''table'',''groupby'',''awrexcludetab'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       div2.appendChild(header);'||chr(10)),
     '       div2.appendChild(header);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       div2.appendChild(tabElement);'||chr(10)),
     '       div2.appendChild(tabElement);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       loadGroupByConfigTable(tabElement);'||chr(10)),
     '       loadGroupByConfigTable(tabElement);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       return div2;'||chr(10)),
     '       return div2;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function addReportMapRow(rows, statName, menu, submenu) {'||chr(10)),
     '  function addReportMapRow(rows, statName, menu, submenu) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var row =[];'||chr(10)),
     '    var row =[];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var rowcnt = 0;'||chr(10)),
     '    var rowcnt = 0;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var act_rowcnt = 0;'||chr(10)),
     '    var act_rowcnt = 0;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var enabled='''';'||chr(10)),
     '    var enabled='''';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var cmt='''';'||chr(10)),
     '    var cmt='''';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var error=''NO'';'||chr(10)),
     '    var error=''NO'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var dur=0;     '||chr(10)),
     '    var dur=0;     '||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var statData = g_HcData[''STATS''][statName];'||chr(10)),
     '    var statData = g_HcData[''STATS''][statName];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (!statData) {'||chr(10)),
     '    if (!statData) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      return;'||chr(10)),
     '      return;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (statData) {'||chr(10)),
     '    if (statData) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       cmt = statData[''SDESC''];'||chr(10)),
     '       cmt = statData[''SDESC''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       error = statData[''ERROR''] ? ''YES'':''NO'';'||chr(10)),
     '       error = statData[''ERROR''] ? ''YES'':''NO'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       dur = parseInt(statData[''DURATION''])/1000;'||chr(10)),
     '       dur = parseInt(statData[''DURATION''])/1000;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       dur = dur.toFixed(3);'||chr(10)),
     '       dur = dur.toFixed(3);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       rowcnt = statData[''NROWS''];'||chr(10)),
     '       rowcnt = statData[''NROWS''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       act_rowcnt = statData[''ACTUAL_NROWS''] ? statData[''ACTUAL_NROWS'']:rowcnt;'||chr(10)),
     '       act_rowcnt = statData[''ACTUAL_NROWS''] ? statData[''ACTUAL_NROWS'']:rowcnt;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       enabled = statData[''ENABLED''];'||chr(10)),
     '       enabled = statData[''ENABLED''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     row = [menu, submenu, statName,cmt,enabled,error,dur,rowcnt,act_rowcnt];'||chr(10)),
     '     row = [menu, submenu, statName,cmt,enabled,error,dur,rowcnt,act_rowcnt];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (!rows[menu]) {'||chr(10)),
     '     if (!rows[menu]) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       rows[menu] = []; '||chr(10)),
     '       rows[menu] = []; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     rows[menu].push(row);'||chr(10)),
     '     rows[menu].push(row);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function addStatLink(rowData,ctx) {'||chr(10)),
     '  function addStatLink(rowData,ctx) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var stat_id_col='''' '||chr(10)),
     '     var stat_id_col='''' '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var link_cols='''';'||chr(10)),
     '     var link_cols='''';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (ctx) {'||chr(10)),
     '     if (ctx) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       stat_id_col = ctx[''STAT_ID_COL''];'||chr(10)),
     '       stat_id_col = ctx[''STAT_ID_COL''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       link_cols = ctx[''LINK_COLS''];'||chr(10)),
     '       link_cols = ctx[''LINK_COLS''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    '||chr(10)),
     '    '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var stat_id = rowData[stat_id_col];'||chr(10)),
     '     var stat_id = rowData[stat_id_col];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var statData = g_HcData[''STATS''][stat_id];'||chr(10)),
     '     var statData = g_HcData[''STATS''][stat_id];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var nrows = statData ?  statData[''NROWS''] : 0;'||chr(10)),
     '     var nrows = statData ?  statData[''NROWS''] : 0;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var error = statData ? statData[''ERROR''] :0;'||chr(10)),
     '     var error = statData ? statData[''ERROR''] :0;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var link = window.location.href;'||chr(10)),
     '     var link = window.location.href;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     link = link.replace(/#.*$/, "");'||chr(10)),
     '     link = link.replace(/#.*$/, "");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    '||chr(10)),
     '    '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (nrows) {'||chr(10)),
     '     if (nrows) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       for(var j =0; j < link_cols.length;j++) {'||chr(10)),
     '       for(var j =0; j < link_cols.length;j++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          rowData[link_cols[j]] =  "<a  href=javascript:gotoAnchor(''"+link +'||chr(10)),
     '          rowData[link_cols[j]] =  "<a  href=javascript:gotoAnchor(''"+link +'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                     "#"+stat_id+"'')>"+rowData[link_cols[j]]+"</a>"; '||chr(10)),
     '                     "#"+stat_id+"'')>"+rowData[link_cols[j]]+"</a>"; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     return rowData;'||chr(10)),
     '     return rowData;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function generateReportMap() {'||chr(10)),
     '  function generateReportMap() {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var colno=0;'||chr(10)),
     '     var colno=0;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var reportCols = {''SNO'': {''TYPE'':''2'',''COL_NUM'':colno++},'||chr(10)),
     '     var reportCols = {''SNO'': {''TYPE'':''2'',''COL_NUM'':colno++},'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                       ''MENU'': {''TYPE'':''1'',''COL_NUM'':colno++},'||chr(10)),
     '                       ''MENU'': {''TYPE'':''1'',''COL_NUM'':colno++},'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                       ''SUB_MENU'':{''TYPE'':''1'',''COL_NUM'':colno++},'||chr(10)),
     '                       ''SUB_MENU'':{''TYPE'':''1'',''COL_NUM'':colno++},'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                       ''STAT_ID'':{''TYPE'':''1'',''COL_NUM'':colno++},'||chr(10)),
     '                       ''STAT_ID'':{''TYPE'':''1'',''COL_NUM'':colno++},'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                       ''DESCRIPTION'':{''TYPE'':''1'',''COL_NUM'':colno++},'||chr(10)),
     '                       ''DESCRIPTION'':{''TYPE'':''1'',''COL_NUM'':colno++},'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                       ''ENABLED'':{''TYPE'':''1'',''COL_NUM'':colno++},'||chr(10)),
     '                       ''ENABLED'':{''TYPE'':''1'',''COL_NUM'':colno++},'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                       ''ERROR'':{''TYPE'':''1'',''COL_NUM'':colno++},'||chr(10)),
     '                       ''ERROR'':{''TYPE'':''1'',''COL_NUM'':colno++},'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                       ''DURATION_SECS'':{''TYPE'':''2'',''COL_NUM'':colno++},'||chr(10)),
     '                       ''DURATION_SECS'':{''TYPE'':''2'',''COL_NUM'':colno++},'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                       ''ROWS'':{''TYPE'':''2'',''COL_NUM'':colno++},'||chr(10)),
     '                       ''ROWS'':{''TYPE'':''2'',''COL_NUM'':colno++},'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                       ''ACTUAL'':{''TYPE'':''2'',''COL_NUM'':colno++}'||chr(10)),
     '                       ''ACTUAL'':{''TYPE'':''2'',''COL_NUM'':colno++}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                      };'||chr(10)),
     '                      };'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var level1 = g_HcData[''METADATA''][''LEVEL1''];'||chr(10)),
     '       var level1 = g_HcData[''METADATA''][''LEVEL1''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var level2 = g_HcData[''METADATA''][''LEVEL2''];'||chr(10)),
     '       var level2 = g_HcData[''METADATA''][''LEVEL2''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      '||chr(10)),
     '      '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var rows = {};'||chr(10)),
     '       var rows = {};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var row=[];'||chr(10)),
     '       var row=[];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var index={};'||chr(10)),
     '       var index={};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var cmt,dur,rowcnt,statName,statData,enabled;'||chr(10)),
     '       var cmt,dur,rowcnt,statName,statData,enabled;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       for (lvl1 in level1) {'||chr(10)),
     '       for (lvl1 in level1) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var items = level1[lvl1].length;'||chr(10)),
     '         var items = level1[lvl1].length;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         for (var i=0; i < items;i++) {'||chr(10)),
     '         for (var i=0; i < items;i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           if (Array.isArray(level1[lvl1][i])) {'||chr(10)),
     '           if (Array.isArray(level1[lvl1][i])) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('             continue;'||chr(10)),
     '             continue;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           }'||chr(10)),
     '           }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           row =[];'||chr(10)),
     '           row =[];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           statName = getStatName(level1[lvl1][i]); '||chr(10)),
     '           statName = getStatName(level1[lvl1][i]); '||chr(10));
  dbms_lob.writeappend(clb, 
     length('           addReportMapRow(rows,statName,lvl1,"");'||chr(10)),
     '           addReportMapRow(rows,statName,lvl1,"");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       for (lvl2 in level2) {'||chr(10)),
     '       for (lvl2 in level2) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var items = level2[lvl2].length;'||chr(10)),
     '         var items = level2[lvl2].length;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         for (var i=0; i < items;i++) {'||chr(10)),
     '         for (var i=0; i < items;i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           if (Array.isArray(level2[lvl2][i])) {'||chr(10)),
     '           if (Array.isArray(level2[lvl2][i])) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('             continue;'||chr(10)),
     '             continue;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           }'||chr(10)),
     '           }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           row =[];'||chr(10)),
     '           row =[];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           statName = getStatName(level2[lvl2][i]) ;'||chr(10)),
     '           statName = getStatName(level2[lvl2][i]) ;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           var menu_arr = lvl2.split('':'');'||chr(10)),
     '           var menu_arr = lvl2.split('':'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           var menu =  menu_arr[0];'||chr(10)),
     '           var menu =  menu_arr[0];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           var submenu = menu_arr[1];'||chr(10)),
     '           var submenu = menu_arr[1];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           '||chr(10)),
     '           '||chr(10));
  dbms_lob.writeappend(clb, 
     length('           addReportMapRow(rows,statName,menu,submenu);'||chr(10)),
     '           addReportMapRow(rows,statName,menu,submenu);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       '||chr(10)),
     '       '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var flatRows = [];'||chr(10)),
     '       var flatRows = [];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var sno=1;'||chr(10)),
     '       var sno=1;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       for(menu in rows) {'||chr(10)),
     '       for(menu in rows) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         for(var i = 0; i < rows[menu].length;i++) {'||chr(10)),
     '         for(var i = 0; i < rows[menu].length;i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           rows[menu][i].splice(0,0,sno++);'||chr(10)),
     '           rows[menu][i].splice(0,0,sno++);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           flatRows.push(rows[menu][i]);'||chr(10)),
     '           flatRows.push(rows[menu][i]);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var dur = '''';'||chr(10)),
     '       var dur = '''';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var params = '''';'||chr(10)),
     '       var params = '''';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var ddesc = '''';'||chr(10)),
     '       var ddesc = '''';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var user = '''';'||chr(10)),
     '       var user = '''';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (g_HcData[''INFO'']) {'||chr(10)),
     '       if (g_HcData[''INFO'']) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         dur = Math.ceil(g_HcData[''INFO''][''DURATION'']/1000);'||chr(10)),
     '         dur = Math.ceil(g_HcData[''INFO''][''DURATION'']/1000);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         user = g_HcData[''INFO''][''CURRENT_USER''];'||chr(10)),
     '         user = g_HcData[''INFO''][''CURRENT_USER''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         ddesc = ''<pre>\n'';'||chr(10)),
     '         ddesc = ''<pre>\n'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         ddesc += ''Healthcheck Version - ''+g_HcData[''INFO''][''VERSION'']+''\n\n''+'||chr(10)),
     '         ddesc += ''Healthcheck Version - ''+g_HcData[''INFO''][''VERSION'']+''\n\n''+'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                ''Start Time    - ''+g_HcData[''INFO''][''BEGIN_REPORT_TIME'']+''\n''+'||chr(10)),
     '                ''Start Time    - ''+g_HcData[''INFO''][''BEGIN_REPORT_TIME'']+''\n''+'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                ''End Time      - ''+g_HcData[''INFO''][''END_REPORT_TIME'']+''\n''+'||chr(10)),
     '                ''End Time      - ''+g_HcData[''INFO''][''END_REPORT_TIME'']+''\n''+'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                ''Duration      - ''+dur +'' secs''+''\n''+'||chr(10)),
     '                ''Duration      - ''+dur +'' secs''+''\n''+'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                ''Database User - ''+user +''\n''+'||chr(10)),
     '                ''Database User - ''+user +''\n''+'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                ''</pre>'';'||chr(10)),
     '                ''</pre>'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         params = g_HcData[''INFO''][''PARAMS''];'||chr(10)),
     '         params = g_HcData[''INFO''][''PARAMS''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var hint = '''';'||chr(10)),
     '       var hint = '''';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (params) {'||chr(10)),
     '       if (params) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         hint = ''<pre>\n'';'||chr(10)),
     '         hint = ''<pre>\n'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         hint += ''PARAMETERS :\n\n'';'||chr(10)),
     '         hint += ''PARAMETERS :\n\n'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         for (p in params) {'||chr(10)),
     '         for (p in params) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           hint += p+''=''+params[p]+''\n'';'||chr(10)),
     '           hint += p+''=''+params[p]+''\n'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         hint += ''</pre>'';'||chr(10)),
     '         hint += ''</pre>'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var stat = {"NAME": ''report_map'','||chr(10)),
     '       var stat = {"NAME": ''report_map'','||chr(10));
  dbms_lob.writeappend(clb, 
     length('                   "ROWS": flatRows,'||chr(10)),
     '                   "ROWS": flatRows,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                   "COLS": reportCols,'||chr(10)),
     '                   "COLS": reportCols,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                   "NROWS": flatRows.length,'||chr(10)),
     '                   "NROWS": flatRows.length,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                   "SDESC": "HC Report Map",'||chr(10)),
     '                   "SDESC": "HC Report Map",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                   "DDESC":ddesc,'||chr(10)),
     '                   "DDESC":ddesc,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                   "DDESC_SHOW":"1",'||chr(10)),
     '                   "DDESC_SHOW":"1",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                   "ENABLED":"YES",'||chr(10)),
     '                   "ENABLED":"YES",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                   "CALLBACK":addStatLink,'||chr(10)),
     '                   "CALLBACK":addStatLink,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                   "CALLBACK_CTX":{''STAT_ID_COL'':3,'||chr(10)),
     '                   "CALLBACK_CTX":{''STAT_ID_COL'':3,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                                   ''LINK_COLS'':[4]}'||chr(10)),
     '                                   ''LINK_COLS'':[4]}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                  };'||chr(10)),
     '                  };'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (hint) {'||chr(10)),
     '       if (hint) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         stat[''HINTS''] = hint;'||chr(10)),
     '         stat[''HINTS''] = hint;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         stat[''HINTS_SHOW''] = "1";'||chr(10)),
     '         stat[''HINTS_SHOW''] = "1";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       }'||chr(10)),
     '       }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       g_HcData[''STATS''][''report_map''] = stat;'||chr(10)),
     '       g_HcData[''STATS''][''report_map''] = stat;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       return stat;'||chr(10)),
     '       return stat;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function showJsonConfig() {'||chr(10)),
     '  function showJsonConfig() {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var jsonBtn = document.getElementById(''btnShowJson'');'||chr(10)),
     '    var jsonBtn = document.getElementById(''btnShowJson'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var div1= document.getElementById(''divCONFIGdiv1'');'||chr(10)),
     '    var div1= document.getElementById(''divCONFIGdiv1'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var div2= document.getElementById(''divCONFIGdiv2'');'||chr(10)),
     '    var div2= document.getElementById(''divCONFIGdiv2'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var jsonConf= document.getElementById(''preCONFIGdiv1'');'||chr(10)),
     '    var jsonConf= document.getElementById(''preCONFIGdiv1'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (jsonBtn.innerHTML === ''JSON'') {'||chr(10)),
     '    if (jsonBtn.innerHTML === ''JSON'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      div1.style.display = "block";'||chr(10)),
     '      div1.style.display = "block";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      div2.style.display = "none";'||chr(10)),
     '      div2.style.display = "none";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      jsonBtn.innerHTML = ''Table'''||chr(10)),
     '      jsonBtn.innerHTML = ''Table'''||chr(10));
  dbms_lob.writeappend(clb, 
     length('      jsonBtn.title = "Show config in Table format";'||chr(10)),
     '      jsonBtn.title = "Show config in Table format";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      jsonConf.innerHTML = JSON.stringify(getCurrentConfig(),null,2);'||chr(10)),
     '      jsonConf.innerHTML = JSON.stringify(getCurrentConfig(),null,2);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    } else {'||chr(10)),
     '    } else {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      div1.style.display = "none";'||chr(10)),
     '      div1.style.display = "none";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      div2.style.display = "block";'||chr(10)),
     '      div2.style.display = "block";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      jsonBtn.innerHTML = ''JSON'''||chr(10)),
     '      jsonBtn.innerHTML = ''JSON'''||chr(10));
  dbms_lob.writeappend(clb, 
     length('      jsonBtn.title = "Show config in JSON format";'||chr(10)),
     '      jsonBtn.title = "Show config in JSON format";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function populateConfig() {'||chr(10)),
     '  function populateConfig() {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var div,div1,div2;'||chr(10)),
     '     var div,div1,div2;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (g_divObj[''divCONFIG'']) {'||chr(10)),
     '     if (g_divObj[''divCONFIG'']) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         return;'||chr(10)),
     '         return;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     } '||chr(10)),
     '     } '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       '||chr(10)),
     '       '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     div = createElement(''div'',"CONFIG","");'||chr(10)),
     '     div = createElement(''div'',"CONFIG","");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     div.setAttribute("style","margin:10px 10px");'||chr(10)),
     '     div.setAttribute("style","margin:10px 10px");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     div1 = createElement(''div'', "CONFIGdiv1","");'||chr(10)),
     '     div1 = createElement(''div'', "CONFIGdiv1","");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     div1.style.display = ''none'';'||chr(10)),
     '     div1.style.display = ''none'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     div2 = createElement(''div'', "CONFIGdiv2","");'||chr(10)),
     '     div2 = createElement(''div'', "CONFIGdiv2","");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     '||chr(10)),
     '     '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     div.appendChild(div1);'||chr(10)),
     '     div.appendChild(div1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     div.appendChild(div2);'||chr(10)),
     '     div.appendChild(div2);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        '||chr(10)),
     '        '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var jsonConf = createElement("pre","CONFIGdiv1",''awrdesctop'');'||chr(10)),
     '     var jsonConf = createElement("pre","CONFIGdiv1",''awrdesctop'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     div1.appendChild(jsonConf);'||chr(10)),
     '     div1.appendChild(jsonConf);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      '||chr(10)),
     '      '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var descP = document.createElement("pre");'||chr(10)),
     '     var descP = document.createElement("pre");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     descP.setAttribute("class","awrdesctop");'||chr(10)),
     '     descP.setAttribute("class","awrdesctop");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     descP.innerHTML = '||chr(10)),
     '     descP.innerHTML = '||chr(10));
  dbms_lob.writeappend(clb, 
     length('"Rules in below sections can be added using ''Add'' in respective section. \nUse ''X'' to delete a rule. \nRemember to ''save'' changes and ''Apply'' the changes after any modifications.\nThe changes may also be exported using ''Export'' for future ''Import''";'||chr(10)),
     '"Rules in below sections can be added using ''Add'' in respective section. \nUse ''X'' to delete a rule. \nRemember to ''save'' changes and ''Apply'' the changes after any modifications.\nThe changes may also be exported using ''Export'' for future ''Import''";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     div2.appendChild(descP);'||chr(10)),
     '     div2.appendChild(descP);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       div2.appendChild(createColumnRulesTable());'||chr(10)),
     '       div2.appendChild(createColumnRulesTable());'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       div2.appendChild(createExcludedMenuTable());'||chr(10)),
     '       div2.appendChild(createExcludedMenuTable());'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       div2.appendChild(createGroupByConfigTable());'||chr(10)),
     '       div2.appendChild(createGroupByConfigTable());'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      '||chr(10)),
     '      '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       g_divObj[''divCONFIG''] = div;'||chr(10)),
     '       g_divObj[''divCONFIG''] = div;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       document.getElementById("addtable").appendChild(div);'||chr(10)),
     '       document.getElementById("addtable").appendChild(div);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       jsonConf.innerHTML = JSON.stringify(getCurrentConfig(),null,2);'||chr(10)),
     '       jsonConf.innerHTML = JSON.stringify(getCurrentConfig(),null,2);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     '||chr(10)),
     '     '||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('function addGroupBy(tableID) {'||chr(10)),
     'function addGroupBy(tableID) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var add = document.getElementById(''btn_groupby'');'||chr(10)),
     '      var add = document.getElementById(''btn_groupby'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var table = document.getElementById(tableID);'||chr(10)),
     '      var table = document.getElementById(tableID);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var rowCount = table.rows.length;'||chr(10)),
     '      var rowCount = table.rows.length;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var action = "";'||chr(10)),
     '      var action = "";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if (add.innerHTML === ''Add'') {'||chr(10)),
     '      if (add.innerHTML === ''Add'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        action = ''add'';'||chr(10)),
     '        action = ''add'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      } else {'||chr(10)),
     '      } else {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        action = ''save'';'||chr(10)),
     '        action = ''save'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      switch (action) {'||chr(10)),
     '      switch (action) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      case ''add'': '||chr(10)),
     '      case ''add'': '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var row = table.insertRow(rowCount);'||chr(10)),
     '         var row = table.insertRow(rowCount);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         '||chr(10)),
     '         '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var cell1 = row.insertCell(0);'||chr(10)),
     '         var cell1 = row.insertCell(0);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var cell2 = row.insertCell(1);'||chr(10)),
     '         var cell2 = row.insertCell(1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var cell3 = row.insertCell(2);'||chr(10)),
     '         var cell3 = row.insertCell(2);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var element1 = document.createElement("select");'||chr(10)),
     '         var element1 = document.createElement("select");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         element1.setAttribute("id","groupbysel1");'||chr(10)),
     '         element1.setAttribute("id","groupbysel1");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         element1.setAttribute("onChange","loadColumnOptionsCBox()");'||chr(10)),
     '         element1.setAttribute("onChange","loadColumnOptionsCBox()");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         loadTableOptions(element1);'||chr(10)),
     '         loadTableOptions(element1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         cell1.appendChild(element1);'||chr(10)),
     '         cell1.appendChild(element1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var element2 = document.createElement("div");'||chr(10)),
     '         var element2 = document.createElement("div");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         element2.setAttribute("id","groupbysel2");'||chr(10)),
     '         element2.setAttribute("id","groupbysel2");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         cell2.appendChild(element2);'||chr(10)),
     '         cell2.appendChild(element2);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         loadColumnOptionsCBox();'||chr(10)),
     '         loadColumnOptionsCBox();'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var aggfunc = ["count", "max","min", "sum","avg"];'||chr(10)),
     '         var aggfunc = ["count", "max","min", "sum","avg"];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         for(i = 0; i < cmp.length; i++) {'||chr(10)),
     '         for(i = 0; i < cmp.length; i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            var opt = document.createElement("option");'||chr(10)),
     '            var opt = document.createElement("option");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            opt.text = cmp[i];'||chr(10)),
     '            opt.text = cmp[i];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            element3.appendChild(opt);'||chr(10)),
     '            element3.appendChild(opt);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         for(i = 0; i < colstyle.length; i++) {'||chr(10)),
     '         for(i = 0; i < colstyle.length; i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            var opt1 = document.createElement("option");'||chr(10)),
     '            var opt1 = document.createElement("option");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            opt1.text = colstyle[i];'||chr(10)),
     '            opt1.text = colstyle[i];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            element5.appendChild(opt1);'||chr(10)),
     '            element5.appendChild(opt1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         for(i = 0; i < rowstyle.length; i++) {'||chr(10)),
     '         for(i = 0; i < rowstyle.length; i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            var opt2 = document.createElement("option");'||chr(10)),
     '            var opt2 = document.createElement("option");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            opt2.text = rowstyle[i];'||chr(10)),
     '            opt2.text = rowstyle[i];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            element6.appendChild(opt2);'||chr(10)),
     '            element6.appendChild(opt2);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         for(i = 0; i < tabstyle.length; i++) {'||chr(10)),
     '         for(i = 0; i < tabstyle.length; i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            var opt3 = document.createElement("option");'||chr(10)),
     '            var opt3 = document.createElement("option");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            opt3.text = tabstyle[i];'||chr(10)),
     '            opt3.text = tabstyle[i];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            element7.appendChild(opt3);'||chr(10)),
     '            element7.appendChild(opt3);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         break;'||chr(10)),
     '         break;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      case ''save'':'||chr(10)),
     '      case ''save'':'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var btn3 = "<a class=''awrexp_small'' title=''delete row'' onclick=\"deleteRow(getId(''table'',''columnrules''),this);\" >X</a>"'||chr(10)),
     '        var btn3 = "<a class=''awrexp_small'' title=''delete row'' onclick=\"deleteRow(getId(''table'',''columnrules''),this);\" >X</a>"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var lastRowIndex = rowCount ;'||chr(10)),
     '        var lastRowIndex = rowCount ;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var sel1 = document.getElementById(''colnewrowsel1'');'||chr(10)),
     '        var sel1 = document.getElementById(''colnewrowsel1'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var sel2 = document.getElementById(''colnewrowsel2'');'||chr(10)),
     '        var sel2 = document.getElementById(''colnewrowsel2'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var sel3 = document.getElementById(''colnewrowsel3'');'||chr(10)),
     '        var sel3 = document.getElementById(''colnewrowsel3'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var val4 = document.getElementById(''colnewrowsel4'');'||chr(10)),
     '        var val4 = document.getElementById(''colnewrowsel4'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var sel5 = document.getElementById(''colnewrowsel5'');'||chr(10)),
     '        var sel5 = document.getElementById(''colnewrowsel5'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var sel6 = document.getElementById(''colnewrowsel6'');'||chr(10)),
     '        var sel6 = document.getElementById(''colnewrowsel6'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var sel7 = document.getElementById(''colnewrowsel7'');'||chr(10)),
     '        var sel7 = document.getElementById(''colnewrowsel7'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        if (!val4.value){'||chr(10)),
     '        if (!val4.value){'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          alert("''value'' field cant be null");'||chr(10)),
     '          alert("''value'' field cant be null");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          return;'||chr(10)),
     '          return;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        }'||chr(10)),
     '        }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var opt1 = sel1.options[sel1.selectedIndex].getAttribute(''data-tab''); '||chr(10)),
     '        var opt1 = sel1.options[sel1.selectedIndex].getAttribute(''data-tab''); '||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var opt2 = sel2.options[sel2.selectedIndex].value; '||chr(10)),
     '        var opt2 = sel2.options[sel2.selectedIndex].value; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var opt3 = sel3.options[sel3.selectedIndex].value; '||chr(10)),
     '        var opt3 = sel3.options[sel3.selectedIndex].value; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var opt4 = val4.value ? val4.value : "";'||chr(10)),
     '        var opt4 = val4.value ? val4.value : "";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var opt5 = sel5.options[sel5.selectedIndex].value; '||chr(10)),
     '        var opt5 = sel5.options[sel5.selectedIndex].value; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var opt6 = sel6.options[sel6.selectedIndex].value; '||chr(10)),
     '        var opt6 = sel6.options[sel6.selectedIndex].value; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var opt7 = sel7.options[sel7.selectedIndex].value; '||chr(10)),
     '        var opt7 = sel7.options[sel7.selectedIndex].value; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         table.deleteRow(lastRowIndex-1);'||chr(10)),
     '         table.deleteRow(lastRowIndex-1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var row = table.insertRow(-1);'||chr(10)),
     '         var row = table.insertRow(-1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         row.setAttribute("class","awrc");'||chr(10)),
     '         row.setAttribute("class","awrc");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         txt = "<td>"+opt1+"</td>";  '||chr(10)),
     '         txt = "<td>"+opt1+"</td>";  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         txt += "<td>"+opt2+"</td>";  '||chr(10)),
     '         txt += "<td>"+opt2+"</td>";  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         txt += "<td>"+opt3+"</td>";  '||chr(10)),
     '         txt += "<td>"+opt3+"</td>";  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         txt += "<td>"+opt4+"</td>";  '||chr(10)),
     '         txt += "<td>"+opt4+"</td>";  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         txt += "<td>"+opt5+"</td>";  '||chr(10)),
     '         txt += "<td>"+opt5+"</td>";  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         txt += "<td>"+opt6+"</td>";  '||chr(10)),
     '         txt += "<td>"+opt6+"</td>";  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         txt += "<td>"+opt7+"</td>";  '||chr(10)),
     '         txt += "<td>"+opt7+"</td>";  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         txt += "<td>"+btn3+"</td>";  '||chr(10)),
     '         txt += "<td>"+btn3+"</td>";  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         row.innerHTML = txt;'||chr(10)),
     '         row.innerHTML = txt;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        document.getElementById("btnApplyRules").setAttribute(''class'',''awrexpbtnsave'');'||chr(10)),
     '        document.getElementById("btnApplyRules").setAttribute(''class'',''awrexpbtnsave'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        document.getElementById("btnExport").setAttribute(''class'',''awrexpbtnsave'');'||chr(10)),
     '        document.getElementById("btnExport").setAttribute(''class'',''awrexpbtnsave'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        break;'||chr(10)),
     '        break;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        '||chr(10)),
     '        '||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if (add.innerHTML === ''Add'') {'||chr(10)),
     '      if (add.innerHTML === ''Add'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        add.innerHTML = ''Save'';'||chr(10)),
     '        add.innerHTML = ''Save'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        add.setAttribute("class","awrexpbtnsave");'||chr(10)),
     '        add.setAttribute("class","awrexpbtnsave");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      } else {'||chr(10)),
     '      } else {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        add.innerHTML = ''Add'';'||chr(10)),
     '        add.innerHTML = ''Add'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        add.setAttribute("class","awrexpbtn");'||chr(10)),
     '        add.setAttribute("class","awrexpbtn");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  function addRowExcludeMenu(tableID) {'||chr(10)),
     '  function addRowExcludeMenu(tableID) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var add = document.getElementById(''btn_menurules'');'||chr(10)),
     '      var add = document.getElementById(''btn_menurules'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var table = document.getElementById(tableID);'||chr(10)),
     '      var table = document.getElementById(tableID);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var rowCount = table.rows.length;'||chr(10)),
     '      var rowCount = table.rows.length;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  '||chr(10)),
     '  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if (add.innerHTML === ''Add'') {'||chr(10)),
     '      if (add.innerHTML === ''Add'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        action = ''add'';'||chr(10)),
     '        action = ''add'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      } else {'||chr(10)),
     '      } else {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        action = ''save'';'||chr(10)),
     '        action = ''save'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      switch (action) {'||chr(10)),
     '      switch (action) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      case ''add'': '||chr(10)),
     '      case ''add'': '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var row = table.insertRow(rowCount);'||chr(10)),
     '         var row = table.insertRow(rowCount);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var cell1 = row.insertCell(0);'||chr(10)),
     '         var cell1 = row.insertCell(0);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var element1 = document.createElement("select");'||chr(10)),
     '        var element1 = document.createElement("select");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        element1.setAttribute("id","menunewrowsel1");'||chr(10)),
     '        element1.setAttribute("id","menunewrowsel1");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        loadMenuOptions(element1);'||chr(10)),
     '        loadMenuOptions(element1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        cell1.appendChild(element1);'||chr(10)),
     '        cell1.appendChild(element1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var cell2 = row.insertCell(1);'||chr(10)),
     '        var cell2 = row.insertCell(1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var element2 = document.createElement("select");'||chr(10)),
     '        var element2 = document.createElement("select");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        element2.setAttribute("id","menunewrowsel2");'||chr(10)),
     '        element2.setAttribute("id","menunewrowsel2");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        cell2.appendChild(element2);'||chr(10)),
     '        cell2.appendChild(element2);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        element1.setAttribute("onChange","loadSubMenuOptions()");'||chr(10)),
     '        element1.setAttribute("onChange","loadSubMenuOptions()");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        loadSubMenuOptions();'||chr(10)),
     '        loadSubMenuOptions();'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        break;'||chr(10)),
     '        break;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      case ''save'':'||chr(10)),
     '      case ''save'':'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var btn3 = "<a class=''awrexp_small'' title=''delete row'' onclick=\"deleteRow(''menurules'',this);\" >X</a>"'||chr(10)),
     '        var btn3 = "<a class=''awrexp_small'' title=''delete row'' onclick=\"deleteRow(''menurules'',this);\" >X</a>"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var lastRowIndex = rowCount ;'||chr(10)),
     '        var lastRowIndex = rowCount ;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var sel1 = document.getElementById(''menunewrowsel1'');'||chr(10)),
     '        var sel1 = document.getElementById(''menunewrowsel1'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var sel2 = document.getElementById(''menunewrowsel2'');'||chr(10)),
     '        var sel2 = document.getElementById(''menunewrowsel2'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var opt1 = sel1.options[sel1.selectedIndex].value; '||chr(10)),
     '        var opt1 = sel1.options[sel1.selectedIndex].value; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var opt2 = "";'||chr(10)),
     '        var opt2 = "";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        if (sel2.selectedIndex != -1) {'||chr(10)),
     '        if (sel2.selectedIndex != -1) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           opt2 = sel2.options[sel2.selectedIndex].value; '||chr(10)),
     '           opt2 = sel2.options[sel2.selectedIndex].value; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('        } '||chr(10)),
     '        } '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         table.deleteRow(lastRowIndex-1);'||chr(10)),
     '         table.deleteRow(lastRowIndex-1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var row = table.insertRow(-1);'||chr(10)),
     '         var row = table.insertRow(-1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         row.setAttribute("class","awrc");'||chr(10)),
     '         row.setAttribute("class","awrc");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         txt = "<td>"+opt1+"</td>";  '||chr(10)),
     '         txt = "<td>"+opt1+"</td>";  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         txt += "<td>"+opt2+"</td>";  '||chr(10)),
     '         txt += "<td>"+opt2+"</td>";  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         txt += "<td>"+btn3+"</td>";  '||chr(10)),
     '         txt += "<td>"+btn3+"</td>";  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         row.innerHTML = txt;'||chr(10)),
     '         row.innerHTML = txt;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        document.getElementById("btnApplyRules").setAttribute(''class'',''awrexpbtnsave'');'||chr(10)),
     '        document.getElementById("btnApplyRules").setAttribute(''class'',''awrexpbtnsave'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        document.getElementById("btnExport").setAttribute(''class'',''awrexpbtnsave'');'||chr(10)),
     '        document.getElementById("btnExport").setAttribute(''class'',''awrexpbtnsave'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        break;'||chr(10)),
     '        break;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        '||chr(10)),
     '        '||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if (add.innerHTML === ''Add'') {'||chr(10)),
     '      if (add.innerHTML === ''Add'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        add.innerHTML = ''Save'';'||chr(10)),
     '        add.innerHTML = ''Save'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        add.setAttribute("class","awrexpbtnsave");'||chr(10)),
     '        add.setAttribute("class","awrexpbtnsave");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      } else {'||chr(10)),
     '      } else {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        add.innerHTML = ''Add'';'||chr(10)),
     '        add.innerHTML = ''Add'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        add.setAttribute("class","awrexpbtn");'||chr(10)),
     '        add.setAttribute("class","awrexpbtn");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('function addColumnRule(tableID) {'||chr(10)),
     'function addColumnRule(tableID) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var add = document.getElementById(''btn_add_columnrules'');'||chr(10)),
     '      var add = document.getElementById(''btn_add_columnrules'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var table = document.getElementById(tableID);'||chr(10)),
     '      var table = document.getElementById(tableID);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var rowCount = table.rows.length;'||chr(10)),
     '      var rowCount = table.rows.length;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var action = "";'||chr(10)),
     '      var action = "";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var colHint = getObj(''div'',''columnrules''+''hint'');'||chr(10)),
     '      var colHint = getObj(''div'',''columnrules''+''hint'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if (add.innerHTML === ''Add'') {'||chr(10)),
     '      if (add.innerHTML === ''Add'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        action = ''add'';'||chr(10)),
     '        action = ''add'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      } else {'||chr(10)),
     '      } else {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        action = ''save'';'||chr(10)),
     '        action = ''save'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      switch (action) {'||chr(10)),
     '      switch (action) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      case ''add'': '||chr(10)),
     '      case ''add'': '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var row = table.insertRow(rowCount);'||chr(10)),
     '         var row = table.insertRow(rowCount);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var cell1 = row.insertCell(0);'||chr(10)),
     '         var cell1 = row.insertCell(0);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var cell2 = row.insertCell(1);'||chr(10)),
     '         var cell2 = row.insertCell(1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var cell3 = row.insertCell(2);'||chr(10)),
     '         var cell3 = row.insertCell(2);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var cell4 = row.insertCell(3);'||chr(10)),
     '         var cell4 = row.insertCell(3);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var cell5 = row.insertCell(4);'||chr(10)),
     '         var cell5 = row.insertCell(4);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var element1 = document.createElement("select");'||chr(10)),
     '         var element1 = document.createElement("select");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         element1.setAttribute("id","colnewrowsel1");'||chr(10)),
     '         element1.setAttribute("id","colnewrowsel1");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         element1.setAttribute("onChange","loadColumnOptions()");'||chr(10)),
     '         element1.setAttribute("onChange","loadColumnOptions()");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         loadTableOptions(element1);'||chr(10)),
     '         loadTableOptions(element1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         cell1.appendChild(element1);'||chr(10)),
     '         cell1.appendChild(element1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var element2 = document.createElement("textarea");'||chr(10)),
     '         var element2 = document.createElement("textarea");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         element2.rows= "5";'||chr(10)),
     '         element2.rows= "5";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         element2.cols= "50";'||chr(10)),
     '         element2.cols= "50";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         element2.setAttribute("id","colnewrowsel2");'||chr(10)),
     '         element2.setAttribute("id","colnewrowsel2");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         cell2.appendChild(element2);'||chr(10)),
     '         cell2.appendChild(element2);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         loadColumnOptions();'||chr(10)),
     '         loadColumnOptions();'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var element3 = document.createElement("select");'||chr(10)),
     '         var element3 = document.createElement("select");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         element3.setAttribute("id","colnewrowsel3");'||chr(10)),
     '         element3.setAttribute("id","colnewrowsel3");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         cell3.appendChild(element3);'||chr(10)),
     '         cell3.appendChild(element3);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var element4 = document.createElement("select");'||chr(10)),
     '         var element4 = document.createElement("select");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         element4.setAttribute("id","colnewrowsel4");'||chr(10)),
     '         element4.setAttribute("id","colnewrowsel4");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         cell4.appendChild(element4);'||chr(10)),
     '         cell4.appendChild(element4);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var element5 = document.createElement("select");'||chr(10)),
     '         var element5 = document.createElement("select");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         element5.setAttribute("id","colnewrowsel5");'||chr(10)),
     '         element5.setAttribute("id","colnewrowsel5");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         cell5.appendChild(element5);'||chr(10)),
     '         cell5.appendChild(element5);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var colstyle = ["","background-color:green","background-color:red",'||chr(10)),
     '         var colstyle = ["","background-color:green","background-color:red",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                            "background-color:orange",'||chr(10)),
     '                            "background-color:orange",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                            "color:green", "color:red","color:orange",'||chr(10)),
     '                            "color:green", "color:red","color:orange",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                            "display:none"]'||chr(10)),
     '                            "display:none"]'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var rowstyle = ["","background-color:green","background-color:red",'||chr(10)),
     '         var rowstyle = ["","background-color:green","background-color:red",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                            "background-color:orange",'||chr(10)),
     '                            "background-color:orange",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                            "color:green", "color:red","color:orange",'||chr(10)),
     '                            "color:green", "color:red","color:orange",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                            "display:none"]'||chr(10)),
     '                            "display:none"]'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var tabstyle = ["", "display:none","alert"]'||chr(10)),
     '         var tabstyle = ["", "display:none","alert"]'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         for(i = 0; i < colstyle.length; i++) {'||chr(10)),
     '         for(i = 0; i < colstyle.length; i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            var opt1 = document.createElement("option");'||chr(10)),
     '            var opt1 = document.createElement("option");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            opt1.text = colstyle[i];'||chr(10)),
     '            opt1.text = colstyle[i];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            element3.appendChild(opt1);'||chr(10)),
     '            element3.appendChild(opt1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         for(i = 0; i < rowstyle.length; i++) {'||chr(10)),
     '         for(i = 0; i < rowstyle.length; i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            var opt2 = document.createElement("option");'||chr(10)),
     '            var opt2 = document.createElement("option");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            opt2.text = rowstyle[i];'||chr(10)),
     '            opt2.text = rowstyle[i];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            element4.appendChild(opt2);'||chr(10)),
     '            element4.appendChild(opt2);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         for(i = 0; i < tabstyle.length; i++) {'||chr(10)),
     '         for(i = 0; i < tabstyle.length; i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            var opt3 = document.createElement("option");'||chr(10)),
     '            var opt3 = document.createElement("option");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            opt3.text = tabstyle[i];'||chr(10)),
     '            opt3.text = tabstyle[i];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            element5.appendChild(opt3);'||chr(10)),
     '            element5.appendChild(opt3);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         }'||chr(10)),
     '         }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         break;'||chr(10)),
     '         break;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      case ''save'':'||chr(10)),
     '      case ''save'':'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var btn3 = "<a class=''awrexp_small'' title=''delete row'' onclick=\"deleteRow(getId(''table'',''columnrules''),this);\" >X</a>"'||chr(10)),
     '        var btn3 = "<a class=''awrexp_small'' title=''delete row'' onclick=\"deleteRow(getId(''table'',''columnrules''),this);\" >X</a>"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var lastRowIndex = rowCount ;'||chr(10)),
     '        var lastRowIndex = rowCount ;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var sel1 = document.getElementById(''colnewrowsel1'');'||chr(10)),
     '        var sel1 = document.getElementById(''colnewrowsel1'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var sel2 = document.getElementById(''colnewrowsel2'');'||chr(10)),
     '        var sel2 = document.getElementById(''colnewrowsel2'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var sel3 = document.getElementById(''colnewrowsel3'');'||chr(10)),
     '        var sel3 = document.getElementById(''colnewrowsel3'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var sel4 = document.getElementById(''colnewrowsel4'');'||chr(10)),
     '        var sel4 = document.getElementById(''colnewrowsel4'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var sel5 = document.getElementById(''colnewrowsel5'');'||chr(10)),
     '        var sel5 = document.getElementById(''colnewrowsel5'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        if (!sel2.value){'||chr(10)),
     '        if (!sel2.value){'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          alert("''Rule'' field cant be null");'||chr(10)),
     '          alert("''Rule'' field cant be null");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          return;'||chr(10)),
     '          return;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        }'||chr(10)),
     '        }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var opt1 = sel1.options[sel1.selectedIndex].value; '||chr(10)),
     '        var opt1 = sel1.options[sel1.selectedIndex].value; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var opt2 = sel2.value ? sel2.value : "";'||chr(10)),
     '        var opt2 = sel2.value ? sel2.value : "";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var opt3 = sel3.options[sel3.selectedIndex].value; '||chr(10)),
     '        var opt3 = sel3.options[sel3.selectedIndex].value; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var opt4 = sel4.options[sel4.selectedIndex].value; '||chr(10)),
     '        var opt4 = sel4.options[sel4.selectedIndex].value; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var opt5 = sel5.options[sel5.selectedIndex].value; '||chr(10)),
     '        var opt5 = sel5.options[sel5.selectedIndex].value; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         table.deleteRow(lastRowIndex-1);'||chr(10)),
     '         table.deleteRow(lastRowIndex-1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var row = table.insertRow(-1);'||chr(10)),
     '         var row = table.insertRow(-1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         var tab = sel1.options[sel1.selectedIndex].getAttribute(''data-tab'');'||chr(10)),
     '         var tab = sel1.options[sel1.selectedIndex].getAttribute(''data-tab'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         row.setAttribute(''data-tab'',tab);'||chr(10)),
     '         row.setAttribute(''data-tab'',tab);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         row.setAttribute("class","awrc");'||chr(10)),
     '         row.setAttribute("class","awrc");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         txt = "<td>"+opt1+"</td>";  '||chr(10)),
     '         txt = "<td>"+opt1+"</td>";  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         txt += "<td>"+opt2+"</td>";  '||chr(10)),
     '         txt += "<td>"+opt2+"</td>";  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         txt += "<td>"+opt3+"</td>";  '||chr(10)),
     '         txt += "<td>"+opt3+"</td>";  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         txt += "<td>"+opt4+"</td>";  '||chr(10)),
     '         txt += "<td>"+opt4+"</td>";  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         txt += "<td>"+opt5+"</td>";  '||chr(10)),
     '         txt += "<td>"+opt5+"</td>";  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         txt += "<td>"+btn3+"</td>";  '||chr(10)),
     '         txt += "<td>"+btn3+"</td>";  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         row.innerHTML = txt;'||chr(10)),
     '         row.innerHTML = txt;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        document.getElementById("btnApplyRules").setAttribute(''class'',''awrexpbtnsave'');'||chr(10)),
     '        document.getElementById("btnApplyRules").setAttribute(''class'',''awrexpbtnsave'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        document.getElementById("btnExport").setAttribute(''class'',''awrexpbtnsave'');'||chr(10)),
     '        document.getElementById("btnExport").setAttribute(''class'',''awrexpbtnsave'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        break;'||chr(10)),
     '        break;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        '||chr(10)),
     '        '||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      if (add.innerHTML === ''Add'') {'||chr(10)),
     '      if (add.innerHTML === ''Add'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        add.innerHTML = ''Save'';'||chr(10)),
     '        add.innerHTML = ''Save'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        add.setAttribute("class","awrexpbtnsave");'||chr(10)),
     '        add.setAttribute("class","awrexpbtnsave");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        colHint.style.display = ''block'';'||chr(10)),
     '        colHint.style.display = ''block'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      } else {'||chr(10)),
     '      } else {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        add.innerHTML = ''Add'';'||chr(10)),
     '        add.innerHTML = ''Add'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        add.setAttribute("class","awrexpbtn");'||chr(10)),
     '        add.setAttribute("class","awrexpbtn");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        colHint.style.display = ''none'';'||chr(10)),
     '        colHint.style.display = ''none'';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('function deleteRow(tableId, row)'||chr(10)),
     'function deleteRow(tableId, row)'||chr(10));
  dbms_lob.writeappend(clb, 
     length('{'||chr(10)),
     '{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var node = row;'||chr(10)),
     '    var node = row;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var tag = node.tagName;'||chr(10)),
     '    var tag = node.tagName;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    while(!(tag === ''TR'')) {'||chr(10)),
     '    while(!(tag === ''TR'')) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      node = node.parentNode;  '||chr(10)),
     '      node = node.parentNode;  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('      tag = node.tagName;'||chr(10)),
     '      tag = node.tagName;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    } '||chr(10)),
     '    } '||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var i=node.rowIndex;'||chr(10)),
     '    var i=node.rowIndex;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    document.getElementById(tableId).deleteRow(i);'||chr(10)),
     '    document.getElementById(tableId).deleteRow(i);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    document.getElementById("btnApplyRules").setAttribute(''class'',''awrexpbtnsave'');'||chr(10)),
     '    document.getElementById("btnApplyRules").setAttribute(''class'',''awrexpbtnsave'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    document.getElementById("btnExport").setAttribute(''class'',''awrexpbtnsave'');'||chr(10)),
     '    document.getElementById("btnExport").setAttribute(''class'',''awrexpbtnsave'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('function deleteCell(tableId, row, colnum)'||chr(10)),
     'function deleteCell(tableId, row, colnum)'||chr(10));
  dbms_lob.writeappend(clb, 
     length('{'||chr(10)),
     '{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var rowNode=row.parentNode.parentNode;'||chr(10)),
     '    var rowNode=row.parentNode.parentNode;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    rowNode.deleteCell(colnum);'||chr(10)),
     '    rowNode.deleteCell(colnum);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    document.getElementById("btnApplyRules").setAttribute(''class'',''awrexpbtnsave'');'||chr(10)),
     '    document.getElementById("btnApplyRules").setAttribute(''class'',''awrexpbtnsave'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    document.getElementById("btnExport").setAttribute(''class'',''awrexpbtnsave'');'||chr(10)),
     '    document.getElementById("btnExport").setAttribute(''class'',''awrexpbtnsave'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('function loadTableOptions(selectEle) {'||chr(10)),
     'function loadTableOptions(selectEle) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  var tabs = g_HcData[''STATS''];'||chr(10)),
     '  var tabs = g_HcData[''STATS''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  for(tab in tabs) {'||chr(10)),
     '  for(tab in tabs) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var comment = g_HcData[''STATS''][tab][''SDESC''];'||chr(10)),
     '    var comment = g_HcData[''STATS''][tab][''SDESC''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var opt = document.createElement(''option'');'||chr(10)),
     '    var opt = document.createElement(''option'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    opt.text = tab;'||chr(10)),
     '    opt.text = tab;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    opt.setAttribute(''data-tab'',tab);'||chr(10)),
     '    opt.setAttribute(''data-tab'',tab);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    selectEle.appendChild(opt);'||chr(10)),
     '    selectEle.appendChild(opt);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('function loadColumnOptionsCBox() {'||chr(10)),
     'function loadColumnOptionsCBox() {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  var tabs = g_HcData[''STATS''];'||chr(10)),
     '  var tabs = g_HcData[''STATS''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  var sel1 = document.getElementById(''groupbysel1'');'||chr(10)),
     '  var sel1 = document.getElementById(''groupbysel1'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  var sel2 = document.getElementById(''groupbysel2'');'||chr(10)),
     '  var sel2 = document.getElementById(''groupbysel2'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  sel2.innerHTML='''';'||chr(10)),
     '  sel2.innerHTML='''';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  var statName  = sel1.options[sel1.selectedIndex].value;'||chr(10)),
     '  var statName  = sel1.options[sel1.selectedIndex].value;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  var statData = tabs[statName];'||chr(10)),
     '  var statData = tabs[statName];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  var cols = statData.COLS;'||chr(10)),
     '  var cols = statData.COLS;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  if (!cols)'||chr(10)),
     '  if (!cols)'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    return;'||chr(10)),
     '    return;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  for(col in cols) {'||chr(10)),
     '  for(col in cols) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var opt = document.createElement(''input'');'||chr(10)),
     '    var opt = document.createElement(''input'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var txt = document.createElement(''a'');'||chr(10)),
     '    var txt = document.createElement(''a'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    opt.setAttribute("type", "checkbox");'||chr(10)),
     '    opt.setAttribute("type", "checkbox");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    opt.setAttribute("value", col);'||chr(10)),
     '    opt.setAttribute("value", col);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    opt.setAttribute("name", "groupbycbox"+statName+col);'||chr(10)),
     '    opt.setAttribute("name", "groupbycbox"+statName+col);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    txt.innerHTML = col+"<br>";'||chr(10)),
     '    txt.innerHTML = col+"<br>";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    sel2.appendChild(opt);'||chr(10)),
     '    sel2.appendChild(opt);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    sel2.appendChild(txt);'||chr(10)),
     '    sel2.appendChild(txt);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    '||chr(10)),
     '    '||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('function loadColumnOptions() {'||chr(10)),
     'function loadColumnOptions() {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  var tabs = g_HcData[''STATS''];'||chr(10)),
     '  var tabs = g_HcData[''STATS''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  var sel1 = document.getElementById(''colnewrowsel1'');'||chr(10)),
     '  var sel1 = document.getElementById(''colnewrowsel1'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  var sel2 = getObj(''div'',''columnrules''+''hint'');'||chr(10)),
     '  var sel2 = getObj(''div'',''columnrules''+''hint'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  sel2.innerHTML='''';'||chr(10)),
     '  sel2.innerHTML='''';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  var tab = sel1.options[sel1.selectedIndex].getAttribute(''data-tab'');'||chr(10)),
     '  var tab = sel1.options[sel1.selectedIndex].getAttribute(''data-tab'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  var statData = tabs[tab];'||chr(10)),
     '  var statData = tabs[tab];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  var cols = statData.COLS;'||chr(10)),
     '  var cols = statData.COLS;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  if (!cols)'||chr(10)),
     '  if (!cols)'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    return;'||chr(10)),
     '    return;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  var colstr = '''';'||chr(10)),
     '  var colstr = '''';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  var comma = '''';'||chr(10)),
     '  var comma = '''';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  var nl = '''';'||chr(10)),
     '  var nl = '''';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  var colno = 1;'||chr(10)),
     '  var colno = 1;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  var colnameTab = createElement(''table'','''',''tdiff'');'||chr(10)),
     '  var colnameTab = createElement(''table'','''',''tdiff'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  var row = colnameTab.insertRow(-1);'||chr(10)),
     '  var row = colnameTab.insertRow(-1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  for(col in cols) {'||chr(10)),
     '  for(col in cols) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    nl = '''';'||chr(10)),
     '    nl = '''';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (!(colno % 7)) {'||chr(10)),
     '    if (!(colno % 7)) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      row = colnameTab.insertRow(-1);'||chr(10)),
     '      row = colnameTab.insertRow(-1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var td = createElement(''td'','''',''awrc'');'||chr(10)),
     '    var td = createElement(''td'','''',''awrc'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    td.innerHTML = col;'||chr(10)),
     '    td.innerHTML = col;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    row.appendChild(td);'||chr(10)),
     '    row.appendChild(td);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    colno++;'||chr(10)),
     '    colno++;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  sel2.appendChild(colnameTab);'||chr(10)),
     '  sel2.appendChild(colnameTab);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('function loadMenuOptions(selectEle) {'||chr(10)),
     'function loadMenuOptions(selectEle) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var level1 = g_HcData[''METADATA''][''LEVEL1''];'||chr(10)),
     '    var level1 = g_HcData[''METADATA''][''LEVEL1''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    for (m in level1) {'||chr(10)),
     '    for (m in level1) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var option = document.createElement(''option'');'||chr(10)),
     '      var option = document.createElement(''option'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      option.text = m;'||chr(10)),
     '      option.text = m;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      selectEle.appendChild(option);'||chr(10)),
     '      selectEle.appendChild(option);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('/*'||chr(10)),
     '/*'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    for (m in g_manualMenu) {'||chr(10)),
     '    for (m in g_manualMenu) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      var option = document.createElement(''option'');'||chr(10)),
     '      var option = document.createElement(''option'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      option.text = m;'||chr(10)),
     '      option.text = m;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      selectEle.appendChild(option);'||chr(10)),
     '      selectEle.appendChild(option);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('*/'||chr(10)),
     '*/'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('function loadSubMenuOptions() {'||chr(10)),
     'function loadSubMenuOptions() {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var sel1 = document.getElementById(''menunewrowsel1'');'||chr(10)),
     '   var sel1 = document.getElementById(''menunewrowsel1'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var sel2 = document.getElementById(''menunewrowsel2'');'||chr(10)),
     '   var sel2 = document.getElementById(''menunewrowsel2'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   '||chr(10)),
     '   '||chr(10));
  dbms_lob.writeappend(clb, 
     length('   sel2.innerHTML='''';'||chr(10)),
     '   sel2.innerHTML='''';'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var level2 = g_HcData[''METADATA''][''LEVEL2''];'||chr(10)),
     '   var level2 = g_HcData[''METADATA''][''LEVEL2''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   if (sel1.selectedIndex == -1) {'||chr(10)),
     '   if (sel1.selectedIndex == -1) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     return;'||chr(10)),
     '     return;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   }'||chr(10)),
     '   }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var menuItem = sel1.options[sel1.selectedIndex].value;'||chr(10)),
     '   var menuItem = sel1.options[sel1.selectedIndex].value;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var opt = document.createElement("option");'||chr(10)),
     '   var opt = document.createElement("option");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   opt.text = "";'||chr(10)),
     '   opt.text = "";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   sel2.appendChild(opt);'||chr(10)),
     '   sel2.appendChild(opt);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   for(sm in level2) {'||chr(10)),
     '   for(sm in level2) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (sm.indexOf(menuItem) == 0) {'||chr(10)),
     '     if (sm.indexOf(menuItem) == 0) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var sm1 = sm.replace(menuItem+":","");'||chr(10)),
     '       var sm1 = sm.replace(menuItem+":","");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       opt = document.createElement("option");'||chr(10)),
     '       opt = document.createElement("option");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       opt.text = sm1;'||chr(10)),
     '       opt.text = sm1;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       sel2.appendChild(opt);'||chr(10)),
     '       sel2.appendChild(opt);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   }'||chr(10)),
     '   }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('function tableToJson(table, has_header) { '||chr(10)),
     'function tableToJson(table, has_header) { '||chr(10));
  dbms_lob.writeappend(clb, 
     length('var data = []; // first row needs to be headers '||chr(10)),
     'var data = []; // first row needs to be headers '||chr(10));
  dbms_lob.writeappend(clb, 
     length('var headers = []; '||chr(10)),
     'var headers = []; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('  for (var i=0; i<table.rows[0].cells.length; i++) {'||chr(10)),
     '  for (var i=0; i<table.rows[0].cells.length; i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (has_header)  {'||chr(10)),
     '    if (has_header)  {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      headers[i] = '||chr(10)),
     '      headers[i] = '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         table.rows[0].cells[i].innerHTML.toLowerCase().replace(/ /gi,''''); '||chr(10)),
     '         table.rows[0].cells[i].innerHTML.toLowerCase().replace(/ /gi,''''); '||chr(10));
  dbms_lob.writeappend(clb, 
     length('    } else {'||chr(10)),
     '    } else {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      headers[i] = ''col''+i;'||chr(10)),
     '      headers[i] = ''col''+i;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  } '||chr(10)),
     '  } '||chr(10));
  dbms_lob.writeappend(clb, 
     length(' i = has_header ? 1 : 0;'||chr(10)),
     ' i = has_header ? 1 : 0;'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' for (; i<table.rows.length; i++) { '||chr(10)),
     ' for (; i<table.rows.length; i++) { '||chr(10));
  dbms_lob.writeappend(clb, 
     length(' var tableRow = table.rows[i]; var rowData = {}; '||chr(10)),
     ' var tableRow = table.rows[i]; var rowData = {}; '||chr(10));
  dbms_lob.writeappend(clb, 
     length(' for (var j=0; j<tableRow.cells.length; j++) { '||chr(10)),
     ' for (var j=0; j<tableRow.cells.length; j++) { '||chr(10));
  dbms_lob.writeappend(clb, 
     length(' rowData[ headers[j] ] = tableRow.cells[j].innerHTML; '||chr(10)),
     ' rowData[ headers[j] ] = tableRow.cells[j].innerHTML; '||chr(10));
  dbms_lob.writeappend(clb, 
     length(' } data.push(rowData); '||chr(10)),
     ' } data.push(rowData); '||chr(10));
  dbms_lob.writeappend(clb, 
     length(' } '||chr(10)),
     ' } '||chr(10));
  dbms_lob.writeappend(clb, 
     length(' return data; '||chr(10)),
     ' return data; '||chr(10));
  dbms_lob.writeappend(clb, 
     length(' }'||chr(10)),
     ' }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('function tableToJsonMenuRules() { '||chr(10)),
     'function tableToJsonMenuRules() { '||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var table = document.getElementById(''menurules'');'||chr(10)),
     '   var table = document.getElementById(''menurules'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var menuRules = {};'||chr(10)),
     '   var menuRules = {};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   for (var i = 1; i<table.rows.length; i++) { '||chr(10)),
     '   for (var i = 1; i<table.rows.length; i++) { '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var tableRow = table.rows[i]; '||chr(10)),
     '     var tableRow = table.rows[i]; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var menuItem = tableRow.cells[0].innerHTML; '||chr(10)),
     '     var menuItem = tableRow.cells[0].innerHTML; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var subMenuItem = tableRow.cells[1].innerHTML; '||chr(10)),
     '     var subMenuItem = tableRow.cells[1].innerHTML; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     '||chr(10)),
     '     '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var menuId = menuItem+ (subMenuItem ? '':''+subMenuItem : "");     '||chr(10)),
     '     var menuId = menuItem+ (subMenuItem ? '':''+subMenuItem : "");     '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     menuRules[menuId] = { ''exclude'' : ''true'' };'||chr(10)),
     '     menuRules[menuId] = { ''exclude'' : ''true'' };'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   } '||chr(10)),
     '   } '||chr(10));
  dbms_lob.writeappend(clb, 
     length('   return menuRules; '||chr(10)),
     '   return menuRules; '||chr(10));
  dbms_lob.writeappend(clb, 
     length(' }'||chr(10)),
     ' }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('function tableToJsonColumnRules() { '||chr(10)),
     'function tableToJsonColumnRules() { '||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var table = getObj(''table'',''columnrules'');'||chr(10)),
     '   var table = getObj(''table'',''columnrules'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var columnRules = {};'||chr(10)),
     '   var columnRules = {};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   for (var i = 1; i<table.rows.length; i++) { '||chr(10)),
     '   for (var i = 1; i<table.rows.length; i++) { '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var tableRow = table.rows[i]; '||chr(10)),
     '     var tableRow = table.rows[i]; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var  tab = tableRow.getAttribute(''data-tab'');'||chr(10)),
     '     var  tab = tableRow.getAttribute(''data-tab'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var statName = tab;'||chr(10)),
     '     var statName = tab;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var colName = tableRow.cells[0].innerHTML; '||chr(10)),
     '     var colName = tableRow.cells[0].innerHTML; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var rule = tableRow.cells[1].innerHTML; '||chr(10)),
     '     var rule = tableRow.cells[1].innerHTML; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var col_style = tableRow.cells[2].innerHTML; '||chr(10)),
     '     var col_style = tableRow.cells[2].innerHTML; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var row_style = tableRow.cells[3].innerHTML; '||chr(10)),
     '     var row_style = tableRow.cells[3].innerHTML; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var table_style = tableRow.cells[4].innerHTML; '||chr(10)),
     '     var table_style = tableRow.cells[4].innerHTML; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (!columnRules[statName]) {'||chr(10)),
     '     if (!columnRules[statName]) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       columnRules[statName] = [];'||chr(10)),
     '       columnRules[statName] = [];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var reLt = new RegExp(/\&lt;/g);'||chr(10)),
     '     var reLt = new RegExp(/\&lt;/g);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var reGt = new RegExp(/\&gt;/g);'||chr(10)),
     '     var reGt = new RegExp(/\&gt;/g);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var reAmp = new RegExp(/\&amp;/g);'||chr(10)),
     '     var reAmp = new RegExp(/\&amp;/g);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     rule = rule.replace(reLt,"<");'||chr(10)),
     '     rule = rule.replace(reLt,"<");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     rule = rule.replace(reGt,">");'||chr(10)),
     '     rule = rule.replace(reGt,">");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     rule = rule.replace(reAmp,"&");'||chr(10)),
     '     rule = rule.replace(reAmp,"&");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var rule = { ''expr'' : rule};'||chr(10)),
     '     var rule = { ''expr'' : rule};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (col_style) {'||chr(10)),
     '     if (col_style) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       rule[''column-style''] = col_style;'||chr(10)),
     '       rule[''column-style''] = col_style;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (row_style) {'||chr(10)),
     '     if (row_style) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       rule[''row-style''] = row_style;'||chr(10)),
     '       rule[''row-style''] = row_style;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (table_style) {'||chr(10)),
     '     if (table_style) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       rule[''table-style''] = table_style;'||chr(10)),
     '       rule[''table-style''] = table_style;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     columnRules[statName].push(rule);'||chr(10)),
     '     columnRules[statName].push(rule);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   } '||chr(10)),
     '   } '||chr(10));
  dbms_lob.writeappend(clb, 
     length('   return columnRules; '||chr(10)),
     '   return columnRules; '||chr(10));
  dbms_lob.writeappend(clb, 
     length(' }'||chr(10)),
     ' }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('function tableToJsonGroupBy() { '||chr(10)),
     'function tableToJsonGroupBy() { '||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var table = getObj(''table'',''groupby'');'||chr(10)),
     '   var table = getObj(''table'',''groupby'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var groupBy = {};'||chr(10)),
     '   var groupBy = {};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   for (var i = 1; i<table.rows.length; i++) { '||chr(10)),
     '   for (var i = 1; i<table.rows.length; i++) { '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var tableRow = table.rows[i]; '||chr(10)),
     '     var tableRow = table.rows[i]; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var tabName = tableRow.cells[0].innerHTML; '||chr(10)),
     '     var tabName = tableRow.cells[0].innerHTML; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var gbyKey = tableRow.cells[1].innerHTML; '||chr(10)),
     '     var gbyKey = tableRow.cells[1].innerHTML; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var aggCols = tableRow.cells[2].innerHTML; '||chr(10)),
     '     var aggCols = tableRow.cells[2].innerHTML; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     '||chr(10)),
     '     '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var keyArr = gbyKey.split(",");'||chr(10)),
     '     var keyArr = gbyKey.split(",");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var aggArr = aggCols.split(",");'||chr(10)),
     '     var aggArr = aggCols.split(",");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     groupBy[tabName] = { '||chr(10)),
     '     groupBy[tabName] = { '||chr(10));
  dbms_lob.writeappend(clb, 
     length('                        "KEY_COLS":keyArr,'||chr(10)),
     '                        "KEY_COLS":keyArr,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                        "AGG_COLS":aggArr'||chr(10)),
     '                        "AGG_COLS":aggArr'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                        }'||chr(10)),
     '                        }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   } '||chr(10)),
     '   } '||chr(10));
  dbms_lob.writeappend(clb, 
     length('   return groupBy; '||chr(10)),
     '   return groupBy; '||chr(10));
  dbms_lob.writeappend(clb, 
     length(' }'||chr(10)),
     ' }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('function getCurrentConfig() {'||chr(10)),
     'function getCurrentConfig() {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var colJSON = tableToJsonColumnRules();'||chr(10)),
     '    var colJSON = tableToJsonColumnRules();'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var menuJSON = tableToJsonMenuRules();'||chr(10)),
     '    var menuJSON = tableToJsonMenuRules();'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var groupByJSON = tableToJsonGroupBy();'||chr(10)),
     '    var groupByJSON = tableToJsonGroupBy();'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var rulesJSON = { ''COLUMN'' : colJSON ,'||chr(10)),
     '    var rulesJSON = { ''COLUMN'' : colJSON ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                      ''MENU'' : menuJSON ,'||chr(10)),
     '                      ''MENU'' : menuJSON ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                      ''GROUPBY'' : groupByJSON ,'||chr(10)),
     '                      ''GROUPBY'' : groupByJSON ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                    };'||chr(10)),
     '                    };'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    return rulesJSON;'||chr(10)),
     '    return rulesJSON;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('function applyChanges() {'||chr(10)),
     'function applyChanges() {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  '||chr(10)),
     '  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var rulesJSON = getCurrentConfig();'||chr(10)),
     '    var rulesJSON = getCurrentConfig();'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    g_configRules = rulesJSON;'||chr(10)),
     '    g_configRules = rulesJSON;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    removeDivs();      '||chr(10)),
     '    removeDivs();      '||chr(10));
  dbms_lob.writeappend(clb, 
     length('    processHCJSON();'||chr(10)),
     '    processHCJSON();'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    document.getElementById(''aREPORT-MAP:CONFIG'')'||chr(10)),
     '    document.getElementById(''aREPORT-MAP:CONFIG'')'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            .click();'||chr(10)),
     '            .click();'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    document.getElementById("btnApplyRules")'||chr(10)),
     '    document.getElementById("btnApplyRules")'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            .setAttribute(''class'',''awrexpbtnhide'');'||chr(10)),
     '            .setAttribute(''class'',''awrexpbtnhide'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' function computeGroupBy(statData, gbcols, aggcols) {'||chr(10)),
     ' function computeGroupBy(statData, gbcols, aggcols) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var tabrows = statData.ROWS;'||chr(10)),
     '   var tabrows = statData.ROWS;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var cols = statData.COLS;'||chr(10)),
     '   var cols = statData.COLS;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var newTabName = "Aggregate: "+statData.NAME;'||chr(10)),
     '   var newTabName = "Aggregate: "+statData.NAME;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var newRows = {};'||chr(10)),
     '   var newRows = {};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var newCols = {};'||chr(10)),
     '   var newCols = {};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var nc = 0;'||chr(10)),
     '   var nc = 0;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var numNewCols = gbcols.length + aggcols.length + 1;'||chr(10)),
     '   var numNewCols = gbcols.length + aggcols.length + 1;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   newCols[''GROUP_KEY''] = { "TYPE":"1", "COL_NUM":nc++};'||chr(10)),
     '   newCols[''GROUP_KEY''] = { "TYPE":"1", "COL_NUM":nc++};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   newCols[''GROUP_ROWS''] = {"TYPE":"1", "COL_NUM":nc++};'||chr(10)),
     '   newCols[''GROUP_ROWS''] = {"TYPE":"1", "COL_NUM":nc++};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   for (var gc = 0 ; gc < gbcols.length; gc++,nc++) {'||chr(10)),
     '   for (var gc = 0 ; gc < gbcols.length; gc++,nc++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     newCols[gbcols[gc]] = {"TYPE":"1", "COL_NUM":nc};'||chr(10)),
     '     newCols[gbcols[gc]] = {"TYPE":"1", "COL_NUM":nc};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   }'||chr(10)),
     '   }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   for ( var ac = 0; ac < aggcols.length; ac++,nc++) {'||chr(10)),
     '   for ( var ac = 0; ac < aggcols.length; ac++,nc++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     newCols[aggcols[ac]] = {"TYPE":"2", "COL_NUM":nc};'||chr(10)),
     '     newCols[aggcols[ac]] = {"TYPE":"2", "COL_NUM":nc};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   }'||chr(10)),
     '   }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var groupRows = {};'||chr(10)),
     '   var groupRows = {};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var aggCount = {};'||chr(10)),
     '   var aggCount = {};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   for (var r = 0; r < tabrows.length; r++) {'||chr(10)),
     '   for (var r = 0; r < tabrows.length; r++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var row = tabrows[r];'||chr(10)),
     '     var row = tabrows[r];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var grpkey = "";'||chr(10)),
     '     var grpkey = "";'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var valId = 0;'||chr(10)),
     '     var valId = 0;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    '||chr(10)),
     '    '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     for (var gc = 0 ; gc < gbcols.length; gc++) {'||chr(10)),
     '     for (var gc = 0 ; gc < gbcols.length; gc++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var colno = cols[gbcols[gc]][''COL_NUM''];'||chr(10)),
     '       var colno = cols[gbcols[gc]][''COL_NUM''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       grpkey += row[colno];'||chr(10)),
     '       grpkey += row[colno];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (!newRows[grpkey]) {'||chr(10)),
     '     if (!newRows[grpkey]) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        newRows[grpkey] = [];'||chr(10)),
     '        newRows[grpkey] = [];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        newRows[grpkey][1] = [];'||chr(10)),
     '        newRows[grpkey][1] = [];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     newRows[grpkey][valId++] = grpkey;'||chr(10)),
     '     newRows[grpkey][valId++] = grpkey;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     newRows[grpkey][valId++].push(row);'||chr(10)),
     '     newRows[grpkey][valId++].push(row);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     '||chr(10)),
     '     '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     for (var gc = 0; gc < gbcols.length; gc++) {'||chr(10)),
     '     for (var gc = 0; gc < gbcols.length; gc++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var colno =  cols[gbcols[gc]][''COL_NUM''];'||chr(10)),
     '       var colno =  cols[gbcols[gc]][''COL_NUM''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       newRows[grpkey][valId++] = row[colno];'||chr(10)),
     '       newRows[grpkey][valId++] = row[colno];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (!aggCount[grpkey]) {'||chr(10)),
     '     if (!aggCount[grpkey]) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       aggCount[grpkey] = 0; '||chr(10)),
     '       aggCount[grpkey] = 0; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     for (var ac = 0 ; ac < aggcols.length; ac++) {'||chr(10)),
     '     for (var ac = 0 ; ac < aggcols.length; ac++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var aggFmt = /([a-zA-Z]+)\((.+)\)/;'||chr(10)),
     '       var aggFmt = /([a-zA-Z]+)\((.+)\)/;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var arr = aggFmt.exec(aggcols[ac]);'||chr(10)),
     '       var arr = aggFmt.exec(aggcols[ac]);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (!arr || arr.length != 3) {'||chr(10)),
     '       if (!arr || arr.length != 3) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         alert(''groupBY:invalid agg - ''+aggcols[ac]);'||chr(10)),
     '         alert(''groupBY:invalid agg - ''+aggcols[ac]);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       } '||chr(10)),
     '       } '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var aggFunc = arr[1].toLowerCase();'||chr(10)),
     '       var aggFunc = arr[1].toLowerCase();'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       var aggCol = arr[2];'||chr(10)),
     '       var aggCol = arr[2];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (aggFunc != ''count'' && aggFunc != ''sum'' &&'||chr(10)),
     '       if (aggFunc != ''count'' && aggFunc != ''sum'' &&'||chr(10));
  dbms_lob.writeappend(clb, 
     length('           aggFunc != ''min'' && aggFunc != ''max'' && aggFunc != ''avg'') '||chr(10)),
     '           aggFunc != ''min'' && aggFunc != ''max'' && aggFunc != ''avg'') '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       {'||chr(10)),
     '       {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('         alert(''groupBY:invalid agg - ''+aggFunc);'||chr(10)),
     '         alert(''groupBY:invalid agg - ''+aggFunc);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       } '||chr(10)),
     '       } '||chr(10));
  dbms_lob.writeappend(clb, 
     length('    '||chr(10)),
     '    '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       if (aggCol === ''*'') '||chr(10)),
     '       if (aggCol === ''*'') '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         aggCol = cols[gbcols[0]][''COL_NUM'']; '||chr(10)),
     '         aggCol = cols[gbcols[0]][''COL_NUM'']; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       else '||chr(10)),
     '       else '||chr(10));
  dbms_lob.writeappend(clb, 
     length('         aggCol = cols[aggCol][''COL_NUM''];'||chr(10)),
     '         aggCol = cols[aggCol][''COL_NUM''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       newRows[grpkey][valId] = computeAgg(aggFunc, row[aggCol], '||chr(10)),
     '       newRows[grpkey][valId] = computeAgg(aggFunc, row[aggCol], '||chr(10));
  dbms_lob.writeappend(clb, 
     length('                                 newRows[grpkey][valId], aggCount[grpkey]);'||chr(10)),
     '                                 newRows[grpkey][valId], aggCount[grpkey]);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      '||chr(10)),
     '      '||chr(10));
  dbms_lob.writeappend(clb, 
     length('       valId++;'||chr(10)),
     '       valId++;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }  '||chr(10)),
     '     }  '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     aggCount[grpkey]++;'||chr(10)),
     '     aggCount[grpkey]++;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   }'||chr(10)),
     '   }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var newRows1 = [];'||chr(10)),
     '   var newRows1 = [];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var nr = 0;'||chr(10)),
     '   var nr = 0;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   for(key in newRows) {'||chr(10)),
     '   for(key in newRows) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    newRows1[nr] = newRows[key];'||chr(10)),
     '    newRows1[nr] = newRows[key];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    nr++;'||chr(10)),
     '    nr++;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   }'||chr(10)),
     '   }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   var newTable = {};'||chr(10)),
     '   var newTable = {};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   newTable.ROWS = newRows1;'||chr(10)),
     '   newTable.ROWS = newRows1;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   newTable.NAME = newTabName;'||chr(10)),
     '   newTable.NAME = newTabName;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   newTable.NROWS = nr;'||chr(10)),
     '   newTable.NROWS = nr;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   newTable.COLS = newCols;'||chr(10)),
     '   newTable.COLS = newCols;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   newTable.BASE_TAB_COLS = cols;'||chr(10)),
     '   newTable.BASE_TAB_COLS = cols;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   '||chr(10)),
     '   '||chr(10));
  dbms_lob.writeappend(clb, 
     length('   return newTable;'||chr(10)),
     '   return newTable;'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' }'||chr(10)),
     ' }'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' function computeAgg(aggFunc, newVal, aggVal, cnt) {'||chr(10)),
     ' function computeAgg(aggFunc, newVal, aggVal, cnt) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   newVal = parseInt(newVal);'||chr(10)),
     '   newVal = parseInt(newVal);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   aggVal = parseInt(aggVal);'||chr(10)),
     '   aggVal = parseInt(aggVal);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   switch(aggFunc) {'||chr(10)),
     '   switch(aggFunc) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   case ''min'':'||chr(10)),
     '   case ''min'':'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (!aggVal) {'||chr(10)),
     '    if (!aggVal) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      return newVal;'||chr(10)),
     '      return newVal;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    } else {'||chr(10)),
     '    } else {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      return Math.min(newVal,aggVal);'||chr(10)),
     '      return Math.min(newVal,aggVal);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    break;'||chr(10)),
     '    break;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   case ''max'':'||chr(10)),
     '   case ''max'':'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (!aggVal) {'||chr(10)),
     '    if (!aggVal) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     return newVal;'||chr(10)),
     '     return newVal;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    } else {'||chr(10)),
     '    } else {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      return Math.max(newVal,aggVal);'||chr(10)),
     '      return Math.max(newVal,aggVal);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    break;'||chr(10)),
     '    break;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   case ''sum'':'||chr(10)),
     '   case ''sum'':'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (!aggVal) {'||chr(10)),
     '    if (!aggVal) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      aggVal = 0;'||chr(10)),
     '      aggVal = 0;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (!newVal) {'||chr(10)),
     '    if (!newVal) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      newVal = 0;'||chr(10)),
     '      newVal = 0;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    return newVal+aggVal;'||chr(10)),
     '    return newVal+aggVal;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    break;'||chr(10)),
     '    break;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   case ''avg'':'||chr(10)),
     '   case ''avg'':'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (!aggVal) {'||chr(10)),
     '    if (!aggVal) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      aggVal = 0; '||chr(10)),
     '      aggVal = 0; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('    }'||chr(10)),
     '    }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var prevSum = aggVal * cnt;'||chr(10)),
     '    var prevSum = aggVal * cnt;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    var avg = (prevSum + newVal)/(cnt+1);'||chr(10)),
     '    var avg = (prevSum + newVal)/(cnt+1);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    return avg;'||chr(10)),
     '    return avg;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    break;'||chr(10)),
     '    break;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   case ''count'':'||chr(10)),
     '   case ''count'':'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (!aggVal) '||chr(10)),
     '    if (!aggVal) '||chr(10));
  dbms_lob.writeappend(clb, 
     length('      aggVal = 0;'||chr(10)),
     '      aggVal = 0;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    if (newVal != ''NULL'')'||chr(10)),
     '    if (newVal != ''NULL'')'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      return aggVal+1;'||chr(10)),
     '      return aggVal+1;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    else '||chr(10)),
     '    else '||chr(10));
  dbms_lob.writeappend(clb, 
     length('      return aggVal;'||chr(10)),
     '      return aggVal;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    break;'||chr(10)),
     '    break;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   }'||chr(10)),
     '   }'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' }'||chr(10)),
     ' }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   function toggleSortClass (id, tabid) {'||chr(10)),
     '   function toggleSortClass (id, tabid) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var th = document.getElementById(id);'||chr(10)),
     '     var th = document.getElementById(id);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var tab = document.getElementById(tabid);'||chr(10)),
     '     var tab = document.getElementById(tabid);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var thead = tab.getElementsByTagName(''thead'')[0];'||chr(10)),
     '     var thead = tab.getElementsByTagName(''thead'')[0];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var header = thead.getElementsByTagName(''tr'')[0];'||chr(10)),
     '     var header = thead.getElementsByTagName(''tr'')[0];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var hcols = header.getElementsByTagName(''th'');'||chr(10)),
     '     var hcols = header.getElementsByTagName(''th'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     for (var i = 0 ; i < hcols.length; i++) {'||chr(10)),
     '     for (var i = 0 ; i < hcols.length; i++) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var thisid = hcols[i].getAttribute(''id'');'||chr(10)),
     '        var thisid = hcols[i].getAttribute(''id'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        if (thisid != id) {'||chr(10)),
     '        if (thisid != id) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          hcols[i].setAttribute(''class'',''awrbg''); '||chr(10)),
     '          hcols[i].setAttribute(''class'',''awrbg''); '||chr(10));
  dbms_lob.writeappend(clb, 
     length('        }'||chr(10)),
     '        }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var cls = th.getAttribute("class");'||chr(10)),
     '     var cls = th.getAttribute("class");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (cls === ''awrbg'' || cls === ''awrbg-down'') {'||chr(10)),
     '     if (cls === ''awrbg'' || cls === ''awrbg-down'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        th.setAttribute(''class'',''awrbg-up'');'||chr(10)),
     '        th.setAttribute(''class'',''awrbg-up'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     } else {'||chr(10)),
     '     } else {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       th.setAttribute(''class'',''awrbg-down'');'||chr(10)),
     '       th.setAttribute(''class'',''awrbg-down'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   }'||chr(10)),
     '   }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('function sort(colNo, thId, tableId)'||chr(10)),
     'function sort(colNo, thId, tableId)'||chr(10));
  dbms_lob.writeappend(clb, 
     length('{'||chr(10)),
     '{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  var tbody = document.getElementById(tableId).getElementsByTagName("tbody")[0];'||chr(10)),
     '  var tbody = document.getElementById(tableId).getElementsByTagName("tbody")[0];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  var rows = tbody.rows;'||chr(10)),
     '  var rows = tbody.rows;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  var cls = document.getElementById(thId).getAttribute(''class'');'||chr(10)),
     '  var cls = document.getElementById(thId).getAttribute(''class'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  var ascending;'||chr(10)),
     '  var ascending;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  if (cls === ''awrbg'' || cls === ''awrbg-down'') {'||chr(10)),
     '  if (cls === ''awrbg'' || cls === ''awrbg-down'') {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    ascending = true; '||chr(10)),
     '    ascending = true; '||chr(10));
  dbms_lob.writeappend(clb, 
     length('  } else {'||chr(10)),
     '  } else {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    ascending = false;'||chr(10)),
     '    ascending = false;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  var unsorted = true;'||chr(10)),
     '  var unsorted = true;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  while(unsorted)'||chr(10)),
     '  while(unsorted)'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  {'||chr(10)),
     '  {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     unsorted = false'||chr(10)),
     '     unsorted = false'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     for (var r = 0; r < rows.length - 1; r++)'||chr(10)),
     '     for (var r = 0; r < rows.length - 1; r++)'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     {'||chr(10)),
     '     {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var row = rows[r];'||chr(10)),
     '        var row = rows[r];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var nextRow = rows[r+1];'||chr(10)),
     '        var nextRow = rows[r+1];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var value = row.cells.item(colNo).getAttribute(''data-col'');'||chr(10)),
     '        var value = row.cells.item(colNo).getAttribute(''data-col'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        var nextValue = nextRow.cells.item(colNo).getAttribute(''data-col'');'||chr(10)),
     '        var nextValue = nextRow.cells.item(colNo).getAttribute(''data-col'');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        value = value.replace('','', ''''); '||chr(10)),
     '        value = value.replace('','', ''''); '||chr(10));
  dbms_lob.writeappend(clb, 
     length('        nextValue = nextValue.replace('','', '''');'||chr(10)),
     '        nextValue = nextValue.replace('','', '''');'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        if(!isNaN(value))'||chr(10)),
     '        if(!isNaN(value))'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        {'||chr(10)),
     '        {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          value = parseFloat(value);'||chr(10)),
     '          value = parseFloat(value);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          nextValue = parseFloat(nextValue);'||chr(10)),
     '          nextValue = parseFloat(nextValue);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        }'||chr(10)),
     '        }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        if (ascending ? value > nextValue : value < nextValue)'||chr(10)),
     '        if (ascending ? value > nextValue : value < nextValue)'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        {'||chr(10)),
     '        {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          toggleRowClass(row);'||chr(10)),
     '          toggleRowClass(row);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          toggleRowClass(nextRow);'||chr(10)),
     '          toggleRowClass(nextRow);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          tbody.insertBefore(nextRow, row);'||chr(10)),
     '          tbody.insertBefore(nextRow, row);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          unsorted = true;'||chr(10)),
     '          unsorted = true;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        }'||chr(10)),
     '        }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     }'||chr(10)),
     '     }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  toggleSortClass(thId, tableId);'||chr(10)),
     '  toggleSortClass(thId, tableId);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('};'||chr(10)),
     '};'||chr(10));
  dbms_lob.writeappend(clb, 
     length('function searchStats() {'||chr(10)),
     'function searchStats() {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  var statName;'||chr(10)),
     '  var statName;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  var fields;'||chr(10)),
     '  var fields;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  var result = [];'||chr(10)),
     '  var result = [];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  var val = document.getElementById(''searchText'').value;'||chr(10)),
     '  var val = document.getElementById(''searchText'').value;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  if (!val)'||chr(10)),
     '  if (!val)'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    return;'||chr(10)),
     '    return;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  var statsData = g_HcData[''STATS''];'||chr(10)),
     '  var statsData = g_HcData[''STATS''];'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  for (statName in statsData) {'||chr(10)),
     '  for (statName in statsData) {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var str = JSON.stringify(statsData[statName]);'||chr(10)),
     '     var str = JSON.stringify(statsData[statName]);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     var re = new RegExp(val,"i");'||chr(10)),
     '     var re = new RegExp(val,"i");'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     if (str.search(re) != -1)'||chr(10)),
     '     if (str.search(re) != -1)'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       result.push(statName);'||chr(10)),
     '       result.push(statName);'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  }'||chr(10)),
     '  }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  return result;'||chr(10)),
     '  return result;'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('function searchAll() {'||chr(10)),
     'function searchAll() {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  showMenuItem(''SEARCH''); '||chr(10)),
     '  showMenuItem(''SEARCH''); '||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  '||chr(10)),
     '  '||chr(10));
end if;
end;
/

set define on
set define off
declare
  clb clob;
  ver varchar2(20);
begin
 select version into ver from v$instance ;
  if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' then
  delete from gghc_files where ID = 'hc_meta.json';
  insert into gghc_files(ID, FILE_CONTENT) values 
  ('hc_meta.json',empty_clob()) returning FILE_CONTENT into clb;
  dbms_lob.writeappend(clb, 
     length('{'||chr(10)),
     '{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    "LEVEL1": {'||chr(10)),
     '    "LEVEL1": {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        "OVERVIEW": ['||chr(10)),
     '        "OVERVIEW": ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('            ["Descr_ReportCheck"],'||chr(10)),
     '            ["Descr_ReportCheck"],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "report_check",'||chr(10)),
     '            "report_check",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            ["Descr_ReportSummary"],'||chr(10)),
     '            ["Descr_ReportSummary"],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "report_summary",'||chr(10)),
     '            "report_summary",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            ["Descr_GGParam"],'||chr(10)),
     '            ["Descr_GGParam"],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_param",'||chr(10)),
     '            "cp_param",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_param",'||chr(10)),
     '            "ap_param",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "test"'||chr(10)),
     '            "test"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        ],'||chr(10)),
     '        ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        "DATABASE": ['||chr(10)),
     '        "DATABASE": ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('           ["Descr_Database"],'||chr(10)),
     '           ["Descr_Database"],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "db_version",'||chr(10)),
     '            "db_version",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "db_info",'||chr(10)),
     '            "db_info",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "db_log_info",'||chr(10)),
     '            "db_log_info",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "db_inst_info",'||chr(10)),
     '            "db_inst_info",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cdb_info",'||chr(10)),
     '            "cdb_info",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            ["Descr_GGUser"],'||chr(10)),
     '            ["Descr_GGUser"],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "gg_admin",'||chr(10)),
     '            "gg_admin",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "gg_admin_info",'||chr(10)),
     '            "gg_admin_info",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "gg_sess",'||chr(10)),
     '            "gg_sess",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            ["Descr_Memory"],'||chr(10)),
     '            ["Descr_Memory"],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "sga_info",'||chr(10)),
     '            "sga_info",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "sga_stat",'||chr(10)),
     '            "sga_stat",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "sga_resize",'||chr(10)),
     '            "sga_resize",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "sp_db",'||chr(10)),
     '            "sp_db",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "sp_components",'||chr(10)),
     '            "sp_components",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "sp_logmnr",'||chr(10)),
     '            "sp_logmnr",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "pga_mem",'||chr(10)),
     '            "pga_mem",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "pga_stat",'||chr(10)),
     '            "pga_stat",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "long_txns"'||chr(10)),
     '            "long_txns"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        ],'||chr(10)),
     '        ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        "EXTRACT": ['||chr(10)),
     '        "EXTRACT": ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('            ["Descr_CPSummary"],'||chr(10)),
     '            ["Descr_CPSummary"],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_summary",'||chr(10)),
     '            "cp_summary",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_status",'||chr(10)),
     '            "cp_status",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_status_client",'||chr(10)),
     '            "cp_status_client",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_info",'||chr(10)),
     '            "cp_info",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_info_scn",'||chr(10)),
     '            "cp_info_scn",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_logmnr_info",'||chr(10)),
     '            "cp_logmnr_info",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_version",'||chr(10)),
     '            "cp_version",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_proc_status",'||chr(10)),
     '            "cp_proc_status",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_rulesets2",'||chr(10)),
     '            "cp_rulesets2",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_v2",'||chr(10)),
     '            "cp_v2",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_param_detail"'||chr(10)),
     '            "cp_param_detail"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        ],'||chr(10)),
     '        ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        "REPLICAT": ['||chr(10)),
     '        "REPLICAT": ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('            ["Descr_APSummary"],'||chr(10)),
     '            ["Descr_APSummary"],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_summary",'||chr(10)),
     '            "ap_summary",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "gg_inbound",'||chr(10)),
     '            "gg_inbound",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_status",'||chr(10)),
     '            "ap_status",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_info",'||chr(10)),
     '            "ap_info",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_param_detail",'||chr(10)),
     '            "ap_param_detail",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_event"'||chr(10)),
     '            "ap_event"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        ],'||chr(10)),
     '        ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        "TABLE STATISTICS & ERRORS": ['||chr(10)),
     '        "TABLE STATISTICS & ERRORS": ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "err_tab_stat_sum",'||chr(10)),
     '            "err_tab_stat_sum",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "err_q"'||chr(10)),
     '            "err_q"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        ],'||chr(10)),
     '        ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        "TOOLS": ['||chr(10)),
     '        "TOOLS": ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('            ["Descr_Heartbeat"],'||chr(10)),
     '            ["Descr_Heartbeat"],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "heartbeat",'||chr(10)),
     '            "heartbeat",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            ["Descr_LCRTrack"],'||chr(10)),
     '            ["Descr_LCRTrack"],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "gg_track_lcr",'||chr(10)),
     '            "gg_track_lcr",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "lcr_q",'||chr(10)),
     '            "lcr_q",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            ["Descr_Topology"],'||chr(10)),
     '            ["Descr_Topology"],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "topo_db",'||chr(10)),
     '            "topo_db",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "topo_rep_stats",'||chr(10)),
     '            "topo_rep_stats",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "topo_necks",'||chr(10)),
     '            "topo_necks",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "topo_stats",'||chr(10)),
     '            "topo_stats",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "compare",'||chr(10)),
     '            "compare",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "compare_info",'||chr(10)),
     '            "compare_info",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "reco_tabs",'||chr(10)),
     '            "reco_tabs",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "reco_errv",'||chr(10)),
     '            "reco_errv",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "reco_blocks",'||chr(10)),
     '            "reco_blocks",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "reco_hist",'||chr(10)),
     '            "reco_hist",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "reco_params"'||chr(10)),
     '            "reco_params"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        ],'||chr(10)),
     '        ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('       "LEGACY": ['||chr(10)),
     '       "LEGACY": ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "001_cs",'||chr(10)),
     '            "001_cs",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "002_cs",'||chr(10)),
     '            "002_cs",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "003_cs",'||chr(10)),
     '            "003_cs",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "004_cs",'||chr(10)),
     '            "004_cs",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "005_cs",'||chr(10)),
     '            "005_cs",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "006_cs",'||chr(10)),
     '            "006_cs",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "007_cs",'||chr(10)),
     '            "007_cs",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "008_cs",'||chr(10)),
     '            "008_cs",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "009_cs",'||chr(10)),
     '            "009_cs",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "010_cs",'||chr(10)),
     '            "010_cs",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "012_cs",'||chr(10)),
     '            "012_cs",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "013_cs",'||chr(10)),
     '            "013_cs",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "014_cs",'||chr(10)),
     '            "014_cs",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "015_cs",'||chr(10)),
     '            "015_cs",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "016_cs",'||chr(10)),
     '            "016_cs",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "017_cs",'||chr(10)),
     '            "017_cs",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "018_cs",'||chr(10)),
     '            "018_cs",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "019_cs",'||chr(10)),
     '            "019_cs",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "020_cs",'||chr(10)),
     '            "020_cs",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "022_cs",'||chr(10)),
     '            "022_cs",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "005_cf",'||chr(10)),
     '            "005_cf",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "006_cf",'||chr(10)),
     '            "006_cf",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "007_cf",'||chr(10)),
     '            "007_cf",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "008_cf",'||chr(10)),
     '            "008_cf",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "009_cf",'||chr(10)),
     '            "009_cf",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "010_cf",'||chr(10)),
     '            "010_cf",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "011_cf",'||chr(10)),
     '            "011_cf",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "012_cf",'||chr(10)),
     '            "012_cf",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "013_cf",'||chr(10)),
     '            "013_cf",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "014_cf",'||chr(10)),
     '            "014_cf",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "016_cf",'||chr(10)),
     '            "016_cf",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "018_cf",'||chr(10)),
     '            "018_cf",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "019_cf",'||chr(10)),
     '            "019_cf",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "020_cf",'||chr(10)),
     '            "020_cf",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "021_cf",'||chr(10)),
     '            "021_cf",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "022_cf",'||chr(10)),
     '            "022_cf",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "023_cf",'||chr(10)),
     '            "023_cf",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "024_cf",'||chr(10)),
     '            "024_cf",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "025_cf",'||chr(10)),
     '            "025_cf",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "028_cf",'||chr(10)),
     '            "028_cf",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "028a_cf",'||chr(10)),
     '            "028a_cf",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "029_cf",'||chr(10)),
     '            "029_cf",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "030_cf",'||chr(10)),
     '            "030_cf",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "031_cf"'||chr(10)),
     '            "031_cf"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        ]'||chr(10)),
     '        ]'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    },'||chr(10)),
     '    },'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    "LEVEL2": {'||chr(10)),
     '    "LEVEL2": {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        "DATABASE:DATABASE-OBJECTS": ['||chr(10)),
     '        "DATABASE:DATABASE-OBJECTS": ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "gg_no_support",'||chr(10)),
     '            "gg_no_support",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "gg_no_unique"'||chr(10)),
     '            "gg_no_unique"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        ],'||chr(10)),
     '        ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        "DATABASE:DATABASE-DETAILS": ['||chr(10)),
     '        "DATABASE:DATABASE-DETAILS": ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "db_out_alerts",'||chr(10)),
     '            "db_out_alerts",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "db_alert_gg",'||chr(10)),
     '            "db_alert_gg",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            ["Descr_Key"],'||chr(10)),
     '            ["Descr_Key"],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "db_conn_info",'||chr(10)),
     '            "db_conn_info",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "db_init_param",'||chr(10)),
     '            "db_init_param",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "db_dictstat",'||chr(10)),
     '            "db_dictstat",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "db_fixtabstat",'||chr(10)),
     '            "db_fixtabstat",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            ["Descr_Software"],'||chr(10)),
     '            ["Descr_Software"],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "db_edition",'||chr(10)),
     '            "db_edition",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "db_reg_info",'||chr(10)),
     '            "db_reg_info",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "db_reg_hist",'||chr(10)),
     '            "db_reg_hist",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "db_bp_info",'||chr(10)),
     '            "db_bp_info",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "db_patches",'||chr(10)),
     '            "db_patches",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "db_containers",'||chr(10)),
     '            "db_containers",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "db_nls",'||chr(10)),
     '            "db_nls",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "db_reg_log",'||chr(10)),
     '            "db_reg_log",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "db_incarnation",'||chr(10)),
     '            "db_incarnation",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "db_stby_logs",'||chr(10)),
     '            "db_stby_logs",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "suplog_cdb",'||chr(10)),
     '            "suplog_cdb",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "strm_admin",'||chr(10)),
     '            "strm_admin",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "rep_object_const",'||chr(10)),
     '            "rep_object_const",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "intl_q_fc",'||chr(10)),
     '            "intl_q_fc",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "intl_sp_mem",'||chr(10)),
     '            "intl_sp_mem",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "intl_lcr_ext",'||chr(10)),
     '            "intl_lcr_ext",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "intl_lcr_cache",'||chr(10)),
     '            "intl_lcr_cache",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "intl_cache_sum",'||chr(10)),
     '            "intl_cache_sum",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "intl_cache"'||chr(10)),
     '            "intl_cache"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        ],'||chr(10)),
     '        ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        "DATABASE:Replication SQL-Analysis": ['||chr(10)),
     '        "DATABASE:Replication SQL-Analysis": ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "sesstat",'||chr(10)),
     '            "sesstat",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "sesstat_net",'||chr(10)),
     '            "sesstat_net",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "sesstat_io",'||chr(10)),
     '            "sesstat_io",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ash_io",'||chr(10)),
     '            "ash_io",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ash_io_tbs",'||chr(10)),
     '            "ash_io_tbs",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "wait_ash_obj",'||chr(10)),
     '            "wait_ash_obj",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "sess_event",'||chr(10)),
     '            "sess_event",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "waittime",'||chr(10)),
     '            "waittime",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ash_waittime",'||chr(10)),
     '            "ash_waittime",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "waitstat",'||chr(10)),
     '            "waitstat",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ash_waitstat",'||chr(10)),
     '            "ash_waitstat",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "sql_lock",'||chr(10)),
     '            "sql_lock",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ash_lock",'||chr(10)),
     '            "ash_lock",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "gg_proc",'||chr(10)),
     '            "gg_proc",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "sql_ash_wait",'||chr(10)),
     '            "sql_ash_wait",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "sql_ela",'||chr(10)),
     '            "sql_ela",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "sql_cpu",'||chr(10)),
     '            "sql_cpu",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "sql_io",'||chr(10)),
     '            "sql_io",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "sql_exe",'||chr(10)),
     '            "sql_exe",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "sql_stmt",'||chr(10)),
     '            "sql_stmt",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "sql_ash_stmt",'||chr(10)),
     '            "sql_ash_stmt",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "sql_cursor",'||chr(10)),
     '            "sql_cursor",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "sql_inv"'||chr(10)),
     '            "sql_inv"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        ],'||chr(10)),
     '        ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        "EXTRACT:EXTRACT-DETAILS": ['||chr(10)),
     '        "EXTRACT:EXTRACT-DETAILS": ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_logmnr",'||chr(10)),
     '            "cp_logmnr",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_logmnr_comp",'||chr(10)),
     '            "cp_logmnr_comp",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_txn_logmnr",'||chr(10)),
     '            "cp_txn_logmnr",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "logmnr_params",'||chr(10)),
     '            "logmnr_params",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_logmnr_stats",'||chr(10)),
     '            "cp_logmnr_stats",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "logmnr_stats_specific",'||chr(10)),
     '            "logmnr_stats_specific",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "logmnr_sesstat",'||chr(10)),
     '            "logmnr_sesstat",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "logmnr_sesstat_specific",'||chr(10)),
     '            "logmnr_sesstat_specific",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_rules",'||chr(10)),
     '            "cp_rules",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_rulesets",'||chr(10)),
     '            "cp_rulesets",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "logmnr_ckpt_count"'||chr(10)),
     '            "logmnr_ckpt_count"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        ],'||chr(10)),
     '        ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        "EXTRACT:EXTRACT-PERFORMANCE": ['||chr(10)),
     '        "EXTRACT:EXTRACT-PERFORMANCE": ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_stats",'||chr(10)),
     '            "cp_stats",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_txn_sum",'||chr(10)),
     '            "cp_txn_sum",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_txn_detail",'||chr(10)),
     '            "cp_txn_detail",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_txn_logmnr",'||chr(10)),
     '            "cp_txn_logmnr",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_msgs",'||chr(10)),
     '            "cp_msgs",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_ela",'||chr(10)),
     '            "cp_ela",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_eval",'||chr(10)),
     '            "cp_eval",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "logmnr_chunks",'||chr(10)),
     '            "logmnr_chunks",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_server_stats",'||chr(10)),
     '            "cp_server_stats",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ogg_out_pt",'||chr(10)),
     '            "ogg_out_pt",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_reader_ash",'||chr(10)),
     '            "cp_reader_ash",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_preparer_ash",'||chr(10)),
     '            "cp_preparer_ash",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_builder_ash",'||chr(10)),
     '            "cp_builder_ash",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_ash",'||chr(10)),
     '            "cp_ash",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ogg_out_srvr_ash"'||chr(10)),
     '            "ogg_out_srvr_ash"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        ],'||chr(10)),
     '        ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        "EXTRACT:EXTRACT-LOGMINER": ['||chr(10)),
     '        "EXTRACT:EXTRACT-LOGMINER": ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "logmnr_load",'||chr(10)),
     '            "logmnr_load",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "logmnr_dbmap",'||chr(10)),
     '            "logmnr_dbmap",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "logmnr_uid",'||chr(10)),
     '            "logmnr_uid",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "logmnr_gtlo",'||chr(10)),
     '            "logmnr_gtlo",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "logmnr_gtcs",'||chr(10)),
     '            "logmnr_gtcs",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "logmnr_sess",'||chr(10)),
     '            "logmnr_sess",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "logmnr_did",'||chr(10)),
     '            "logmnr_did",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "logmnr_state",'||chr(10)),
     '            "logmnr_state",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "logmnr_dict",'||chr(10)),
     '            "logmnr_dict",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "logmnr_container",'||chr(10)),
     '            "logmnr_container",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "logmnr_pdb_info"'||chr(10)),
     '            "logmnr_pdb_info"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        ],'||chr(10)),
     '        ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        "DATABASE:OBJECTS-INSTANTIATION": ['||chr(10)),
     '        "DATABASE:OBJECTS-INSTANTIATION": ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "suplog_all",'||chr(10)),
     '            "suplog_all",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "suplog_schema",'||chr(10)),
     '            "suplog_schema",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "suplog_table",'||chr(10)),
     '            "suplog_table",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "suplog_table2",'||chr(10)),
     '            "suplog_table2",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "suplog_columns",'||chr(10)),
     '            "suplog_columns",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_inst_all",'||chr(10)),
     '            "ap_inst_all",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_inst_tables"'||chr(10)),
     '            "ap_inst_tables"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        ],'||chr(10)),
     '        ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        "REPLICAT:REPLICAT-PERFORMANCE": ['||chr(10)),
     '        "REPLICAT:REPLICAT-PERFORMANCE": ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_progress",'||chr(10)),
     '            "ap_progress",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ogg_in_pt",'||chr(10)),
     '            "ogg_in_pt",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_progtab_count",'||chr(10)),
     '            "ap_progtab_count",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "sql_fts",'||chr(10)),
     '            "sql_fts",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "sql_ddl",'||chr(10)),
     '            "sql_ddl",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_recv_stats",'||chr(10)),
     '            "ap_recv_stats",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_read_stats",'||chr(10)),
     '            "ap_read_stats",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_reader",'||chr(10)),
     '            "ap_reader",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_read_dep",'||chr(10)),
     '            "ap_read_dep",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_coord_dep",'||chr(10)),
     '            "ap_coord_dep",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_coord_stats",'||chr(10)),
     '            "ap_coord_stats",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_coord_stats_wm",'||chr(10)),
     '            "ap_coord_stats_wm",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_flow",'||chr(10)),
     '            "ap_flow",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_txn_sum",'||chr(10)),
     '            "ap_txn_sum",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_txn_detail",'||chr(10)),
     '            "ap_txn_detail",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_srvr_stats_txns",'||chr(10)),
     '            "ap_srvr_stats_txns",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_srvr_sql",'||chr(10)),
     '            "ap_srvr_sql",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_srvr_sum",'||chr(10)),
     '            "ap_srvr_sum",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_srvr_stats",'||chr(10)),
     '            "ap_srvr_stats",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_srvr_stats_auto",'||chr(10)),
     '            "ap_srvr_stats_auto",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_srvr_stats_we",'||chr(10)),
     '            "ap_srvr_stats_we",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_srvr_sess",'||chr(10)),
     '            "ap_srvr_sess",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_recv_ash",'||chr(10)),
     '            "ap_recv_ash",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_read_ash",'||chr(10)),
     '            "ap_read_ash",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_coord_ash",'||chr(10)),
     '            "ap_coord_ash",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_srvr_ash"'||chr(10)),
     '            "ap_srvr_ash"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        ],'||chr(10)),
     '        ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        "REPLICAT:CDR": ['||chr(10)),
     '        "REPLICAT:CDR": ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cdr_cols",'||chr(10)),
     '            "cdr_cols",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cdr_confh_detail",'||chr(10)),
     '            "cdr_confh_detail",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cdr",'||chr(10)),
     '            "cdr",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cdr_error_info",'||chr(10)),
     '            "cdr_error_info",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cdr_hcoll_detail",'||chr(10)),
     '            "cdr_hcoll_detail",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cdr_errh"'||chr(10)),
     '            "cdr_errh"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        ],'||chr(10)),
     '        ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        "REPLICAT:APPLY-HANDLER": ['||chr(10)),
     '        "REPLICAT:APPLY-HANDLER": ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_keycols",'||chr(10)),
     '            "ap_keycols",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_objdep",'||chr(10)),
     '            "ap_objdep",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_valdep",'||chr(10)),
     '            "ap_valdep",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_handler",'||chr(10)),
     '            "ap_handler",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_dml_handler",'||chr(10)),
     '            "ap_dml_handler",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_hdml_status1",'||chr(10)),
     '            "ap_hdml_status1",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_hdml_status2"'||chr(10)),
     '            "ap_hdml_status2"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        ],'||chr(10)),
     '        ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        "TABLE STATISTICS & ERRORS: DETAILS": ['||chr(10)),
     '        "TABLE STATISTICS & ERRORS: DETAILS": ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "err_tab_stat_detail",'||chr(10)),
     '            "err_tab_stat_detail",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "err_q", '||chr(10)),
     '            "err_q", '||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "err_q_info",'||chr(10)),
     '            "err_q_info",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "err_q_type"'||chr(10)),
     '            "err_q_type"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        ],'||chr(10)),
     '        ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        "TOOLS:HISTORY": ['||chr(10)),
     '        "TOOLS:HISTORY": ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "hist_bufq",'||chr(10)),
     '            "hist_bufq",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "hist_bufq_sub",'||chr(10)),
     '            "hist_bufq_sub",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "cp_hist",'||chr(10)),
     '            "cp_hist",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "ap_hist"'||chr(10)),
     '            "ap_hist"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        ]'||chr(10)),
     '        ]'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    },'||chr(10)),
     '    },'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   "INFO": {'||chr(10)),
     '   "INFO": {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "Descr_ReportSummary" : ['||chr(10)),
     '     "Descr_ReportSummary" : ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('             "The summary of Database, Extract and Replicat is showing some basic information of the System.",'||chr(10)),
     '             "The summary of Database, Extract and Replicat is showing some basic information of the System.",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              "It contains of a static and dynamic part. Dynamic information is gathered in a 10 sec intervall by default",'||chr(10)),
     '              "It contains of a static and dynamic part. Dynamic information is gathered in a 10 sec intervall by default",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              "and can be changed with the PL/SQL API dbms_hc.set_parameter."'||chr(10)),
     '              "and can be changed with the PL/SQL API dbms_hc.set_parameter."'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                  ],'||chr(10)),
     '                  ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "Descr_GGParam" : ['||chr(10)),
     '     "Descr_GGParam" : ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('             "Basic Extract and Replicat Parameter settings via [DBOPTIONS | TRANLOGOPTIONS ] INTEGRATEDPARAMS are shown.",'||chr(10)),
     '             "Basic Extract and Replicat Parameter settings via [DBOPTIONS | TRANLOGOPTIONS ] INTEGRATEDPARAMS are shown.",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              "If multiple Extracts/Replicats exists, you can easily compare the basic setting. Details of each process are",'||chr(10)),
     '              "If multiple Extracts/Replicats exists, you can easily compare the basic setting. Details of each process are",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              "shown in the following sections."'||chr(10)),
     '              "shown in the following sections."'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                      ],'||chr(10)),
     '                      ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    "Descr_ReportCheck" :  ['||chr(10)),
     '    "Descr_ReportCheck" :  ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('             "General Findings section shows the results of sanity checks. Questionable results",'||chr(10)),
     '             "General Findings section shows the results of sanity checks. Questionable results",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              "are highlighted. The details are visible in the later sections."'||chr(10)),
     '              "are highlighted. The details are visible in the later sections."'||chr(10));
  dbms_lob.writeappend(clb, 
     length('                      ],'||chr(10)),
     '                      ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "Descr_Database" : ['||chr(10)),
     '     "Descr_Database" : ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('              "Information of the Database environment (RAC, DataGuard, Multitenancy) is shown before drilling down into the",'||chr(10)),
     '              "Information of the Database environment (RAC, DataGuard, Multitenancy) is shown before drilling down into the",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              "basic database and instance settings."'||chr(10)),
     '              "basic database and instance settings."'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              ],'||chr(10)),
     '              ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "Descr_GGUser" : ['||chr(10)),
     '     "Descr_GGUser" : ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('              "Specification of the GoldenGate Administration User and the privileges."'||chr(10)),
     '              "Specification of the GoldenGate Administration User and the privileges."'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              ],'||chr(10)),
     '              ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "Descr_Memory" : ['||chr(10)),
     '     "Descr_Memory" : ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('              "Information about the Database Memory (SGA and PGA) with a closer look at the Streams Pool.",'||chr(10)),
     '              "Information about the Database Memory (SGA and PGA) with a closer look at the Streams Pool.",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              "The Streams pool is chwon for it''s consumers and the informamation is drilled down to the Streams internal Memory Structures."'||chr(10)),
     '              "The Streams pool is chwon for it''s consumers and the informamation is drilled down to the Streams internal Memory Structures."'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              ],'||chr(10)),
     '              ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "Descr_Key" : ['||chr(10)),
     '     "Descr_Key" : ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('              "For completeness, the varios connection and service information is shown.",'||chr(10)),
     '              "For completeness, the varios connection and service information is shown.",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              "Also, the Key GoldenGate related database parameter and the manual modified/adjusted database parameters are shown. "'||chr(10)),
     '              "Also, the Key GoldenGate related database parameter and the manual modified/adjusted database parameters are shown. "'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              ],'||chr(10)),
     '              ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "Descr_Software" : ['||chr(10)),
     '     "Descr_Software" : ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('              "Basic Information about the Components, Software and Patchlevel of the Database is shown."'||chr(10)),
     '              "Basic Information about the Components, Software and Patchlevel of the Database is shown."'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              ],'||chr(10)),
     '              ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "Descr_CPSummary" : ['||chr(10)),
     '     "Descr_CPSummary" : ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('              "Basic Information of the Extract and it''s database side Capture process is shown."'||chr(10)),
     '              "Basic Information of the Extract and it''s database side Capture process is shown."'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              ],'||chr(10)),
     '              ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "Descr_APSummary" : ['||chr(10)),
     '     "Descr_APSummary" : ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('              "Basic Information of the Replicat and it''s database side Apply process is shown."'||chr(10)),
     '              "Basic Information of the Replicat and it''s database side Apply process is shown."'||chr(10));
  dbms_lob.writeappend(clb, 
     length('              ],'||chr(10)),
     '              ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "Descr_Heartbeat" : ['||chr(10)),
     '     "Descr_Heartbeat" : ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('             "With GoldenGate Version 12.2, it is recommended to implement the Heartbeat table.",'||chr(10)),
     '             "With GoldenGate Version 12.2, it is recommended to implement the Heartbeat table.",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('             "The Heartbeat table simplifies the Lag Anlysis."'||chr(10)),
     '             "The Heartbeat table simplifies the Lag Anlysis."'||chr(10));
  dbms_lob.writeappend(clb, 
     length('             ],'||chr(10)),
     '             ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "Descr_LCRTrack" : ['||chr(10)),
     '     "Descr_LCRTrack" : ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "By default, LCR''s are tracked in periodically intervals."'||chr(10)),
     '            "By default, LCR''s are tracked in periodically intervals."'||chr(10));
  dbms_lob.writeappend(clb, 
     length('             ],'||chr(10)),
     '             ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "Descr_Topology" : ['||chr(10)),
     '     "Descr_Topology" : ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "The Streams Performance Analyzer is used to identify the Replication Pathes and show the key Replication metrics",'||chr(10)),
     '            "The Streams Performance Analyzer is used to identify the Replication Pathes and show the key Replication metrics",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('            "The PL/SQL API dbms_hc.set_parameter can be used to change the default interval (10 secs) and frequency (3)."                                     '||chr(10)),
     '            "The PL/SQL API dbms_hc.set_parameter can be used to change the default interval (10 secs) and frequency (3)."                                     '||chr(10));
  dbms_lob.writeappend(clb, 
     length('             ]'||chr(10)),
     '             ]'||chr(10));
  dbms_lob.writeappend(clb, 
     length('   } '||chr(10)),
     '   } '||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
end if;
end;
/

set define on
set define off
declare
  clb clob;
  ver varchar2(20);
begin
 select version into ver from v$instance ;
  if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','') = '1' then
  delete from gghc_files where ID = 'hc_conf.json';
  insert into gghc_files(ID, FILE_CONTENT) values 
  ('hc_conf.json',empty_clob()) returning FILE_CONTENT into clb;
  dbms_lob.writeappend(clb, 
     length('{'||chr(10)),
     '{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('  "COLUMN" : {'||chr(10)),
     '  "COLUMN" : {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "report_check" : ['||chr(10)),
     '     "report_check" : ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('        {'||chr(10)),
     '        {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          "expr": "ALERT === ''GREEN''",'||chr(10)),
     '          "expr": "ALERT === ''GREEN''",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          "column-style": "color:green"'||chr(10)),
     '          "column-style": "color:green"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        },'||chr(10)),
     '        },'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        {'||chr(10)),
     '        {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          "expr": "ALERT === ''FADE''",'||chr(10)),
     '          "expr": "ALERT === ''FADE''",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          "row-style": "display:none"'||chr(10)),
     '          "row-style": "display:none"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        },'||chr(10)),
     '        },'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        {'||chr(10)),
     '        {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          "expr": "ALERT != ''GREEN'' && ALERT != ''INFO''",'||chr(10)),
     '          "expr": "ALERT != ''GREEN'' && ALERT != ''INFO''",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          "table-style": "alert"'||chr(10)),
     '          "table-style": "alert"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        }'||chr(10)),
     '        }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    ],'||chr(10)),
     '    ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    "db_init_param" : ['||chr(10)),
     '    "db_init_param" : ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('        {'||chr(10)),
     '        {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          "expr":"NAME === ''enable_goldengate_replication'' && VALUE === ''TRUE''",'||chr(10)),
     '          "expr":"NAME === ''enable_goldengate_replication'' && VALUE === ''TRUE''",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          "column-style":"background-color:green"'||chr(10)),
     '          "column-style":"background-color:green"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        },'||chr(10)),
     '        },'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        {'||chr(10)),
     '        {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          "expr":"NAME === ''enable_goldengate_replication'' && VALUE === ''FALSE''",'||chr(10)),
     '          "expr":"NAME === ''enable_goldengate_replication'' && VALUE === ''FALSE''",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('          "column-style":"background-color:red"'||chr(10)),
     '          "column-style":"background-color:red"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        }'||chr(10)),
     '        }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    ],'||chr(10)),
     '    ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    "report_map": ['||chr(10)),
     '    "report_map": ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('      {'||chr(10)),
     '      {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        "expr": "ENABLED === ''YES''",'||chr(10)),
     '        "expr": "ENABLED === ''YES''",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        "column-style": "background-color:green"'||chr(10)),
     '        "column-style": "background-color:green"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      },'||chr(10)),
     '      },'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      {'||chr(10)),
     '      {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        "expr": "ENABLED != ''YES''",'||chr(10)),
     '        "expr": "ENABLED != ''YES''",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        "column-style": "background-color:red"'||chr(10)),
     '        "column-style": "background-color:red"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    ],'||chr(10)),
     '    ],'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    "db_reg_log": ['||chr(10)),
     '    "db_reg_log": ['||chr(10));
  dbms_lob.writeappend(clb, 
     length('      {'||chr(10)),
     '      {'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        "expr": "DICTIONARY_BEGIN == ''NO''&& DICTIONARY_END == ''NO'' &&  PURGEABLE == ''NO''",'||chr(10)),
     '        "expr": "DICTIONARY_BEGIN == ''NO''&& DICTIONARY_END == ''NO'' &&  PURGEABLE == ''NO''",'||chr(10));
  dbms_lob.writeappend(clb, 
     length('        "row-style": "display:none"'||chr(10)),
     '        "row-style": "display:none"'||chr(10));
  dbms_lob.writeappend(clb, 
     length('      }'||chr(10)),
     '      }'||chr(10));
  dbms_lob.writeappend(clb, 
     length('    ]'||chr(10)),
     '    ]'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
end if;
end;
/

set define on
set define off
declare
  clb clob;
  ver varchar2(20);
begin
 select version into ver from v$instance ;
  if dbms_goldengate_hcadm_int.select_version(ver, '11.2.0.0.0','11.2.0.4.99') = '1' then
  delete from gghc_files where ID = 'doc_links.json';
  insert into gghc_files(ID, FILE_CONTENT) values 
  ('doc_links.json',empty_clob()) returning FILE_CONTENT into clb;
  dbms_lob.writeappend(clb, 
     length('{'||chr(10)),
     '{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_CONSTRAINTS" : '||chr(10)),
     '"ALL_CONSTRAINTS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20047"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20047"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_INDEXES" : '||chr(10)),
     '"ALL_INDEXES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20088"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20088"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_OBJECTS" : '||chr(10)),
     '"ALL_OBJECTS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20146"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20146"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_TAB_COLUMNS" : '||chr(10)),
     '"ALL_TAB_COLUMNS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20277"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20277"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_TABLES" : '||chr(10)),
     '"ALL_TABLES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20286"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20286"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_TAB_PARTITIONS" : '||chr(10)),
     '"ALL_TAB_PARTITIONS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20281"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20281"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_TRIGGERS" : '||chr(10)),
     '"ALL_TRIGGERS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20293"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20293"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY" : '||chr(10)),
     '"ALL_APPLY" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20005"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20005"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_CONFLICT_COLUMNS" : '||chr(10)),
     '"ALL_APPLY_CONFLICT_COLUMNS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20006"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20006"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_DML_CONF_HANDLERS" : '||chr(10)),
     '"ALL_APPLY_DML_CONF_HANDLERS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_DML_CONF_HANDLERS.htm#REFRN-GUID-7BF15887-0A51-450E-B8C9-5C5FBA4CF3A4"'||chr(10)),
     '     "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_DML_CONF_HANDLERS.htm#REFRN-GUID-7BF15887-0A51-450E-B8C9-5C5FBA4CF3A4"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_DML_HANDLERS" : '||chr(10)),
     '"ALL_APPLY_DML_HANDLERS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20007"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20007"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_ERROR" : '||chr(10)),
     '"ALL_APPLY_ERROR" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20008"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20008"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_ERROR_MESSAGES" : '||chr(10)),
     '"ALL_APPLY_ERROR_MESSAGES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20783"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20783"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_HANDLE_COLLISIONS" : '||chr(10)),
     '"ALL_APPLY_HANDLE_COLLISIONS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_HANDLE_COLLISIONS.htm#REFRN-GUID-C4B47347-0A99-4666-ABC8-B9104BFD3E28"'||chr(10)),
     '     "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_HANDLE_COLLISIONS.htm#REFRN-GUID-C4B47347-0A99-4666-ABC8-B9104BFD3E28"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_INSTANTIATED_GLOBAL" : '||chr(10)),
     '"ALL_APPLY_INSTANTIATED_GLOBAL" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20334"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20334"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_INSTANTIATED_OBJECTS" : '||chr(10)),
     '"ALL_APPLY_INSTANTIATED_OBJECTS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20009"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20009"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_INSTANTIATED_SCHEMAS" : '||chr(10)),
     '"ALL_APPLY_INSTANTIATED_SCHEMAS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20335"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20335"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_KEY_COLUMNS" : '||chr(10)),
     '"ALL_APPLY_KEY_COLUMNS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20010"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20010"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_PARAMETERS" : '||chr(10)),
     '"ALL_APPLY_PARAMETERS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20011"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20011"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_PROGRESS" : '||chr(10)),
     '"ALL_APPLY_PROGRESS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20012"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20012"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_REPERROR_HANDLERS" : '||chr(10)),
     '"ALL_APPLY_REPERROR_HANDLERS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_REPERROR_HANDLERS.htm#REFRN-GUID-3ADEFAAC-DD5F-4029-9A39-9C354EAF6BC1"'||chr(10)),
     '     "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_REPERROR_HANDLERS.htm#REFRN-GUID-3ADEFAAC-DD5F-4029-9A39-9C354EAF6BC1"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_TABLE_COLUMNS" : '||chr(10)),
     '"ALL_APPLY_TABLE_COLUMNS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20398"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20398"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_AQ_AGENT_PRIVS" : '||chr(10)),
     '"DBA_AQ_AGENT_PRIVS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23013"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23013"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_AQ_AGENTS" : '||chr(10)),
     '"DBA_AQ_AGENTS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23014"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23014"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_CAPTURE" : '||chr(10)),
     '"ALL_CAPTURE" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20031"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20031"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_CAPTURE_PARAMETERS" : '||chr(10)),
     '"ALL_CAPTURE_PARAMETERS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20032"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20032"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_CAPTURE_PREPARED_DATABASE" : '||chr(10)),
     '"ALL_CAPTURE_PREPARED_DATABASE" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20033"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20033"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_CAPTURE_PREPARED_SCHEMAS" : '||chr(10)),
     '"ALL_CAPTURE_PREPARED_SCHEMAS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20034"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20034"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_CAPTURE_PREPARED_TABLES" : '||chr(10)),
     '"ALL_CAPTURE_PREPARED_TABLES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20035"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20035"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_COMPARISON" : '||chr(10)),
     '"DBA_COMPARISON" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23582"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23582"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_COMPARISON_SCAN" : '||chr(10)),
     '"DBA_COMPARISON_SCAN" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23585"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23585"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_GG_AUTO_CDR_COLUMN_GROUPS" : '||chr(10)),
     '"ALL_GG_AUTO_CDR_COLUMN_GROUPS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_GG_AUTO_CDR_COLUMNS" : '||chr(10)),
     '"ALL_GG_AUTO_CDR_COLUMNS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_GG_AUTO_CDR_TABLES" : '||chr(10)),
     '"ALL_GG_AUTO_CDR_TABLES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_GG_INBOUND_PROGRESS" : '||chr(10)),
     '"ALL_GG_INBOUND_PROGRESS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20912"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20912"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_GOLDENGATE_INBOUND" : '||chr(10)),
     '"ALL_GOLDENGATE_INBOUND" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20911"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20911"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_GOLDENGATE_PRIVILEGES" : '||chr(10)),
     '"ALL_GOLDENGATE_PRIVILEGES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20804"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20804"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_GOLDENGATE_SUPPORT_MODE" : '||chr(10)),
     '"DBA_GOLDENGATE_SUPPORT_MODE" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23952"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23952"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_JOBS" : '||chr(10)),
     '"DBA_JOBS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23105"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23105"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_LOG_GROUP_COLUMNS" : '||chr(10)),
     '"ALL_LOG_GROUP_COLUMNS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20119"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20119"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_LOG_GROUPS" : '||chr(10)),
     '"ALL_LOG_GROUPS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20120"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20120"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_QUEUES" : '||chr(10)),
     '"ALL_QUEUES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20176"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20176"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_QUEUE_SUBSCRIBERS" : '||chr(10)),
     '"ALL_QUEUE_SUBSCRIBERS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20544"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20544"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_QUEUE_TABLES" : '||chr(10)),
     '"ALL_QUEUE_TABLES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20175"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20175"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_RECOVERABLE_SCRIPT" : '||chr(10)),
     '"DBA_RECOVERABLE_SCRIPT" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23545"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23545"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_RECOVERABLE_SCRIPT_BLOCKS" : '||chr(10)),
     '"DBA_RECOVERABLE_SCRIPT_BLOCKS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23546"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23546"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_RECOVERABLE_SCRIPT_ERRORS" : '||chr(10)),
     '"DBA_RECOVERABLE_SCRIPT_ERRORS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23547"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23547"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_RECOVERABLE_SCRIPT_HIST" : '||chr(10)),
     '"DBA_RECOVERABLE_SCRIPT_HIST" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23755"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23755"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_RECOVERABLE_SCRIPT_PARAMS" : '||chr(10)),
     '"DBA_RECOVERABLE_SCRIPT_PARAMS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23548"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23548"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_REGISTRY_HISTORY" : '||chr(10)),
     '"DBA_REGISTRY_HISTORY" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23549"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23549"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_REPLICATION_PROCESS_EVENTS" : '||chr(10)),
     '"ALL_REPLICATION_PROCESS_EVENTS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "http://docs.oracle.com/database/122/REFRN/DBA_REPLICATION_PROCESS_EVENTS.htm#REFRN-GUID-4E91CF30-0035-4C73-9E26-F5ACD9C5ECCE"'||chr(10)),
     '     "http://docs.oracle.com/database/122/REFRN/DBA_REPLICATION_PROCESS_EVENTS.htm#REFRN-GUID-4E91CF30-0035-4C73-9E26-F5ACD9C5ECCE"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_RULES" : '||chr(10)),
     '"ALL_RULES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20240"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20240"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_RULE_SET_RULES" : '||chr(10)),
     '"ALL_RULE_SET_RULES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20238"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20238"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_SCHEDULER_JOBS" : '||chr(10)),
     '"ALL_SCHEDULER_JOBS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20348"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20348"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_SEGMENTS" : '||chr(10)),
     '"DBA_SEGMENTS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23243"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23243"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_STREAMS_ADMINISTRATOR" : '||chr(10)),
     '"DBA_STREAMS_ADMINISTRATOR" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23371"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23371"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_STREAMS_STMT_HANDLERS" : '||chr(10)),
     '"DBA_STREAMS_STMT_HANDLERS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23765"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23765"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_STREAMS_STMTS" : '||chr(10)),
     '"DBA_STREAMS_STMTS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23766"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23766"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_SUPPLEMENTAL_LOGGING" : '||chr(10)),
     '"ALL_SUPPLEMENTAL_LOGGING" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23877"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23877"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_TAB_STATISTICS" : '||chr(10)),
     '"ALL_TAB_STATISTICS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20376"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20376"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_USERS" : '||chr(10)),
     '"ALL_USERS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20302"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20302"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_XSTREAM_OUTBOUND_PROGRESS" : '||chr(10)),
     '"ALL_XSTREAM_OUTBOUND_PROGRESS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20736"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20736"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDEF$" : '||chr(10)),
     '"CDEF$" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CON$" : '||chr(10)),
     '"CON$" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_ALERT_HISTORY" : '||chr(10)),
     '"DBA_ALERT_HISTORY" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23392"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23392"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"_DBA_APPLY_CDR_INFO" : '||chr(10)),
     '"_DBA_APPLY_CDR_INFO" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_APPLY_OBJECT_DEPENDENCIES" : '||chr(10)),
     '"DBA_APPLY_OBJECT_DEPENDENCIES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23497"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23497"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_APPLY_VALUE_DEPENDENCIES" : '||chr(10)),
     '"DBA_APPLY_VALUE_DEPENDENCIES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23498"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23498"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_DATA_FILES" : '||chr(10)),
     '"DBA_DATA_FILES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23049"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23049"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_OUTSTANDING_ALERTS" : '||chr(10)),
     '"DBA_OUTSTANDING_ALERTS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23464"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23464"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_PART_TABLES" : '||chr(10)),
     '"DBA_PART_TABLES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23159"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23159"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_REGISTRY" : '||chr(10)),
     '"DBA_REGISTRY" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23186"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23186"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_SEQUENCES" : '||chr(10)),
     '"ALL_SEQUENCES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20244"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN20244"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_STREAMS_TP_COMPONENT" : '||chr(10)),
     '"DBA_STREAMS_TP_COMPONENT" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23611"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23611"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_STREAMS_TP_COMPONENT_LINK" : '||chr(10)),
     '"DBA_STREAMS_TP_COMPONENT_LINK" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23612"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23612"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_STREAMS_TP_COMPONENT_STAT" : '||chr(10)),
     '"DBA_STREAMS_TP_COMPONENT_STAT" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23613"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23613"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_STREAMS_TP_DATABASE" : '||chr(10)),
     '"DBA_STREAMS_TP_DATABASE" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23614"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23614"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_STREAMS_TP_PATH_BOTTLENECK" : '||chr(10)),
     '"DBA_STREAMS_TP_PATH_BOTTLENECK" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23615"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23615"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_STREAMS_TP_PATH_STAT" : '||chr(10)),
     '"DBA_STREAMS_TP_PATH_STAT" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23616"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23616"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_TAB_SUBPARTITIONS" : '||chr(10)),
     '"DBA_TAB_SUBPARTITIONS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23285"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN23285"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GLOBAL_NAME" : '||chr(10)),
     '"GLOBAL_NAME" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN29019"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN29019"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$ARCHIVED_LOG" : '||chr(10)),
     '"V$ARCHIVED_LOG" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30011"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30011"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$BUFFERED_PUBLISHERS" : '||chr(10)),
     '"V$BUFFERED_PUBLISHERS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30316"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30316"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$BUFFERED_QUEUES" : '||chr(10)),
     '"V$BUFFERED_QUEUES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30317"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30317"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$BUFFERED_SUBSCRIBERS" : '||chr(10)),
     '"V$BUFFERED_SUBSCRIBERS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30318"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30318"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$GG_APPLY_COORDINATOR" : '||chr(10)),
     '"V$GG_APPLY_COORDINATOR" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30684"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30684"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$GG_APPLY_READER" : '||chr(10)),
     '"V$GG_APPLY_READER" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30686"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30686"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$GG_APPLY_RECEIVER" : '||chr(10)),
     '"V$GG_APPLY_RECEIVER" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30728"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30728"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$GG_APPLY_SERVER" : '||chr(10)),
     '"V$GG_APPLY_SERVER" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30688"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30688"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$GOLDENGATE_CAPTURE" : '||chr(10)),
     '"V$GOLDENGATE_CAPTURE" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30654"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30654"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$GOLDENGATE_MESSAGE_TRACKING" : '||chr(10)),
     '"V$GOLDENGATE_MESSAGE_TRACKING" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30656"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30656"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$GOLDENGATE_TABLE_STATS" : '||chr(10)),
     '"V$GOLDENGATE_TABLE_STATS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30657"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30657"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$GOLDENGATE_TRANSACTION" : '||chr(10)),
     '"V$GOLDENGATE_TRANSACTION" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30655"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30655"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$INSTANCE" : '||chr(10)),
     '"V$INSTANCE" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30105"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30105"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$LOGMNR_DICTIONARY_LOAD" : '||chr(10)),
     '"V$LOGMNR_DICTIONARY_LOAD" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30378"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30378"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$LOGMNR_SESSION" : '||chr(10)),
     '"V$LOGMNR_SESSION" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30139"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30139"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$LOGMNR_STATS" : '||chr(10)),
     '"V$LOGMNR_STATS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30140"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30140"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$RULE" : '||chr(10)),
     '"V$RULE" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30307"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30307"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$RULE_SET" : '||chr(10)),
     '"V$RULE_SET" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30218"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30218"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SESSION" : '||chr(10)),
     '"V$SESSION" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30223"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30223"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SESSION_EVENT" : '||chr(10)),
     '"V$SESSION_EVENT" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30226"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30226"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SESSION_WAIT" : '||chr(10)),
     '"V$SESSION_WAIT" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30229"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30229"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SESSTAT" : '||chr(10)),
     '"V$SESSTAT" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRNREFRN30232"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRNREFRN30232"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SGAINFO" : '||chr(10)),
     '"V$SGAINFO" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30314"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30314"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SQL" : '||chr(10)),
     '"V$SQL" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30246"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30246"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$STATNAME" : '||chr(10)),
     '"V$STATNAME" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30265"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30265"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$STREAMS_POOL_STATISTICS" : '||chr(10)),
     '"V$STREAMS_POOL_STATISTICS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRNREFRN30634"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRNREFRN30634"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$TRANSACTION" : '||chr(10)),
     '"V$TRANSACTION" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30291"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30291"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNRC_DBNAME_UID_MAP" : '||chr(10)),
     '"LOGMNRC_DBNAME_UID_MAP" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNRC_GTCS" : '||chr(10)),
     '"LOGMNRC_GTCS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNRC_GTLO" : '||chr(10)),
     '"LOGMNRC_GTLO" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR_CONTAINER$" : '||chr(10)),
     '"LOGMNR_CONTAINER$" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR_DICTIONARY$" : '||chr(10)),
     '"LOGMNR_DICTIONARY$" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR_DICTSTATE$" : '||chr(10)),
     '"LOGMNR_DICTSTATE$" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR_DID$" : '||chr(10)),
     '"LOGMNR_DID$" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR_PARAMETER$" : '||chr(10)),
     '"LOGMNR_PARAMETER$" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR_PDB_INFO$" : '||chr(10)),
     '"LOGMNR_PDB_INFO$" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR_RESTART_CKPT$" : '||chr(10)),
     '"LOGMNR_RESTART_CKPT$" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR$SCHEMA_ALLKEY_SUPLOG" : '||chr(10)),
     '"LOGMNR$SCHEMA_ALLKEY_SUPLOG" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR_SESSION$" : '||chr(10)),
     '"LOGMNR_SESSION$" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR_UID$" : '||chr(10)),
     '"LOGMNR_UID$" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"NLS_DATABASE_PARAMETERS" : '||chr(10)),
     '"NLS_DATABASE_PARAMETERS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"OBJ$" : '||chr(10)),
     '"OBJ$" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"PROPS$" : '||chr(10)),
     '"PROPS$" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"STREAMS$_APPLY_PROCESS" : '||chr(10)),
     '"STREAMS$_APPLY_PROCESS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"STREAMS$_APPLY_PROGRESS" : '||chr(10)),
     '"STREAMS$_APPLY_PROGRESS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"STREAMS$_CAPTURE_PROCESS" : '||chr(10)),
     '"STREAMS$_CAPTURE_PROCESS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"STREAMS$_RULES" : '||chr(10)),
     '"STREAMS$_RULES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"USER$" : '||chr(10)),
     '"USER$" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$ACCESS" : '||chr(10)),
     '"V$ACCESS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30001"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30001"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$ACTIVE_SESSION_HISTORY" : '||chr(10)),
     '"V$ACTIVE_SESSION_HISTORY" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30299"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30299"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$CONTAINERS" : '||chr(10)),
     '"V$CONTAINERS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30708"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30708"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$DATABASE" : '||chr(10)),
     '"V$DATABASE" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30047"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30047"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$DATABASE_INCARNATION" : '||chr(10)),
     '"V$DATABASE_INCARNATION" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30049"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30049"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$FIXED_TABLE" : '||chr(10)),
     '"V$FIXED_TABLE" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30089"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30089"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$LOG_HISTORY" : '||chr(10)),
     '"V$LOG_HISTORY" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30128"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30128"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$LOGMNR_PROCESS" : '||chr(10)),
     '"V$LOGMNR_PROCESS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30137"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30137"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$PARAMETER" : '||chr(10)),
     '"V$PARAMETER" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30176"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30176"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$PROCESS" : '||chr(10)),
     '"V$PROCESS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30186"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30186"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$PROPAGATION_RECEIVER" : '||chr(10)),
     '"V$PROPAGATION_RECEIVER" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30352"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30352"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SERVICES" : '||chr(10)),
     '"V$SERVICES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30354"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30354"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SESS_TIME_MODEL" : '||chr(10)),
     '"V$SESS_TIME_MODEL" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30340"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30340"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SGASTAT" : '||chr(10)),
     '"V$SGASTAT" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30238"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30238"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SQLAREA" : '||chr(10)),
     '"V$SQLAREA" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30259"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30259"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SQL_PLAN" : '||chr(10)),
     '"V$SQL_PLAN" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30250"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30250"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$STANDBY_LOG" : '||chr(10)),
     '"V$STANDBY_LOG" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30263"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30263"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$VERSION" : '||chr(10)),
     '"V$VERSION" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30296"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30296"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$XSTREAM_OUTBOUND_SERVER" : '||chr(10)),
     '"V$XSTREAM_OUTBOUND_SERVER" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30641"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN30641"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"X$KNGFL" : '||chr(10)),
     '"X$KNGFL" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"X$KNGFLE" : '||chr(10)),
     '"X$KNGFLE" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"X$KNLASG" : '||chr(10)),
     '"X$KNLASG" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"X$KNSTCAP" : '||chr(10)),
     '"X$KNSTCAP" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"X$KNSTCAPCACHE" : '||chr(10)),
     '"X$KNSTCAPCACHE" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"X$KRVXSV" : '||chr(10)),
     '"X$KRVXSV" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"X$KWQBPMT" : '||chr(10)),
     '"X$KWQBPMT" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"X$KWQPD" : '||chr(10)),
     '"X$KWQPD" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db112&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' '||chr(10)),
     ' '||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
end if;
end;
/

set define on
set define off
declare
  clb clob;
  ver varchar2(20);
begin
 select version into ver from v$instance ;
  if dbms_goldengate_hcadm_int.select_version(ver, '12.1.0.0.0','12.1.0.2.99') = '1' then
  delete from gghc_files where ID = 'doc_links.json';
  insert into gghc_files(ID, FILE_CONTENT) values 
  ('doc_links.json',empty_clob()) returning FILE_CONTENT into clb;
  dbms_lob.writeappend(clb, 
     length('{'||chr(10)),
     '{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_CONSTRAINTS" : '||chr(10)),
     '"ALL_CONSTRAINTS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20047"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20047"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_INDEXES" : '||chr(10)),
     '"ALL_INDEXES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20088"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20088"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_OBJECTS" : '||chr(10)),
     '"ALL_OBJECTS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20146"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20146"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_TAB_COLUMNS" : '||chr(10)),
     '"ALL_TAB_COLUMNS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20277"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20277"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_TABLES" : '||chr(10)),
     '"ALL_TABLES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20286"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20286"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_TAB_PARTITIONS" : '||chr(10)),
     '"ALL_TAB_PARTITIONS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20281"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20281"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_TRIGGERS" : '||chr(10)),
     '"ALL_TRIGGERS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20293"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20293"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY" : '||chr(10)),
     '"ALL_APPLY" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20005"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20005"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_CONFLICT_COLUMNS" : '||chr(10)),
     '"ALL_APPLY_CONFLICT_COLUMNS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20006"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20006"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_DML_CONF_HANDLERS" : '||chr(10)),
     '"ALL_APPLY_DML_CONF_HANDLERS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_DML_CONF_HANDLERS.htm#REFRN-GUID-7BF15887-0A51-450E-B8C9-5C5FBA4CF3A4"'||chr(10)),
     '     "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_DML_CONF_HANDLERS.htm#REFRN-GUID-7BF15887-0A51-450E-B8C9-5C5FBA4CF3A4"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_DML_HANDLERS" : '||chr(10)),
     '"ALL_APPLY_DML_HANDLERS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20007"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20007"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_ERROR" : '||chr(10)),
     '"ALL_APPLY_ERROR" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20008"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20008"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_ERROR_MESSAGES" : '||chr(10)),
     '"ALL_APPLY_ERROR_MESSAGES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20783"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20783"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_HANDLE_COLLISIONS" : '||chr(10)),
     '"ALL_APPLY_HANDLE_COLLISIONS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_HANDLE_COLLISIONS.htm#REFRN-GUID-C4B47347-0A99-4666-ABC8-B9104BFD3E28"'||chr(10)),
     '     "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_HANDLE_COLLISIONS.htm#REFRN-GUID-C4B47347-0A99-4666-ABC8-B9104BFD3E28"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_INSTANTIATED_GLOBAL" : '||chr(10)),
     '"ALL_APPLY_INSTANTIATED_GLOBAL" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20334"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20334"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_INSTANTIATED_OBJECTS" : '||chr(10)),
     '"ALL_APPLY_INSTANTIATED_OBJECTS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20009"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20009"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_INSTANTIATED_SCHEMAS" : '||chr(10)),
     '"ALL_APPLY_INSTANTIATED_SCHEMAS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20335"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20335"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_KEY_COLUMNS" : '||chr(10)),
     '"ALL_APPLY_KEY_COLUMNS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20010"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20010"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_PARAMETERS" : '||chr(10)),
     '"ALL_APPLY_PARAMETERS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20011"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20011"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_PROGRESS" : '||chr(10)),
     '"ALL_APPLY_PROGRESS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20012"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20012"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_REPERROR_HANDLERS" : '||chr(10)),
     '"ALL_APPLY_REPERROR_HANDLERS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_REPERROR_HANDLERS.htm#REFRN-GUID-3ADEFAAC-DD5F-4029-9A39-9C354EAF6BC1"'||chr(10)),
     '     "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_REPERROR_HANDLERS.htm#REFRN-GUID-3ADEFAAC-DD5F-4029-9A39-9C354EAF6BC1"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_TABLE_COLUMNS" : '||chr(10)),
     '"ALL_APPLY_TABLE_COLUMNS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20398"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20398"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_AQ_AGENT_PRIVS" : '||chr(10)),
     '"DBA_AQ_AGENT_PRIVS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23013"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23013"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_AQ_AGENTS" : '||chr(10)),
     '"DBA_AQ_AGENTS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23014"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23014"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_CAPTURE" : '||chr(10)),
     '"ALL_CAPTURE" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20031"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20031"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_CAPTURE_PARAMETERS" : '||chr(10)),
     '"ALL_CAPTURE_PARAMETERS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20032"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20032"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_CAPTURE_PREPARED_DATABASE" : '||chr(10)),
     '"ALL_CAPTURE_PREPARED_DATABASE" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20033"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20033"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_CAPTURE_PREPARED_SCHEMAS" : '||chr(10)),
     '"ALL_CAPTURE_PREPARED_SCHEMAS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20034"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20034"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_CAPTURE_PREPARED_TABLES" : '||chr(10)),
     '"ALL_CAPTURE_PREPARED_TABLES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20035"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20035"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_COMPARISON" : '||chr(10)),
     '"DBA_COMPARISON" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23582"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23582"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_COMPARISON_SCAN" : '||chr(10)),
     '"DBA_COMPARISON_SCAN" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23585"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23585"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_GG_AUTO_CDR_COLUMN_GROUPS" : '||chr(10)),
     '"ALL_GG_AUTO_CDR_COLUMN_GROUPS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_GG_AUTO_CDR_COLUMNS" : '||chr(10)),
     '"ALL_GG_AUTO_CDR_COLUMNS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_GG_AUTO_CDR_TABLES" : '||chr(10)),
     '"ALL_GG_AUTO_CDR_TABLES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_GG_INBOUND_PROGRESS" : '||chr(10)),
     '"ALL_GG_INBOUND_PROGRESS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20912"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20912"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_GOLDENGATE_INBOUND" : '||chr(10)),
     '"ALL_GOLDENGATE_INBOUND" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20911"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20911"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_GOLDENGATE_PRIVILEGES" : '||chr(10)),
     '"ALL_GOLDENGATE_PRIVILEGES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20804"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20804"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_GOLDENGATE_SUPPORT_MODE" : '||chr(10)),
     '"DBA_GOLDENGATE_SUPPORT_MODE" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23952"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23952"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_JOBS" : '||chr(10)),
     '"DBA_JOBS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23105"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23105"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_LOG_GROUP_COLUMNS" : '||chr(10)),
     '"ALL_LOG_GROUP_COLUMNS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20119"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20119"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_LOG_GROUPS" : '||chr(10)),
     '"ALL_LOG_GROUPS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20120"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20120"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_QUEUES" : '||chr(10)),
     '"ALL_QUEUES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20176"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20176"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_QUEUE_SUBSCRIBERS" : '||chr(10)),
     '"ALL_QUEUE_SUBSCRIBERS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20544"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20544"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_QUEUE_TABLES" : '||chr(10)),
     '"ALL_QUEUE_TABLES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20175"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20175"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_RECOVERABLE_SCRIPT" : '||chr(10)),
     '"DBA_RECOVERABLE_SCRIPT" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23545"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23545"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_RECOVERABLE_SCRIPT_BLOCKS" : '||chr(10)),
     '"DBA_RECOVERABLE_SCRIPT_BLOCKS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23546"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23546"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_RECOVERABLE_SCRIPT_ERRORS" : '||chr(10)),
     '"DBA_RECOVERABLE_SCRIPT_ERRORS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23547"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23547"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_RECOVERABLE_SCRIPT_HIST" : '||chr(10)),
     '"DBA_RECOVERABLE_SCRIPT_HIST" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23755"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23755"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_RECOVERABLE_SCRIPT_PARAMS" : '||chr(10)),
     '"DBA_RECOVERABLE_SCRIPT_PARAMS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23548"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23548"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_REGISTRY_HISTORY" : '||chr(10)),
     '"DBA_REGISTRY_HISTORY" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23549"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23549"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_REPLICATION_PROCESS_EVENTS" : '||chr(10)),
     '"ALL_REPLICATION_PROCESS_EVENTS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "http://docs.oracle.com/database/122/REFRN/DBA_REPLICATION_PROCESS_EVENTS.htm#REFRN-GUID-4E91CF30-0035-4C73-9E26-F5ACD9C5ECCE"'||chr(10)),
     '     "http://docs.oracle.com/database/122/REFRN/DBA_REPLICATION_PROCESS_EVENTS.htm#REFRN-GUID-4E91CF30-0035-4C73-9E26-F5ACD9C5ECCE"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_RULES" : '||chr(10)),
     '"ALL_RULES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20240"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20240"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_RULE_SET_RULES" : '||chr(10)),
     '"ALL_RULE_SET_RULES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20238"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20238"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_SCHEDULER_JOBS" : '||chr(10)),
     '"ALL_SCHEDULER_JOBS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20348"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20348"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_SEGMENTS" : '||chr(10)),
     '"DBA_SEGMENTS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23243"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23243"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_STREAMS_ADMINISTRATOR" : '||chr(10)),
     '"DBA_STREAMS_ADMINISTRATOR" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23371"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23371"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_STREAMS_STMT_HANDLERS" : '||chr(10)),
     '"DBA_STREAMS_STMT_HANDLERS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23765"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23765"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_STREAMS_STMTS" : '||chr(10)),
     '"DBA_STREAMS_STMTS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23766"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23766"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_SUPPLEMENTAL_LOGGING" : '||chr(10)),
     '"ALL_SUPPLEMENTAL_LOGGING" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23877"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23877"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_TAB_STATISTICS" : '||chr(10)),
     '"ALL_TAB_STATISTICS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20376"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20376"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_USERS" : '||chr(10)),
     '"ALL_USERS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20302"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20302"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_XSTREAM_OUTBOUND_PROGRESS" : '||chr(10)),
     '"ALL_XSTREAM_OUTBOUND_PROGRESS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20736"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20736"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDEF$" : '||chr(10)),
     '"CDEF$" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CON$" : '||chr(10)),
     '"CON$" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_ALERT_HISTORY" : '||chr(10)),
     '"DBA_ALERT_HISTORY" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23392"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23392"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"_DBA_APPLY_CDR_INFO" : '||chr(10)),
     '"_DBA_APPLY_CDR_INFO" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_APPLY_OBJECT_DEPENDENCIES" : '||chr(10)),
     '"DBA_APPLY_OBJECT_DEPENDENCIES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23497"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23497"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_APPLY_VALUE_DEPENDENCIES" : '||chr(10)),
     '"DBA_APPLY_VALUE_DEPENDENCIES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23498"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23498"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_DATA_FILES" : '||chr(10)),
     '"DBA_DATA_FILES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23049"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23049"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_OUTSTANDING_ALERTS" : '||chr(10)),
     '"DBA_OUTSTANDING_ALERTS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23464"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23464"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_PART_TABLES" : '||chr(10)),
     '"DBA_PART_TABLES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23159"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23159"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_REGISTRY" : '||chr(10)),
     '"DBA_REGISTRY" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23186"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23186"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_SEQUENCES" : '||chr(10)),
     '"ALL_SEQUENCES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20244"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN20244"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_STREAMS_TP_COMPONENT" : '||chr(10)),
     '"DBA_STREAMS_TP_COMPONENT" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23611"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23611"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_STREAMS_TP_COMPONENT_LINK" : '||chr(10)),
     '"DBA_STREAMS_TP_COMPONENT_LINK" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23612"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23612"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_STREAMS_TP_COMPONENT_STAT" : '||chr(10)),
     '"DBA_STREAMS_TP_COMPONENT_STAT" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23613"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23613"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_STREAMS_TP_DATABASE" : '||chr(10)),
     '"DBA_STREAMS_TP_DATABASE" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23614"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23614"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_STREAMS_TP_PATH_BOTTLENECK" : '||chr(10)),
     '"DBA_STREAMS_TP_PATH_BOTTLENECK" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23615"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23615"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_STREAMS_TP_PATH_STAT" : '||chr(10)),
     '"DBA_STREAMS_TP_PATH_STAT" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23616"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23616"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_TAB_SUBPARTITIONS" : '||chr(10)),
     '"DBA_TAB_SUBPARTITIONS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23285"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN23285"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GLOBAL_NAME" : '||chr(10)),
     '"GLOBAL_NAME" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN29019"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN29019"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$ARCHIVED_LOG" : '||chr(10)),
     '"V$ARCHIVED_LOG" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30011"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30011"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$BUFFERED_PUBLISHERS" : '||chr(10)),
     '"V$BUFFERED_PUBLISHERS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30316"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30316"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$BUFFERED_QUEUES" : '||chr(10)),
     '"V$BUFFERED_QUEUES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30317"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30317"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$BUFFERED_SUBSCRIBERS" : '||chr(10)),
     '"V$BUFFERED_SUBSCRIBERS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30318"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30318"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$GG_APPLY_COORDINATOR" : '||chr(10)),
     '"V$GG_APPLY_COORDINATOR" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30684"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30684"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$GG_APPLY_READER" : '||chr(10)),
     '"V$GG_APPLY_READER" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30686"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30686"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$GG_APPLY_RECEIVER" : '||chr(10)),
     '"V$GG_APPLY_RECEIVER" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30728"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30728"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$GG_APPLY_SERVER" : '||chr(10)),
     '"V$GG_APPLY_SERVER" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30688"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30688"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$GOLDENGATE_CAPTURE" : '||chr(10)),
     '"V$GOLDENGATE_CAPTURE" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30654"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30654"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$GOLDENGATE_MESSAGE_TRACKING" : '||chr(10)),
     '"V$GOLDENGATE_MESSAGE_TRACKING" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30656"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30656"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$GOLDENGATE_TABLE_STATS" : '||chr(10)),
     '"V$GOLDENGATE_TABLE_STATS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30657"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30657"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$GOLDENGATE_TRANSACTION" : '||chr(10)),
     '"V$GOLDENGATE_TRANSACTION" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30655"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30655"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$INSTANCE" : '||chr(10)),
     '"V$INSTANCE" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30105"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30105"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$LOGMNR_DICTIONARY_LOAD" : '||chr(10)),
     '"V$LOGMNR_DICTIONARY_LOAD" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30378"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30378"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$LOGMNR_SESSION" : '||chr(10)),
     '"V$LOGMNR_SESSION" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30139"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30139"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$LOGMNR_STATS" : '||chr(10)),
     '"V$LOGMNR_STATS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30140"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30140"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$RULE" : '||chr(10)),
     '"V$RULE" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30307"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30307"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$RULE_SET" : '||chr(10)),
     '"V$RULE_SET" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30218"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30218"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SESSION" : '||chr(10)),
     '"V$SESSION" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30223"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30223"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SESSION_EVENT" : '||chr(10)),
     '"V$SESSION_EVENT" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30226"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30226"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SESSION_WAIT" : '||chr(10)),
     '"V$SESSION_WAIT" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30229"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30229"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SESSTAT" : '||chr(10)),
     '"V$SESSTAT" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRNREFRN30232"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRNREFRN30232"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SGAINFO" : '||chr(10)),
     '"V$SGAINFO" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30314"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30314"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SQL" : '||chr(10)),
     '"V$SQL" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30246"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30246"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$STATNAME" : '||chr(10)),
     '"V$STATNAME" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30265"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30265"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$STREAMS_POOL_STATISTICS" : '||chr(10)),
     '"V$STREAMS_POOL_STATISTICS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRNREFRN30634"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRNREFRN30634"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$TRANSACTION" : '||chr(10)),
     '"V$TRANSACTION" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30291"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30291"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNRC_DBNAME_UID_MAP" : '||chr(10)),
     '"LOGMNRC_DBNAME_UID_MAP" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNRC_GTCS" : '||chr(10)),
     '"LOGMNRC_GTCS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNRC_GTLO" : '||chr(10)),
     '"LOGMNRC_GTLO" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR_CONTAINER$" : '||chr(10)),
     '"LOGMNR_CONTAINER$" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR_DICTIONARY$" : '||chr(10)),
     '"LOGMNR_DICTIONARY$" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR_DICTSTATE$" : '||chr(10)),
     '"LOGMNR_DICTSTATE$" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR_DID$" : '||chr(10)),
     '"LOGMNR_DID$" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR_PARAMETER$" : '||chr(10)),
     '"LOGMNR_PARAMETER$" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR_PDB_INFO$" : '||chr(10)),
     '"LOGMNR_PDB_INFO$" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR_RESTART_CKPT$" : '||chr(10)),
     '"LOGMNR_RESTART_CKPT$" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR$SCHEMA_ALLKEY_SUPLOG" : '||chr(10)),
     '"LOGMNR$SCHEMA_ALLKEY_SUPLOG" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR_SESSION$" : '||chr(10)),
     '"LOGMNR_SESSION$" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR_UID$" : '||chr(10)),
     '"LOGMNR_UID$" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"NLS_DATABASE_PARAMETERS" : '||chr(10)),
     '"NLS_DATABASE_PARAMETERS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"OBJ$" : '||chr(10)),
     '"OBJ$" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"PROPS$" : '||chr(10)),
     '"PROPS$" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"STREAMS$_APPLY_PROCESS" : '||chr(10)),
     '"STREAMS$_APPLY_PROCESS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"STREAMS$_APPLY_PROGRESS" : '||chr(10)),
     '"STREAMS$_APPLY_PROGRESS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"STREAMS$_CAPTURE_PROCESS" : '||chr(10)),
     '"STREAMS$_CAPTURE_PROCESS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"STREAMS$_RULES" : '||chr(10)),
     '"STREAMS$_RULES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"USER$" : '||chr(10)),
     '"USER$" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$ACCESS" : '||chr(10)),
     '"V$ACCESS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30001"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30001"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$ACTIVE_SESSION_HISTORY" : '||chr(10)),
     '"V$ACTIVE_SESSION_HISTORY" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30299"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30299"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$CONTAINERS" : '||chr(10)),
     '"V$CONTAINERS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30708"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30708"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$DATABASE" : '||chr(10)),
     '"V$DATABASE" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30047"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30047"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$DATABASE_INCARNATION" : '||chr(10)),
     '"V$DATABASE_INCARNATION" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30049"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30049"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$FIXED_TABLE" : '||chr(10)),
     '"V$FIXED_TABLE" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30089"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30089"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$LOG_HISTORY" : '||chr(10)),
     '"V$LOG_HISTORY" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30128"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30128"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$LOGMNR_PROCESS" : '||chr(10)),
     '"V$LOGMNR_PROCESS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30137"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30137"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$PARAMETER" : '||chr(10)),
     '"V$PARAMETER" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30176"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30176"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$PROCESS" : '||chr(10)),
     '"V$PROCESS" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30186"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30186"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$PROPAGATION_RECEIVER" : '||chr(10)),
     '"V$PROPAGATION_RECEIVER" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30352"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30352"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SERVICES" : '||chr(10)),
     '"V$SERVICES" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30354"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30354"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SESS_TIME_MODEL" : '||chr(10)),
     '"V$SESS_TIME_MODEL" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30340"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30340"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SGASTAT" : '||chr(10)),
     '"V$SGASTAT" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30238"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30238"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SQLAREA" : '||chr(10)),
     '"V$SQLAREA" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30259"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30259"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SQL_PLAN" : '||chr(10)),
     '"V$SQL_PLAN" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30250"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30250"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$STANDBY_LOG" : '||chr(10)),
     '"V$STANDBY_LOG" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30263"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30263"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$VERSION" : '||chr(10)),
     '"V$VERSION" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30296"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30296"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$XSTREAM_OUTBOUND_SERVER" : '||chr(10)),
     '"V$XSTREAM_OUTBOUND_SERVER" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30641"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN30641"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"X$KNGFL" : '||chr(10)),
     '"X$KNGFL" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"X$KNGFLE" : '||chr(10)),
     '"X$KNGFLE" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"X$KNLASG" : '||chr(10)),
     '"X$KNLASG" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"X$KNSTCAP" : '||chr(10)),
     '"X$KNSTCAP" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"X$KNSTCAPCACHE" : '||chr(10)),
     '"X$KNSTCAPCACHE" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"X$KRVXSV" : '||chr(10)),
     '"X$KRVXSV" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"X$KWQBPMT" : '||chr(10)),
     '"X$KWQBPMT" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' ,'||chr(10)),
     ' ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"X$KWQPD" : '||chr(10)),
     '"X$KWQPD" : '||chr(10));
  dbms_lob.writeappend(clb, 
     length('     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10)),
     '     "https://www.oracle.com/pls/topic/lookup?ctx=db121&id=REFRN"'||chr(10));
  dbms_lob.writeappend(clb, 
     length(' '||chr(10)),
     ' '||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
end if;
end;
/

set define on
set define off
declare
  clb clob;
  ver varchar2(20);
begin
 select version into ver from v$instance ;
  if dbms_goldengate_hcadm_int.select_version(ver, '12.2.0.0.0','') = '1' then
  delete from gghc_files where ID = 'doc_links.json';
  insert into gghc_files(ID, FILE_CONTENT) values 
  ('doc_links.json',empty_clob()) returning FILE_CONTENT into clb;
  dbms_lob.writeappend(clb, 
     length('{'||chr(10)),
     '{'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_CONFLICT_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20006" ,'||chr(10)),
     '"ALL_APPLY_CONFLICT_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20006" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_DML_CONF_HANDLERS" : "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_DML_CONF_HANDLERS.htm#REFRN-GUID-7BF15887-0A51-450E-B8C9-5C5FBA4CF3A4" ,'||chr(10)),
     '"ALL_APPLY_DML_CONF_HANDLERS" : "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_DML_CONF_HANDLERS.htm#REFRN-GUID-7BF15887-0A51-450E-B8C9-5C5FBA4CF3A4" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_DML_HANDLERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20007" ,'||chr(10)),
     '"ALL_APPLY_DML_HANDLERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20007" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_ERROR" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20008" ,'||chr(10)),
     '"ALL_APPLY_ERROR" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20008" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_ERROR_MESSAGES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20783" ,'||chr(10)),
     '"ALL_APPLY_ERROR_MESSAGES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20783" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_HANDLE_COLLISIONS" : "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_HANDLE_COLLISIONS.htm#REFRN-GUID-C4B47347-0A99-4666-ABC8-B9104BFD3E28" ,'||chr(10)),
     '"ALL_APPLY_HANDLE_COLLISIONS" : "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_HANDLE_COLLISIONS.htm#REFRN-GUID-C4B47347-0A99-4666-ABC8-B9104BFD3E28" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20005" ,'||chr(10)),
     '"ALL_APPLY" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20005" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_INSTANTIATED_GLOBAL" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20334" ,'||chr(10)),
     '"ALL_APPLY_INSTANTIATED_GLOBAL" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20334" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_INSTANTIATED_OBJECTS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20009" ,'||chr(10)),
     '"ALL_APPLY_INSTANTIATED_OBJECTS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20009" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_INSTANTIATED_SCHEMAS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20335" ,'||chr(10)),
     '"ALL_APPLY_INSTANTIATED_SCHEMAS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20335" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_KEY_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20010" ,'||chr(10)),
     '"ALL_APPLY_KEY_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20010" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_PARAMETERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20011" ,'||chr(10)),
     '"ALL_APPLY_PARAMETERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20011" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_PROGRESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20012" ,'||chr(10)),
     '"ALL_APPLY_PROGRESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20012" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_REPERROR_HANDLERS" : "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_REPERROR_HANDLERS.htm#REFRN-GUID-3ADEFAAC-DD5F-4029-9A39-9C354EAF6BC1" ,'||chr(10)),
     '"ALL_APPLY_REPERROR_HANDLERS" : "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_REPERROR_HANDLERS.htm#REFRN-GUID-3ADEFAAC-DD5F-4029-9A39-9C354EAF6BC1" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_APPLY_TABLE_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20398" ,'||chr(10)),
     '"ALL_APPLY_TABLE_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20398" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_CAPTURE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20031" ,'||chr(10)),
     '"ALL_CAPTURE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20031" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_CAPTURE_PARAMETERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20032" ,'||chr(10)),
     '"ALL_CAPTURE_PARAMETERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20032" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_CAPTURE_PREPARED_DATABASE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20033" ,'||chr(10)),
     '"ALL_CAPTURE_PREPARED_DATABASE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20033" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_CAPTURE_PREPARED_SCHEMAS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20034" ,'||chr(10)),
     '"ALL_CAPTURE_PREPARED_SCHEMAS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20034" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_CAPTURE_PREPARED_TABLES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20035" ,'||chr(10)),
     '"ALL_CAPTURE_PREPARED_TABLES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20035" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_CONSTRAINTS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20047" ,'||chr(10)),
     '"ALL_CONSTRAINTS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20047" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_GG_AUTO_CDR_COLUMN_GROUPS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"ALL_GG_AUTO_CDR_COLUMN_GROUPS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_GG_AUTO_CDR_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"ALL_GG_AUTO_CDR_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_GG_AUTO_CDR_TABLES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"ALL_GG_AUTO_CDR_TABLES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_GG_INBOUND_PROGRESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20912" ,'||chr(10)),
     '"ALL_GG_INBOUND_PROGRESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20912" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_GOLDENGATE_INBOUND" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20911" ,'||chr(10)),
     '"ALL_GOLDENGATE_INBOUND" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20911" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_GOLDENGATE_PRIVILEGES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20804" ,'||chr(10)),
     '"ALL_GOLDENGATE_PRIVILEGES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20804" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_INDEXES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20088" ,'||chr(10)),
     '"ALL_INDEXES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20088" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_LOG_GROUP_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20119" ,'||chr(10)),
     '"ALL_LOG_GROUP_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20119" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_LOG_GROUPS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20120" ,'||chr(10)),
     '"ALL_LOG_GROUPS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20120" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_OBJECTS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20146" ,'||chr(10)),
     '"ALL_OBJECTS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20146" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_QUEUES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20176" ,'||chr(10)),
     '"ALL_QUEUES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20176" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_QUEUE_SUBSCRIBERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20544" ,'||chr(10)),
     '"ALL_QUEUE_SUBSCRIBERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20544" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_QUEUE_TABLES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20175" ,'||chr(10)),
     '"ALL_QUEUE_TABLES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20175" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_REPLICATION_PROCESS_EVENTS" : "http://docs.oracle.com/database/122/REFRN/DBA_REPLICATION_PROCESS_EVENTS.htm#REFRN-GUID-4E91CF30-0035-4C73-9E26-F5ACD9C5ECCE" ,'||chr(10)),
     '"ALL_REPLICATION_PROCESS_EVENTS" : "http://docs.oracle.com/database/122/REFRN/DBA_REPLICATION_PROCESS_EVENTS.htm#REFRN-GUID-4E91CF30-0035-4C73-9E26-F5ACD9C5ECCE" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_RULE_SET_RULES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20238" ,'||chr(10)),
     '"ALL_RULE_SET_RULES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20238" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_RULES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20240" ,'||chr(10)),
     '"ALL_RULES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20240" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_SCHEDULER_JOBS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20348" ,'||chr(10)),
     '"ALL_SCHEDULER_JOBS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20348" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_SEQUENCES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20244" ,'||chr(10)),
     '"ALL_SEQUENCES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20244" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_SUPPLEMENTAL_LOGGING" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23877" ,'||chr(10)),
     '"ALL_SUPPLEMENTAL_LOGGING" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23877" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_TAB_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20277" ,'||chr(10)),
     '"ALL_TAB_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20277" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_TABLES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20286" ,'||chr(10)),
     '"ALL_TABLES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20286" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_TAB_PARTITIONS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20281" ,'||chr(10)),
     '"ALL_TAB_PARTITIONS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20281" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_TAB_STATISTICS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20376" ,'||chr(10)),
     '"ALL_TAB_STATISTICS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20376" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_TRIGGERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20293" ,'||chr(10)),
     '"ALL_TRIGGERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20293" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_USERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20302" ,'||chr(10)),
     '"ALL_USERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20302" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"ALL_XSTREAM_OUTBOUND_PROGRESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20736" ,'||chr(10)),
     '"ALL_XSTREAM_OUTBOUND_PROGRESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20736" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_APPLY_CONFLICT_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20006" ,'||chr(10)),
     '"CDB_APPLY_CONFLICT_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20006" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_APPLY_DML_CONF_HANDLERS" : "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_DML_CONF_HANDLERS.htm#REFRN-GUID-7BF15887-0A51-450E-B8C9-5C5FBA4CF3A4" ,'||chr(10)),
     '"CDB_APPLY_DML_CONF_HANDLERS" : "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_DML_CONF_HANDLERS.htm#REFRN-GUID-7BF15887-0A51-450E-B8C9-5C5FBA4CF3A4" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_APPLY_DML_HANDLERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20007" ,'||chr(10)),
     '"CDB_APPLY_DML_HANDLERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20007" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_APPLY_ERROR" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20008" ,'||chr(10)),
     '"CDB_APPLY_ERROR" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20008" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_APPLY_ERROR_MESSAGES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20783" ,'||chr(10)),
     '"CDB_APPLY_ERROR_MESSAGES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20783" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_APPLY_HANDLE_COLLISIONS" : "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_HANDLE_COLLISIONS.htm#REFRN-GUID-C4B47347-0A99-4666-ABC8-B9104BFD3E28" ,'||chr(10)),
     '"CDB_APPLY_HANDLE_COLLISIONS" : "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_HANDLE_COLLISIONS.htm#REFRN-GUID-C4B47347-0A99-4666-ABC8-B9104BFD3E28" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_APPLY" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20005" ,'||chr(10)),
     '"CDB_APPLY" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20005" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_APPLY_INSTANTIATED_GLOBAL" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20334" ,'||chr(10)),
     '"CDB_APPLY_INSTANTIATED_GLOBAL" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20334" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_APPLY_INSTANTIATED_OBJECTS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20009" ,'||chr(10)),
     '"CDB_APPLY_INSTANTIATED_OBJECTS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20009" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_APPLY_INSTANTIATED_SCHEMAS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20335" ,'||chr(10)),
     '"CDB_APPLY_INSTANTIATED_SCHEMAS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20335" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_APPLY_KEY_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20010" ,'||chr(10)),
     '"CDB_APPLY_KEY_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20010" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_APPLY_PARAMETERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20011" ,'||chr(10)),
     '"CDB_APPLY_PARAMETERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20011" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_APPLY_PROGRESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20012" ,'||chr(10)),
     '"CDB_APPLY_PROGRESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20012" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_APPLY_REPERROR_HANDLERS" : "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_REPERROR_HANDLERS.htm#REFRN-GUID-3ADEFAAC-DD5F-4029-9A39-9C354EAF6BC1" ,'||chr(10)),
     '"CDB_APPLY_REPERROR_HANDLERS" : "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_REPERROR_HANDLERS.htm#REFRN-GUID-3ADEFAAC-DD5F-4029-9A39-9C354EAF6BC1" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_APPLY_TABLE_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20398" ,'||chr(10)),
     '"CDB_APPLY_TABLE_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20398" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_CAPTURE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20031" ,'||chr(10)),
     '"CDB_CAPTURE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20031" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_CAPTURE_PARAMETERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20032" ,'||chr(10)),
     '"CDB_CAPTURE_PARAMETERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20032" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_CAPTURE_PREPARED_DATABASE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20033" ,'||chr(10)),
     '"CDB_CAPTURE_PREPARED_DATABASE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20033" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_CAPTURE_PREPARED_SCHEMAS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20034" ,'||chr(10)),
     '"CDB_CAPTURE_PREPARED_SCHEMAS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20034" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_CAPTURE_PREPARED_TABLES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20035" ,'||chr(10)),
     '"CDB_CAPTURE_PREPARED_TABLES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20035" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_CONSTRAINTS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20047" ,'||chr(10)),
     '"CDB_CONSTRAINTS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20047" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_GG_AUTO_CDR_COLUMN_GROUPS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"CDB_GG_AUTO_CDR_COLUMN_GROUPS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_GG_AUTO_CDR_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"CDB_GG_AUTO_CDR_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_GG_AUTO_CDR_TABLES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"CDB_GG_AUTO_CDR_TABLES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_GG_INBOUND_PROGRESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20912" ,'||chr(10)),
     '"CDB_GG_INBOUND_PROGRESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20912" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_GOLDENGATE_INBOUND" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20911" ,'||chr(10)),
     '"CDB_GOLDENGATE_INBOUND" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20911" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_GOLDENGATE_PRIVILEGES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20804" ,'||chr(10)),
     '"CDB_GOLDENGATE_PRIVILEGES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20804" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_INDEXES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20088" ,'||chr(10)),
     '"CDB_INDEXES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20088" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_LOG_GROUP_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20119" ,'||chr(10)),
     '"CDB_LOG_GROUP_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20119" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_LOG_GROUPS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20120" ,'||chr(10)),
     '"CDB_LOG_GROUPS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20120" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_OBJECTS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20146" ,'||chr(10)),
     '"CDB_OBJECTS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20146" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_QUEUES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20176" ,'||chr(10)),
     '"CDB_QUEUES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20176" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_QUEUE_SUBSCRIBERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20544" ,'||chr(10)),
     '"CDB_QUEUE_SUBSCRIBERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20544" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_QUEUE_TABLES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20175" ,'||chr(10)),
     '"CDB_QUEUE_TABLES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20175" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_REPLICATION_PROCESS_EVENTS" : "http://docs.oracle.com/database/122/REFRN/DBA_REPLICATION_PROCESS_EVENTS.htm#REFRN-GUID-4E91CF30-0035-4C73-9E26-F5ACD9C5ECCE" ,'||chr(10)),
     '"CDB_REPLICATION_PROCESS_EVENTS" : "http://docs.oracle.com/database/122/REFRN/DBA_REPLICATION_PROCESS_EVENTS.htm#REFRN-GUID-4E91CF30-0035-4C73-9E26-F5ACD9C5ECCE" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_RULE_SET_RULES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20238" ,'||chr(10)),
     '"CDB_RULE_SET_RULES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20238" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_RULES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20240" ,'||chr(10)),
     '"CDB_RULES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20240" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_SCHEDULER_JOBS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20348" ,'||chr(10)),
     '"CDB_SCHEDULER_JOBS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20348" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_SEQUENCES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20244" ,'||chr(10)),
     '"CDB_SEQUENCES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20244" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_SUPPLEMENTAL_LOGGING" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23877" ,'||chr(10)),
     '"CDB_SUPPLEMENTAL_LOGGING" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23877" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_TAB_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20277" ,'||chr(10)),
     '"CDB_TAB_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20277" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_TABLES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20286" ,'||chr(10)),
     '"CDB_TABLES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20286" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_TAB_PARTITIONS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20281" ,'||chr(10)),
     '"CDB_TAB_PARTITIONS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20281" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_TAB_STATISTICS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20376" ,'||chr(10)),
     '"CDB_TAB_STATISTICS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20376" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_TRIGGERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20293" ,'||chr(10)),
     '"CDB_TRIGGERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20293" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_USERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20302" ,'||chr(10)),
     '"CDB_USERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20302" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDB_XSTREAM_OUTBOUND_PROGRESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20736" ,'||chr(10)),
     '"CDB_XSTREAM_OUTBOUND_PROGRESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20736" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CDEF$" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"CDEF$" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"CON$" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"CON$" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_ALERT_HISTORY" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23392" ,'||chr(10)),
     '"DBA_ALERT_HISTORY" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23392" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"_DBA_APPLY_CDR_INFO" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"_DBA_APPLY_CDR_INFO" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_APPLY_CONFLICT_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20006" ,'||chr(10)),
     '"DBA_APPLY_CONFLICT_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20006" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_APPLY_DML_CONF_HANDLERS" : "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_DML_CONF_HANDLERS.htm#REFRN-GUID-7BF15887-0A51-450E-B8C9-5C5FBA4CF3A4" ,'||chr(10)),
     '"DBA_APPLY_DML_CONF_HANDLERS" : "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_DML_CONF_HANDLERS.htm#REFRN-GUID-7BF15887-0A51-450E-B8C9-5C5FBA4CF3A4" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_APPLY_DML_HANDLERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20007" ,'||chr(10)),
     '"DBA_APPLY_DML_HANDLERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20007" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_APPLY_ERROR" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20008" ,'||chr(10)),
     '"DBA_APPLY_ERROR" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20008" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_APPLY_ERROR_MESSAGES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20783" ,'||chr(10)),
     '"DBA_APPLY_ERROR_MESSAGES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20783" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_APPLY_HANDLE_COLLISIONS" : "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_HANDLE_COLLISIONS.htm#REFRN-GUID-C4B47347-0A99-4666-ABC8-B9104BFD3E28" ,'||chr(10)),
     '"DBA_APPLY_HANDLE_COLLISIONS" : "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_HANDLE_COLLISIONS.htm#REFRN-GUID-C4B47347-0A99-4666-ABC8-B9104BFD3E28" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_APPLY" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20005" ,'||chr(10)),
     '"DBA_APPLY" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20005" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_APPLY_INSTANTIATED_GLOBAL" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20334" ,'||chr(10)),
     '"DBA_APPLY_INSTANTIATED_GLOBAL" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20334" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_APPLY_INSTANTIATED_OBJECTS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20009" ,'||chr(10)),
     '"DBA_APPLY_INSTANTIATED_OBJECTS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20009" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_APPLY_INSTANTIATED_SCHEMAS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20335" ,'||chr(10)),
     '"DBA_APPLY_INSTANTIATED_SCHEMAS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20335" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_APPLY_KEY_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20010" ,'||chr(10)),
     '"DBA_APPLY_KEY_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20010" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_APPLY_OBJECT_DEPENDENCIES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23497" ,'||chr(10)),
     '"DBA_APPLY_OBJECT_DEPENDENCIES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23497" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_APPLY_PARAMETERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20011" ,'||chr(10)),
     '"DBA_APPLY_PARAMETERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20011" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_APPLY_PROGRESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20012" ,'||chr(10)),
     '"DBA_APPLY_PROGRESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20012" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_APPLY_REPERROR_HANDLERS" : "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_REPERROR_HANDLERS.htm#REFRN-GUID-3ADEFAAC-DD5F-4029-9A39-9C354EAF6BC1" ,'||chr(10)),
     '"DBA_APPLY_REPERROR_HANDLERS" : "http://docs.oracle.com/database/122/REFRN/ALL_APPLY_REPERROR_HANDLERS.htm#REFRN-GUID-3ADEFAAC-DD5F-4029-9A39-9C354EAF6BC1" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_APPLY_TABLE_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20398" ,'||chr(10)),
     '"DBA_APPLY_TABLE_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20398" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_APPLY_VALUE_DEPENDENCIES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23498" ,'||chr(10)),
     '"DBA_APPLY_VALUE_DEPENDENCIES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23498" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_AQ_AGENT_PRIVS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23013" ,'||chr(10)),
     '"DBA_AQ_AGENT_PRIVS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23013" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_AQ_AGENTS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23014" ,'||chr(10)),
     '"DBA_AQ_AGENTS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23014" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_CAPTURE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20031" ,'||chr(10)),
     '"DBA_CAPTURE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20031" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_CAPTURE_PARAMETERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20032" ,'||chr(10)),
     '"DBA_CAPTURE_PARAMETERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20032" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_CAPTURE_PREPARED_DATABASE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20033" ,'||chr(10)),
     '"DBA_CAPTURE_PREPARED_DATABASE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20033" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_CAPTURE_PREPARED_SCHEMAS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20034" ,'||chr(10)),
     '"DBA_CAPTURE_PREPARED_SCHEMAS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20034" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_CAPTURE_PREPARED_TABLES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20035" ,'||chr(10)),
     '"DBA_CAPTURE_PREPARED_TABLES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20035" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_COMPARISON" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23582" ,'||chr(10)),
     '"DBA_COMPARISON" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23582" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_COMPARISON_SCAN" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23585" ,'||chr(10)),
     '"DBA_COMPARISON_SCAN" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23585" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_CONSTRAINTS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20047" ,'||chr(10)),
     '"DBA_CONSTRAINTS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20047" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_DATA_FILES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23049" ,'||chr(10)),
     '"DBA_DATA_FILES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23049" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_GG_AUTO_CDR_COLUMN_GROUPS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"DBA_GG_AUTO_CDR_COLUMN_GROUPS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_GG_AUTO_CDR_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"DBA_GG_AUTO_CDR_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_GG_AUTO_CDR_TABLES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"DBA_GG_AUTO_CDR_TABLES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_GG_INBOUND_PROGRESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20912" ,'||chr(10)),
     '"DBA_GG_INBOUND_PROGRESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20912" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_GOLDENGATE_INBOUND" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20911" ,'||chr(10)),
     '"DBA_GOLDENGATE_INBOUND" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20911" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_GOLDENGATE_PRIVILEGES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20804" ,'||chr(10)),
     '"DBA_GOLDENGATE_PRIVILEGES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20804" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_GOLDENGATE_SUPPORT_MODE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23952" ,'||chr(10)),
     '"DBA_GOLDENGATE_SUPPORT_MODE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23952" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_INDEXES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20088" ,'||chr(10)),
     '"DBA_INDEXES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20088" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_JOBS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23105" ,'||chr(10)),
     '"DBA_JOBS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23105" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_LOG_GROUP_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20119" ,'||chr(10)),
     '"DBA_LOG_GROUP_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20119" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_LOG_GROUPS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20120" ,'||chr(10)),
     '"DBA_LOG_GROUPS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20120" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_OBJECTS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20146" ,'||chr(10)),
     '"DBA_OBJECTS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20146" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_OUTSTANDING_ALERTS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23464" ,'||chr(10)),
     '"DBA_OUTSTANDING_ALERTS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23464" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_PART_TABLES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23159" ,'||chr(10)),
     '"DBA_PART_TABLES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23159" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_QUEUES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20176" ,'||chr(10)),
     '"DBA_QUEUES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20176" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_QUEUE_SUBSCRIBERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20544" ,'||chr(10)),
     '"DBA_QUEUE_SUBSCRIBERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20544" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_QUEUE_TABLES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20175" ,'||chr(10)),
     '"DBA_QUEUE_TABLES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20175" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_RECOVERABLE_SCRIPT_BLOCKS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23546" ,'||chr(10)),
     '"DBA_RECOVERABLE_SCRIPT_BLOCKS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23546" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_RECOVERABLE_SCRIPT_ERRORS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23547" ,'||chr(10)),
     '"DBA_RECOVERABLE_SCRIPT_ERRORS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23547" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_RECOVERABLE_SCRIPT_HIST" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23755" ,'||chr(10)),
     '"DBA_RECOVERABLE_SCRIPT_HIST" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23755" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_RECOVERABLE_SCRIPT" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23545" ,'||chr(10)),
     '"DBA_RECOVERABLE_SCRIPT" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23545" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_RECOVERABLE_SCRIPT_PARAMS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23548" ,'||chr(10)),
     '"DBA_RECOVERABLE_SCRIPT_PARAMS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23548" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_REGISTRY_HISTORY" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23549" ,'||chr(10)),
     '"DBA_REGISTRY_HISTORY" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23549" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_REGISTRY" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23186" ,'||chr(10)),
     '"DBA_REGISTRY" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23186" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_REPLICATION_PROCESS_EVENTS" : "http://docs.oracle.com/database/122/REFRN/DBA_REPLICATION_PROCESS_EVENTS.htm#REFRN-GUID-4E91CF30-0035-4C73-9E26-F5ACD9C5ECCE" ,'||chr(10)),
     '"DBA_REPLICATION_PROCESS_EVENTS" : "http://docs.oracle.com/database/122/REFRN/DBA_REPLICATION_PROCESS_EVENTS.htm#REFRN-GUID-4E91CF30-0035-4C73-9E26-F5ACD9C5ECCE" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_RULE_SET_RULES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20238" ,'||chr(10)),
     '"DBA_RULE_SET_RULES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20238" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_RULES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20240" ,'||chr(10)),
     '"DBA_RULES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20240" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_SCHEDULER_JOBS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20348" ,'||chr(10)),
     '"DBA_SCHEDULER_JOBS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20348" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_SEGMENTS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23243" ,'||chr(10)),
     '"DBA_SEGMENTS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23243" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_SEQUENCES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20244" ,'||chr(10)),
     '"DBA_SEQUENCES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20244" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_STREAMS_ADMINISTRATOR" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23371" ,'||chr(10)),
     '"DBA_STREAMS_ADMINISTRATOR" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23371" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_STREAMS_STMT_HANDLERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23765" ,'||chr(10)),
     '"DBA_STREAMS_STMT_HANDLERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23765" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_STREAMS_STMTS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23766" ,'||chr(10)),
     '"DBA_STREAMS_STMTS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23766" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_STREAMS_TP_COMPONENT" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23611" ,'||chr(10)),
     '"DBA_STREAMS_TP_COMPONENT" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23611" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_STREAMS_TP_COMPONENT_LINK" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23612" ,'||chr(10)),
     '"DBA_STREAMS_TP_COMPONENT_LINK" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23612" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_STREAMS_TP_COMPONENT_STAT" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23613" ,'||chr(10)),
     '"DBA_STREAMS_TP_COMPONENT_STAT" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23613" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_STREAMS_TP_DATABASE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23614" ,'||chr(10)),
     '"DBA_STREAMS_TP_DATABASE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23614" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_STREAMS_TP_PATH_BOTTLENECK" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23615" ,'||chr(10)),
     '"DBA_STREAMS_TP_PATH_BOTTLENECK" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23615" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_STREAMS_TP_PATH_STAT" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23616" ,'||chr(10)),
     '"DBA_STREAMS_TP_PATH_STAT" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23616" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_SUPPLEMENTAL_LOGGING" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23877" ,'||chr(10)),
     '"DBA_SUPPLEMENTAL_LOGGING" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23877" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_TAB_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20277" ,'||chr(10)),
     '"DBA_TAB_COLUMNS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20277" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_TABLES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20286" ,'||chr(10)),
     '"DBA_TABLES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20286" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_TAB_PARTITIONS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20281" ,'||chr(10)),
     '"DBA_TAB_PARTITIONS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20281" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_TAB_STATISTICS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20376" ,'||chr(10)),
     '"DBA_TAB_STATISTICS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20376" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_TAB_SUBPARTITIONS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23285" ,'||chr(10)),
     '"DBA_TAB_SUBPARTITIONS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN23285" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_TRIGGERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20293" ,'||chr(10)),
     '"DBA_TRIGGERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20293" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_USERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20302" ,'||chr(10)),
     '"DBA_USERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20302" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"DBA_XSTREAM_OUTBOUND_PROGRESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20736" ,'||chr(10)),
     '"DBA_XSTREAM_OUTBOUND_PROGRESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN20736" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GLOBAL_NAME" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN29019" ,'||chr(10)),
     '"GLOBAL_NAME" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN29019" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNRC_DBNAME_UID_MAP" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"LOGMNRC_DBNAME_UID_MAP" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNRC_GTCS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"LOGMNRC_GTCS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNRC_GTLO" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"LOGMNRC_GTLO" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR_CONTAINER$" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"LOGMNR_CONTAINER$" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR_DICTIONARY$" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"LOGMNR_DICTIONARY$" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR_DICTSTATE$" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"LOGMNR_DICTSTATE$" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR_DID$" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"LOGMNR_DID$" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR_PARAMETER$" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"LOGMNR_PARAMETER$" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR_PDB_INFO$" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"LOGMNR_PDB_INFO$" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR_RESTART_CKPT$" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"LOGMNR_RESTART_CKPT$" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR$SCHEMA_ALLKEY_SUPLOG" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"LOGMNR$SCHEMA_ALLKEY_SUPLOG" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR_SESSION$" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"LOGMNR_SESSION$" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"LOGMNR_UID$" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"LOGMNR_UID$" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"NLS_DATABASE_PARAMETERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"NLS_DATABASE_PARAMETERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"OBJ$" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"OBJ$" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"PROPS$" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"PROPS$" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"STREAMS$_APPLY_PROCESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"STREAMS$_APPLY_PROCESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"STREAMS$_APPLY_PROGRESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"STREAMS$_APPLY_PROGRESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"STREAMS$_CAPTURE_PROCESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"STREAMS$_CAPTURE_PROCESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"STREAMS$_RULES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"STREAMS$_RULES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"USER$" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"USER$" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$ACCESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30001" ,'||chr(10)),
     '"V$ACCESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30001" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$ACCESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30001" ,'||chr(10)),
     '"GV$ACCESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30001" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$ACTIVE_SESSION_HISTORY" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30299" ,'||chr(10)),
     '"V$ACTIVE_SESSION_HISTORY" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30299" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$ACTIVE_SESSION_HISTORY" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30299" ,'||chr(10)),
     '"GV$ACTIVE_SESSION_HISTORY" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30299" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$ARCHIVED_LOG" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30011" ,'||chr(10)),
     '"V$ARCHIVED_LOG" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30011" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$ARCHIVED_LOG" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30011" ,'||chr(10)),
     '"GV$ARCHIVED_LOG" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30011" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$BUFFERED_PUBLISHERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30316" ,'||chr(10)),
     '"V$BUFFERED_PUBLISHERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30316" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$BUFFERED_PUBLISHERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30316" ,'||chr(10)),
     '"GV$BUFFERED_PUBLISHERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30316" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$BUFFERED_QUEUES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30317" ,'||chr(10)),
     '"V$BUFFERED_QUEUES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30317" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$BUFFERED_QUEUES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30317" ,'||chr(10)),
     '"GV$BUFFERED_QUEUES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30317" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$BUFFERED_SUBSCRIBERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30318" ,'||chr(10)),
     '"V$BUFFERED_SUBSCRIBERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30318" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$BUFFERED_SUBSCRIBERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30318" ,'||chr(10)),
     '"GV$BUFFERED_SUBSCRIBERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30318" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$CONTAINERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30708" ,'||chr(10)),
     '"V$CONTAINERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30708" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$CONTAINERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30708" ,'||chr(10)),
     '"GV$CONTAINERS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30708" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$DATABASE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30047" ,'||chr(10)),
     '"V$DATABASE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30047" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$DATABASE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30047" ,'||chr(10)),
     '"GV$DATABASE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30047" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$DATABASE_INCARNATION" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30049" ,'||chr(10)),
     '"V$DATABASE_INCARNATION" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30049" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$DATABASE_INCARNATION" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30049" ,'||chr(10)),
     '"GV$DATABASE_INCARNATION" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30049" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$FIXED_TABLE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30089" ,'||chr(10)),
     '"V$FIXED_TABLE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30089" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$FIXED_TABLE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30089" ,'||chr(10)),
     '"GV$FIXED_TABLE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30089" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$GG_APPLY_COORDINATOR" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30684" ,'||chr(10)),
     '"V$GG_APPLY_COORDINATOR" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30684" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$GG_APPLY_COORDINATOR" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30684" ,'||chr(10)),
     '"GV$GG_APPLY_COORDINATOR" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30684" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$GG_APPLY_READER" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30686" ,'||chr(10)),
     '"V$GG_APPLY_READER" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30686" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$GG_APPLY_READER" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30686" ,'||chr(10)),
     '"GV$GG_APPLY_READER" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30686" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$GG_APPLY_RECEIVER" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30728" ,'||chr(10)),
     '"V$GG_APPLY_RECEIVER" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30728" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$GG_APPLY_RECEIVER" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30728" ,'||chr(10)),
     '"GV$GG_APPLY_RECEIVER" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30728" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$GG_APPLY_SERVER" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30688" ,'||chr(10)),
     '"V$GG_APPLY_SERVER" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30688" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$GG_APPLY_SERVER" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30688" ,'||chr(10)),
     '"GV$GG_APPLY_SERVER" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30688" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$GOLDENGATE_CAPTURE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30654" ,'||chr(10)),
     '"V$GOLDENGATE_CAPTURE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30654" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$GOLDENGATE_CAPTURE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30654" ,'||chr(10)),
     '"GV$GOLDENGATE_CAPTURE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30654" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$GOLDENGATE_MESSAGE_TRACKING" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30656" ,'||chr(10)),
     '"V$GOLDENGATE_MESSAGE_TRACKING" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30656" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$GOLDENGATE_MESSAGE_TRACKING" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30656" ,'||chr(10)),
     '"GV$GOLDENGATE_MESSAGE_TRACKING" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30656" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$GOLDENGATE_TABLE_STATS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30657" ,'||chr(10)),
     '"V$GOLDENGATE_TABLE_STATS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30657" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$GOLDENGATE_TABLE_STATS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30657" ,'||chr(10)),
     '"GV$GOLDENGATE_TABLE_STATS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30657" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$GOLDENGATE_TRANSACTION" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30655" ,'||chr(10)),
     '"V$GOLDENGATE_TRANSACTION" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30655" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$GOLDENGATE_TRANSACTION" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30655" ,'||chr(10)),
     '"GV$GOLDENGATE_TRANSACTION" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30655" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$INSTANCE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30105" ,'||chr(10)),
     '"V$INSTANCE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30105" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$INSTANCE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30105" ,'||chr(10)),
     '"GV$INSTANCE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30105" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$LOG_HISTORY" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30128" ,'||chr(10)),
     '"V$LOG_HISTORY" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30128" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$LOG_HISTORY" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30128" ,'||chr(10)),
     '"GV$LOG_HISTORY" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30128" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$LOGMNR_DICTIONARY_LOAD" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30378" ,'||chr(10)),
     '"V$LOGMNR_DICTIONARY_LOAD" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30378" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$LOGMNR_DICTIONARY_LOAD" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30378" ,'||chr(10)),
     '"GV$LOGMNR_DICTIONARY_LOAD" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30378" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$LOGMNR_PROCESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30137" ,'||chr(10)),
     '"V$LOGMNR_PROCESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30137" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$LOGMNR_PROCESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30137" ,'||chr(10)),
     '"GV$LOGMNR_PROCESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30137" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$LOGMNR_SESSION" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30139" ,'||chr(10)),
     '"V$LOGMNR_SESSION" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30139" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$LOGMNR_SESSION" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30139" ,'||chr(10)),
     '"GV$LOGMNR_SESSION" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30139" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$LOGMNR_STATS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30140" ,'||chr(10)),
     '"V$LOGMNR_STATS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30140" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$LOGMNR_STATS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30140" ,'||chr(10)),
     '"GV$LOGMNR_STATS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30140" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$PARAMETER" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30176" ,'||chr(10)),
     '"V$PARAMETER" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30176" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$PARAMETER" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30176" ,'||chr(10)),
     '"GV$PARAMETER" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30176" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$PROCESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30186" ,'||chr(10)),
     '"V$PROCESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30186" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$PROCESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30186" ,'||chr(10)),
     '"GV$PROCESS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30186" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$PROPAGATION_RECEIVER" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30352" ,'||chr(10)),
     '"V$PROPAGATION_RECEIVER" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30352" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$PROPAGATION_RECEIVER" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30352" ,'||chr(10)),
     '"GV$PROPAGATION_RECEIVER" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30352" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$RULE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30307" ,'||chr(10)),
     '"V$RULE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30307" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$RULE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30307" ,'||chr(10)),
     '"GV$RULE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30307" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$RULE_SET" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30218" ,'||chr(10)),
     '"V$RULE_SET" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30218" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$RULE_SET" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30218" ,'||chr(10)),
     '"GV$RULE_SET" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30218" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SERVICES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30354" ,'||chr(10)),
     '"V$SERVICES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30354" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$SERVICES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30354" ,'||chr(10)),
     '"GV$SERVICES" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30354" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SESSION_EVENT" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30226" ,'||chr(10)),
     '"V$SESSION_EVENT" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30226" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$SESSION_EVENT" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30226" ,'||chr(10)),
     '"GV$SESSION_EVENT" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30226" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SESSION" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30223" ,'||chr(10)),
     '"V$SESSION" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30223" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$SESSION" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30223" ,'||chr(10)),
     '"GV$SESSION" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30223" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SESSION_WAIT" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30229" ,'||chr(10)),
     '"V$SESSION_WAIT" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30229" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$SESSION_WAIT" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30229" ,'||chr(10)),
     '"GV$SESSION_WAIT" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30229" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SESSTAT" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRNREFRN30232" ,'||chr(10)),
     '"V$SESSTAT" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRNREFRN30232" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$SESSTAT" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRNREFRN30232" ,'||chr(10)),
     '"GV$SESSTAT" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRNREFRN30232" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SESS_TIME_MODEL" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30340" ,'||chr(10)),
     '"V$SESS_TIME_MODEL" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30340" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$SESS_TIME_MODEL" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30340" ,'||chr(10)),
     '"GV$SESS_TIME_MODEL" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30340" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SGAINFO" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30314" ,'||chr(10)),
     '"V$SGAINFO" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30314" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$SGAINFO" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30314" ,'||chr(10)),
     '"GV$SGAINFO" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30314" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SGASTAT" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30238" ,'||chr(10)),
     '"V$SGASTAT" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30238" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$SGASTAT" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30238" ,'||chr(10)),
     '"GV$SGASTAT" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30238" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SQLAREA" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30259" ,'||chr(10)),
     '"V$SQLAREA" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30259" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$SQLAREA" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30259" ,'||chr(10)),
     '"GV$SQLAREA" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30259" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SQL" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30246" ,'||chr(10)),
     '"V$SQL" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30246" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$SQL" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30246" ,'||chr(10)),
     '"GV$SQL" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30246" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$SQL_PLAN" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30250" ,'||chr(10)),
     '"V$SQL_PLAN" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30250" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$SQL_PLAN" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30250" ,'||chr(10)),
     '"GV$SQL_PLAN" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30250" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$STANDBY_LOG" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30263" ,'||chr(10)),
     '"V$STANDBY_LOG" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30263" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$STANDBY_LOG" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30263" ,'||chr(10)),
     '"GV$STANDBY_LOG" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30263" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$STATNAME" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30265" ,'||chr(10)),
     '"V$STATNAME" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30265" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$STATNAME" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30265" ,'||chr(10)),
     '"GV$STATNAME" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30265" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$STREAMS_POOL_STATISTICS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRNREFRN30634" ,'||chr(10)),
     '"V$STREAMS_POOL_STATISTICS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRNREFRN30634" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$STREAMS_POOL_STATISTICS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRNREFRN30634" ,'||chr(10)),
     '"GV$STREAMS_POOL_STATISTICS" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRNREFRN30634" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$TRANSACTION" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30291" ,'||chr(10)),
     '"V$TRANSACTION" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30291" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$TRANSACTION" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30291" ,'||chr(10)),
     '"GV$TRANSACTION" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30291" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$VERSION" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30296" ,'||chr(10)),
     '"V$VERSION" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30296" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$VERSION" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30296" ,'||chr(10)),
     '"GV$VERSION" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30296" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"V$XSTREAM_OUTBOUND_SERVER" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30641" ,'||chr(10)),
     '"V$XSTREAM_OUTBOUND_SERVER" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30641" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"GV$XSTREAM_OUTBOUND_SERVER" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30641" ,'||chr(10)),
     '"GV$XSTREAM_OUTBOUND_SERVER" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN30641" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"X$KNGFLE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"X$KNGFLE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"X$KNGFL" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"X$KNGFL" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"X$KNLASG" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"X$KNLASG" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"X$KNSTCAPCACHE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"X$KNSTCAPCACHE" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"X$KNSTCAP" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"X$KNSTCAP" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"X$KRVXSV" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"X$KRVXSV" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"X$KWQBPMT" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10)),
     '"X$KWQBPMT" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" ,'||chr(10));
  dbms_lob.writeappend(clb, 
     length('"X$KWQPD" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" '||chr(10)),
     '"X$KWQPD" : "https://www.oracle.com/pls/topic/lookup?ctx=db122&id=REFRN" '||chr(10));
  dbms_lob.writeappend(clb, 
     length('}'||chr(10)),
     '}'||chr(10));
end if;
end;
/

set define on
prompt Checking installation. This might take a while...
set long 10000
set pages 10000
select dbms_goldengate_hcadm_int.check_stats('all') from dual;
set serverout on
set lines 300
exec dbms_goldengate_hcadm_int.check_install;
exit
